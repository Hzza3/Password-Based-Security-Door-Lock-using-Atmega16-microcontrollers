
SecurityMc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000314e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  0000314e  000031e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001c2  008001c2  00003344  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00003344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d33  00000000  00000000  00005f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a830  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a990  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 a5 18 	jmp	0x314a	; 0x314a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 eb       	ldi	r26, 0xB9	; 185
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 eb       	ldi	r24, 0xB9	; 185
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
, Modified in the ISR in uart.c file */

volatile uint8 second = 0; /*holds the number of seconds counted by the Timer0, Modified in the ISR*/

int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cb 57       	subi	r28, 0x7B	; 123
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61

	/*------------------------------------------------All Variables---------------------------------------------------*/

	uint8 flag = 0;
     b60:	fe 01       	movw	r30, r28
     b62:	e8 59       	subi	r30, 0x98	; 152
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
	uint8 val; /*to read the value from EEPROM in it*/
	uint8 a_firstPass[6]; /*Holds the first entered password*/
	uint8 a_secondPass[6]; /*Holds the second entered password*/
	uint8 compare = 0; /* holds the return value of "strcmp" function when comparing 2 password  */
     b68:	fe 01       	movw	r30, r28
     b6a:	ea 59       	subi	r30, 0x9A	; 154
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	10 82       	st	Z, r1
	uint8 a_message[7];/* contains the string to be sent by UART_sendString() */
	uint8 inputChoise; /* Contains the user choice to open the door or change the password */
	uint8 state = 0; /**/
     b70:	fe 01       	movw	r30, r28
     b72:	ec 59       	subi	r30, 0x9C	; 156
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	10 82       	st	Z, r1
	uint8 wrong_Counter = 0;/*Contains the number of wrong password trials by the user*/
     b78:	fe 01       	movw	r30, r28
     b7a:	ed 59       	subi	r30, 0x9D	; 157
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	10 82       	st	Z, r1

	/*------------------------------------------------Modules Initialization------------------------------------------*/

	LCD_init(); /* initialize LCD */
     b80:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_init>
	UART_init(); /* initialize UART */
     b84:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <UART_init>
	sei();
     b88:	78 94       	sei
	/*Enable global interrupts */
	/*-----------------------------------------------------------------------------------------------------------------*/

	val = eepromReadByte(0x0D); //Read a value (0x05) from address (0x0D) in Internal EEPROM to check if the first time
     b8a:	8d e0       	ldi	r24, 0x0D	; 13
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 c7 0b 	call	0x178e	; 0x178e <eepromReadByte>
     b92:	fe 01       	movw	r30, r28
     b94:	e9 59       	subi	r30, 0x99	; 153
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	80 83       	st	Z, r24
	if (val != 0x05)
     b9a:	fe 01       	movw	r30, r28
     b9c:	e9 59       	subi	r30, 0x99	; 153
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	80 81       	ld	r24, Z
     ba2:	85 30       	cpi	r24, 0x05	; 5
     ba4:	29 f0       	breq	.+10     	; 0xbb0 <main+0x6a>
	{
		flag = 0;
     ba6:	fe 01       	movw	r30, r28
     ba8:	e8 59       	subi	r30, 0x98	; 152
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	10 82       	st	Z, r1
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <main+0x80>
	}
	else if (val == 0x05)
     bb0:	fe 01       	movw	r30, r28
     bb2:	e9 59       	subi	r30, 0x99	; 153
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	80 81       	ld	r24, Z
     bb8:	85 30       	cpi	r24, 0x05	; 5
     bba:	29 f4       	brne	.+10     	; 0xbc6 <main+0x80>
	{
		flag = 1;
     bbc:	fe 01       	movw	r30, r28
     bbe:	e8 59       	subi	r30, 0x98	; 152
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 83       	st	Z, r24
	}

	while (1)
	{

		if (flag == 0)
     bc6:	fe 01       	movw	r30, r28
     bc8:	e8 59       	subi	r30, 0x98	; 152
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	80 81       	ld	r24, Z
     bce:	88 23       	and	r24, r24
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <main+0x8e>
     bd2:	68 c2       	rjmp	.+1232   	; 0x10a4 <main+0x55e>
		{

			LCD_displayStringRowColumn(0, 0, "Enter New pass:");
     bd4:	20 e6       	ldi	r18, 0x60	; 96
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	a9 01       	movw	r20, r18
     bde:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "ON:ENTER X:CLEAR");
     be2:	20 e7       	ldi	r18, 0x70	; 112
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	a9 01       	movw	r20, r18
     bec:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
     bf0:	fe 01       	movw	r30, r28
     bf2:	e1 5a       	subi	r30, 0xA1	; 161
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	aa ef       	ldi	r26, 0xFA	; 250
     bfc:	b4 e4       	ldi	r27, 0x44	; 68
     bfe:	80 83       	st	Z, r24
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	a2 83       	std	Z+2, r26	; 0x02
     c04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c06:	8e 01       	movw	r16, r28
     c08:	05 5a       	subi	r16, 0xA5	; 165
     c0a:	1f 4f       	sbci	r17, 0xFF	; 255
     c0c:	fe 01       	movw	r30, r28
     c0e:	e1 5a       	subi	r30, 0xA1	; 161
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	93 81       	ldd	r25, Z+3	; 0x03
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	4a ef       	ldi	r20, 0xFA	; 250
     c20:	54 e4       	ldi	r21, 0x44	; 68
     c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	f8 01       	movw	r30, r16
     c2c:	80 83       	st	Z, r24
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	a2 83       	std	Z+2, r26	; 0x02
     c32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c34:	fe 01       	movw	r30, r28
     c36:	e5 5a       	subi	r30, 0xA5	; 165
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	60 81       	ld	r22, Z
     c3c:	71 81       	ldd	r23, Z+1	; 0x01
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e8       	ldi	r20, 0x80	; 128
     c48:	5f e3       	ldi	r21, 0x3F	; 63
     c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c4e:	88 23       	and	r24, r24
     c50:	44 f4       	brge	.+16     	; 0xc62 <main+0x11c>
		__ticks = 1;
     c52:	fe 01       	movw	r30, r28
     c54:	e7 5a       	subi	r30, 0xA7	; 167
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
     c60:	64 c0       	rjmp	.+200    	; 0xd2a <main+0x1e4>
	else if (__tmp > 65535)
     c62:	fe 01       	movw	r30, r28
     c64:	e5 5a       	subi	r30, 0xA5	; 165
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	60 81       	ld	r22, Z
     c6a:	71 81       	ldd	r23, Z+1	; 0x01
     c6c:	82 81       	ldd	r24, Z+2	; 0x02
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	3f ef       	ldi	r19, 0xFF	; 255
     c74:	4f e7       	ldi	r20, 0x7F	; 127
     c76:	57 e4       	ldi	r21, 0x47	; 71
     c78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	0c f0       	brlt	.+2      	; 0xc82 <main+0x13c>
     c80:	43 c0       	rjmp	.+134    	; 0xd08 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c82:	fe 01       	movw	r30, r28
     c84:	e1 5a       	subi	r30, 0xA1	; 161
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	60 81       	ld	r22, Z
     c8a:	71 81       	ldd	r23, Z+1	; 0x01
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e2       	ldi	r20, 0x20	; 32
     c96:	51 e4       	ldi	r21, 0x41	; 65
     c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	8e 01       	movw	r16, r28
     ca2:	07 5a       	subi	r16, 0xA7	; 167
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	bc 01       	movw	r22, r24
     ca8:	cd 01       	movw	r24, r26
     caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	f8 01       	movw	r30, r16
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
     cb8:	1f c0       	rjmp	.+62     	; 0xcf8 <main+0x1b2>
     cba:	fe 01       	movw	r30, r28
     cbc:	e9 5a       	subi	r30, 0xA9	; 169
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	88 ec       	ldi	r24, 0xC8	; 200
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc8:	fe 01       	movw	r30, r28
     cca:	e9 5a       	subi	r30, 0xA9	; 169
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <main+0x18c>
     cd6:	fe 01       	movw	r30, r28
     cd8:	e9 5a       	subi	r30, 0xA9	; 169
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	91 83       	std	Z+1, r25	; 0x01
     cde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce0:	de 01       	movw	r26, r28
     ce2:	a7 5a       	subi	r26, 0xA7	; 167
     ce4:	bf 4f       	sbci	r27, 0xFF	; 255
     ce6:	fe 01       	movw	r30, r28
     ce8:	e7 5a       	subi	r30, 0xA7	; 167
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	80 81       	ld	r24, Z
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	9c 93       	st	X, r25
     cf6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf8:	fe 01       	movw	r30, r28
     cfa:	e7 5a       	subi	r30, 0xA7	; 167
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	d1 f6       	brne	.-76     	; 0xcba <main+0x174>
     d06:	27 c0       	rjmp	.+78     	; 0xd56 <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d08:	8e 01       	movw	r16, r28
     d0a:	07 5a       	subi	r16, 0xA7	; 167
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	fe 01       	movw	r30, r28
     d10:	e5 5a       	subi	r30, 0xA5	; 165
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	60 81       	ld	r22, Z
     d16:	71 81       	ldd	r23, Z+1	; 0x01
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	f8 01       	movw	r30, r16
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	80 83       	st	Z, r24
     d2a:	de 01       	movw	r26, r28
     d2c:	ab 5a       	subi	r26, 0xAB	; 171
     d2e:	bf 4f       	sbci	r27, 0xFF	; 255
     d30:	fe 01       	movw	r30, r28
     d32:	e7 5a       	subi	r30, 0xA7	; 167
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	8d 93       	st	X+, r24
     d3c:	9c 93       	st	X, r25
     d3e:	fe 01       	movw	r30, r28
     d40:	eb 5a       	subi	r30, 0xAB	; 171
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	80 81       	ld	r24, Z
     d46:	91 81       	ldd	r25, Z+1	; 0x01
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <main+0x202>
     d4c:	fe 01       	movw	r30, r28
     d4e:	eb 5a       	subi	r30, 0xAB	; 171
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24
			_delay_ms(2000);
			LCD_displayStringRowColumn(1, 0, "                ");
     d56:	21 e8       	ldi	r18, 0x81	; 129
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
			getPassword(a_firstPass);
     d64:	ce 01       	movw	r24, r28
     d66:	87 59       	subi	r24, 0x97	; 151
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <getPassword>

			LCD_clearScreen();
     d6e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "ReEnter The pass");
     d72:	22 e9       	ldi	r18, 0x92	; 146
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	a9 01       	movw	r20, r18
     d7c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
			getPassword(a_secondPass);
     d80:	ce 01       	movw	r24, r28
     d82:	81 59       	subi	r24, 0x91	; 145
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <getPassword>

			compare = strcmp(a_firstPass, a_secondPass);
     d8a:	ce 01       	movw	r24, r28
     d8c:	87 59       	subi	r24, 0x97	; 151
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	9e 01       	movw	r18, r28
     d92:	21 59       	subi	r18, 0x91	; 145
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	b9 01       	movw	r22, r18
     d98:	0e 94 57 18 	call	0x30ae	; 0x30ae <strcmp>
     d9c:	fe 01       	movw	r30, r28
     d9e:	ea 59       	subi	r30, 0x9A	; 154
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 83       	st	Z, r24

			if (compare == 0)
     da4:	fe 01       	movw	r30, r28
     da6:	ea 59       	subi	r30, 0x9A	; 154
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	09 f0       	breq	.+2      	; 0xdb2 <main+0x26c>
     db0:	df c0       	rjmp	.+446    	; 0xf70 <main+0x42a>
			{

				eepromWriteByte(0x0D, 0x05);
     db2:	8d e0       	ldi	r24, 0x0D	; 13
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	65 e0       	ldi	r22, 0x05	; 5
     db8:	0e 94 97 0b 	call	0x172e	; 0x172e <eepromWriteByte>
				flag = 1;
     dbc:	fe 01       	movw	r30, r28
     dbe:	e8 59       	subi	r30, 0x98	; 152
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 83       	st	Z, r24

				LCD_clearScreen();
     dc6:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 3, "password");
     dca:	23 ea       	ldi	r18, 0xA3	; 163
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	63 e0       	ldi	r22, 0x03	; 3
     dd2:	a9 01       	movw	r20, r18
     dd4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 4, "Match");
     dd8:	2c ea       	ldi	r18, 0xAC	; 172
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	64 e0       	ldi	r22, 0x04	; 4
     de0:	a9 01       	movw	r20, r18
     de2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
     de6:	fe 01       	movw	r30, r28
     de8:	ef 5a       	subi	r30, 0xAF	; 175
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	aa ef       	ldi	r26, 0xFA	; 250
     df2:	b4 e4       	ldi	r27, 0x44	; 68
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	a2 83       	std	Z+2, r26	; 0x02
     dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	8e 01       	movw	r16, r28
     dfe:	03 5b       	subi	r16, 0xB3	; 179
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	fe 01       	movw	r30, r28
     e04:	ef 5a       	subi	r30, 0xAF	; 175
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	4a ef       	ldi	r20, 0xFA	; 250
     e16:	54 e4       	ldi	r21, 0x44	; 68
     e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	f8 01       	movw	r30, r16
     e22:	80 83       	st	Z, r24
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	a2 83       	std	Z+2, r26	; 0x02
     e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e2a:	fe 01       	movw	r30, r28
     e2c:	e3 5b       	subi	r30, 0xB3	; 179
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	44 f4       	brge	.+16     	; 0xe58 <main+0x312>
		__ticks = 1;
     e48:	fe 01       	movw	r30, r28
     e4a:	e5 5b       	subi	r30, 0xB5	; 181
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
     e56:	64 c0       	rjmp	.+200    	; 0xf20 <main+0x3da>
	else if (__tmp > 65535)
     e58:	fe 01       	movw	r30, r28
     e5a:	e3 5b       	subi	r30, 0xB3	; 179
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	4f e7       	ldi	r20, 0x7F	; 127
     e6c:	57 e4       	ldi	r21, 0x47	; 71
     e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e72:	18 16       	cp	r1, r24
     e74:	0c f0       	brlt	.+2      	; 0xe78 <main+0x332>
     e76:	43 c0       	rjmp	.+134    	; 0xefe <main+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e78:	fe 01       	movw	r30, r28
     e7a:	ef 5a       	subi	r30, 0xAF	; 175
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	60 81       	ld	r22, Z
     e80:	71 81       	ldd	r23, Z+1	; 0x01
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e2       	ldi	r20, 0x20	; 32
     e8c:	51 e4       	ldi	r21, 0x41	; 65
     e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	8e 01       	movw	r16, r28
     e98:	05 5b       	subi	r16, 0xB5	; 181
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	f8 01       	movw	r30, r16
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	80 83       	st	Z, r24
     eae:	1f c0       	rjmp	.+62     	; 0xeee <main+0x3a8>
     eb0:	fe 01       	movw	r30, r28
     eb2:	e7 5b       	subi	r30, 0xB7	; 183
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	88 ec       	ldi	r24, 0xC8	; 200
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	80 83       	st	Z, r24
     ebe:	fe 01       	movw	r30, r28
     ec0:	e7 5b       	subi	r30, 0xB7	; 183
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <main+0x382>
     ecc:	fe 01       	movw	r30, r28
     ece:	e7 5b       	subi	r30, 0xB7	; 183
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	de 01       	movw	r26, r28
     ed8:	a5 5b       	subi	r26, 0xB5	; 181
     eda:	bf 4f       	sbci	r27, 0xFF	; 255
     edc:	fe 01       	movw	r30, r28
     ede:	e5 5b       	subi	r30, 0xB5	; 181
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	9c 93       	st	X, r25
     eec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eee:	fe 01       	movw	r30, r28
     ef0:	e5 5b       	subi	r30, 0xB5	; 181
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	d1 f6       	brne	.-76     	; 0xeb0 <main+0x36a>
     efc:	27 c0       	rjmp	.+78     	; 0xf4c <main+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efe:	8e 01       	movw	r16, r28
     f00:	05 5b       	subi	r16, 0xB5	; 181
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	fe 01       	movw	r30, r28
     f06:	e3 5b       	subi	r30, 0xB3	; 179
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	f8 01       	movw	r30, r16
     f1c:	91 83       	std	Z+1, r25	; 0x01
     f1e:	80 83       	st	Z, r24
     f20:	de 01       	movw	r26, r28
     f22:	a9 5b       	subi	r26, 0xB9	; 185
     f24:	bf 4f       	sbci	r27, 0xFF	; 255
     f26:	fe 01       	movw	r30, r28
     f28:	e5 5b       	subi	r30, 0xB5	; 181
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	8d 93       	st	X+, r24
     f32:	9c 93       	st	X, r25
     f34:	fe 01       	movw	r30, r28
     f36:	e9 5b       	subi	r30, 0xB9	; 185
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <main+0x3f8>
     f42:	fe 01       	movw	r30, r28
     f44:	e9 5b       	subi	r30, 0xB9	; 185
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
				_delay_ms(2000);
				prepareToSend(a_firstPass, a_message);
     f4c:	ce 01       	movw	r24, r28
     f4e:	87 59       	subi	r24, 0x97	; 151
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	9e 01       	movw	r18, r28
     f54:	2b 58       	subi	r18, 0x8B	; 139
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	b9 01       	movw	r22, r18
     f5a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <prepareToSend>
				UART_sendByte(NEW_PASSWORD);
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
				UART_sendString(a_message);
     f64:	ce 01       	movw	r24, r28
     f66:	8b 58       	subi	r24, 0x8B	; 139
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <UART_sendString>
     f6e:	2b ce       	rjmp	.-938    	; 0xbc6 <main+0x80>

			}
			else
			{

				flag = 0;
     f70:	fe 01       	movw	r30, r28
     f72:	e8 59       	subi	r30, 0x98	; 152
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	10 82       	st	Z, r1
				LCD_clearScreen();
     f78:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "pass NOT MATCH");
     f7c:	22 eb       	ldi	r18, 0xB2	; 178
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Please ReEnter");
     f8a:	21 ec       	ldi	r18, 0xC1	; 193
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
     f98:	fe 01       	movw	r30, r28
     f9a:	ed 5b       	subi	r30, 0xBD	; 189
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	aa ef       	ldi	r26, 0xFA	; 250
     fa4:	b4 e4       	ldi	r27, 0x44	; 68
     fa6:	80 83       	st	Z, r24
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	a2 83       	std	Z+2, r26	; 0x02
     fac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	8e 01       	movw	r16, r28
     fb0:	01 5c       	subi	r16, 0xC1	; 193
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	fe 01       	movw	r30, r28
     fb6:	ed 5b       	subi	r30, 0xBD	; 189
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	60 81       	ld	r22, Z
     fbc:	71 81       	ldd	r23, Z+1	; 0x01
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	93 81       	ldd	r25, Z+3	; 0x03
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4a ef       	ldi	r20, 0xFA	; 250
     fc8:	54 e4       	ldi	r21, 0x44	; 68
     fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	f8 01       	movw	r30, r16
     fd4:	80 83       	st	Z, r24
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	a2 83       	std	Z+2, r26	; 0x02
     fda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fdc:	fe 01       	movw	r30, r28
     fde:	ff 96       	adiw	r30, 0x3f	; 63
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e8       	ldi	r20, 0x80	; 128
     fee:	5f e3       	ldi	r21, 0x3F	; 63
     ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff4:	88 23       	and	r24, r24
     ff6:	2c f4       	brge	.+10     	; 0x1002 <main+0x4bc>
		__ticks = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9e af       	std	Y+62, r25	; 0x3e
     ffe:	8d af       	std	Y+61, r24	; 0x3d
    1000:	46 c0       	rjmp	.+140    	; 0x108e <main+0x548>
	else if (__tmp > 65535)
    1002:	fe 01       	movw	r30, r28
    1004:	ff 96       	adiw	r30, 0x3f	; 63
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	64 f5       	brge	.+88     	; 0x1076 <main+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	fe 01       	movw	r30, r28
    1020:	ed 5b       	subi	r30, 0xBD	; 189
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9e af       	std	Y+62, r25	; 0x3e
    104a:	8d af       	std	Y+61, r24	; 0x3d
    104c:	0f c0       	rjmp	.+30     	; 0x106c <main+0x526>
    104e:	88 ec       	ldi	r24, 0xC8	; 200
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9c af       	std	Y+60, r25	; 0x3c
    1054:	8b af       	std	Y+59, r24	; 0x3b
    1056:	8b ad       	ldd	r24, Y+59	; 0x3b
    1058:	9c ad       	ldd	r25, Y+60	; 0x3c
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <main+0x514>
    105e:	9c af       	std	Y+60, r25	; 0x3c
    1060:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1062:	8d ad       	ldd	r24, Y+61	; 0x3d
    1064:	9e ad       	ldd	r25, Y+62	; 0x3e
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9e af       	std	Y+62, r25	; 0x3e
    106a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106c:	8d ad       	ldd	r24, Y+61	; 0x3d
    106e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	69 f7       	brne	.-38     	; 0x104e <main+0x508>
    1074:	a8 cd       	rjmp	.-1200   	; 0xbc6 <main+0x80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1076:	fe 01       	movw	r30, r28
    1078:	ff 96       	adiw	r30, 0x3f	; 63
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e af       	std	Y+62, r25	; 0x3e
    108c:	8d af       	std	Y+61, r24	; 0x3d
    108e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1090:	9e ad       	ldd	r25, Y+62	; 0x3e
    1092:	9a af       	std	Y+58, r25	; 0x3a
    1094:	89 af       	std	Y+57, r24	; 0x39
    1096:	89 ad       	ldd	r24, Y+57	; 0x39
    1098:	9a ad       	ldd	r25, Y+58	; 0x3a
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <main+0x554>
    109e:	9a af       	std	Y+58, r25	; 0x3a
    10a0:	89 af       	std	Y+57, r24	; 0x39
    10a2:	91 cd       	rjmp	.-1246   	; 0xbc6 <main+0x80>
				_delay_ms(2000);

			}

		}
		else if (flag == 1)
    10a4:	fe 01       	movw	r30, r28
    10a6:	e8 59       	subi	r30, 0x98	; 152
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	80 81       	ld	r24, Z
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <main+0x56c>
    10b0:	8a cd       	rjmp	.-1260   	; 0xbc6 <main+0x80>
		{

			if (state == 0)
    10b2:	fe 01       	movw	r30, r28
    10b4:	ec 59       	subi	r30, 0x9C	; 156
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <main+0x57a>
    10be:	6b c0       	rjmp	.+214    	; 0x1196 <main+0x650>
			{

				LCD_displayStringRowColumn(0, 0, "- : Open Door   ");
    10c0:	20 ed       	ldi	r18, 0xD0	; 208
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	a9 01       	movw	r20, r18
    10ca:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "+ : Change pass");
    10ce:	21 ee       	ldi	r18, 0xE1	; 225
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
				inputChoise = KeyPad_getPressedKey();
    10dc:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <KeyPad_getPressedKey>
    10e0:	fe 01       	movw	r30, r28
    10e2:	eb 59       	subi	r30, 0x9B	; 155
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 83       	st	Z, r24

				if (inputChoise == '+')
    10e8:	fe 01       	movw	r30, r28
    10ea:	eb 59       	subi	r30, 0x9B	; 155
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	80 81       	ld	r24, Z
    10f0:	8b 32       	cpi	r24, 0x2B	; 43
    10f2:	29 f5       	brne	.+74     	; 0x113e <main+0x5f8>
				{

					state = 1;
    10f4:	fe 01       	movw	r30, r28
    10f6:	ec 59       	subi	r30, 0x9C	; 156
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 83       	st	Z, r24

					LCD_clearScreen();
    10fe:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Current pass: ");
    1102:	21 ef       	ldi	r18, 0xF1	; 241
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	a9 01       	movw	r20, r18
    110c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					getPassword(a_firstPass);
    1110:	ce 01       	movw	r24, r28
    1112:	87 59       	subi	r24, 0x97	; 151
    1114:	9f 4f       	sbci	r25, 0xFF	; 255
    1116:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <getPassword>

					prepareToSend(a_firstPass, a_message);
    111a:	ce 01       	movw	r24, r28
    111c:	87 59       	subi	r24, 0x97	; 151
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	9e 01       	movw	r18, r28
    1122:	2b 58       	subi	r18, 0x8B	; 139
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	b9 01       	movw	r22, r18
    1128:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <prepareToSend>
					UART_sendByte(CHANGE_PASSWORD);
    112c:	8c e0       	ldi	r24, 0x0C	; 12
    112e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
					UART_sendString(a_message);
    1132:	ce 01       	movw	r24, r28
    1134:	8b 58       	subi	r24, 0x8B	; 139
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <UART_sendString>
    113c:	44 cd       	rjmp	.-1400   	; 0xbc6 <main+0x80>

				}
				else if (inputChoise == '-')
    113e:	fe 01       	movw	r30, r28
    1140:	eb 59       	subi	r30, 0x9B	; 155
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	80 81       	ld	r24, Z
    1146:	8d 32       	cpi	r24, 0x2D	; 45
    1148:	09 f0       	breq	.+2      	; 0x114c <main+0x606>
    114a:	3d cd       	rjmp	.-1414   	; 0xbc6 <main+0x80>
				{

					state = 1;
    114c:	fe 01       	movw	r30, r28
    114e:	ec 59       	subi	r30, 0x9C	; 156
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 83       	st	Z, r24

					LCD_clearScreen();
    1156:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Enter pass: ");
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	31 e0       	ldi	r19, 0x01	; 1
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					getPassword(a_firstPass);
    1168:	ce 01       	movw	r24, r28
    116a:	87 59       	subi	r24, 0x97	; 151
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <getPassword>

					prepareToSend(a_firstPass, a_message);
    1172:	ce 01       	movw	r24, r28
    1174:	87 59       	subi	r24, 0x97	; 151
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	9e 01       	movw	r18, r28
    117a:	2b 58       	subi	r18, 0x8B	; 139
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <prepareToSend>
					UART_sendByte(OPEN_DOOR);
    1184:	8d e0       	ldi	r24, 0x0D	; 13
    1186:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
					UART_sendString(a_message);
    118a:	ce 01       	movw	r24, r28
    118c:	8b 58       	subi	r24, 0x8B	; 139
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <UART_sendString>
    1194:	18 cd       	rjmp	.-1488   	; 0xbc6 <main+0x80>

				}

			}
			else if (state == 1)
    1196:	fe 01       	movw	r30, r28
    1198:	ec 59       	subi	r30, 0x9C	; 156
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	80 81       	ld	r24, Z
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <main+0x65e>
    11a2:	11 cd       	rjmp	.-1502   	; 0xbc6 <main+0x80>
			{

				if (g_choice == 1)
    11a4:	80 91 c2 01 	lds	r24, 0x01C2
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	49 f5       	brne	.+82     	; 0x11fe <main+0x6b8>
				{

					g_choice = 0;
    11ac:	10 92 c2 01 	sts	0x01C2, r1

					LCD_clearScreen();
    11b0:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Door Is Opening");
    11b4:	2d e0       	ldi	r18, 0x0D	; 13
    11b6:	31 e0       	ldi	r19, 0x01	; 1
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					timer0_init_normal_mode();
    11c2:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <timer0_init_normal_mode>
					while (second < 6)
    11c6:	80 91 c3 01 	lds	r24, 0x01C3
    11ca:	86 30       	cpi	r24, 0x06	; 6
    11cc:	e0 f3       	brcs	.-8      	; 0x11c6 <main+0x680>
						;
					second = 0;
    11ce:	10 92 c3 01 	sts	0x01C3, r1
					LCD_clearScreen();
    11d2:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Door Is Closing");
    11d6:	2d e1       	ldi	r18, 0x1D	; 29
    11d8:	31 e0       	ldi	r19, 0x01	; 1
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					timer0_init_normal_mode();
    11e4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <timer0_init_normal_mode>
					while (second < 6)
    11e8:	80 91 c3 01 	lds	r24, 0x01C3
    11ec:	86 30       	cpi	r24, 0x06	; 6
    11ee:	e0 f3       	brcs	.-8      	; 0x11e8 <main+0x6a2>
						;
					second = 0;
    11f0:	10 92 c3 01 	sts	0x01C3, r1
					state = 0;
    11f4:	fe 01       	movw	r30, r28
    11f6:	ec 59       	subi	r30, 0x9C	; 156
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	10 82       	st	Z, r1
    11fc:	e4 cc       	rjmp	.-1592   	; 0xbc6 <main+0x80>

				}
				else if (g_choice == 2)
    11fe:	80 91 c2 01 	lds	r24, 0x01C2
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	09 f0       	breq	.+2      	; 0x1208 <main+0x6c2>
    1206:	ab c0       	rjmp	.+342    	; 0x135e <main+0x818>
				{

					g_choice = 0;
    1208:	10 92 c2 01 	sts	0x01C2, r1

					wrong_Counter++;
    120c:	de 01       	movw	r26, r28
    120e:	ad 59       	subi	r26, 0x9D	; 157
    1210:	bf 4f       	sbci	r27, 0xFF	; 255
    1212:	fe 01       	movw	r30, r28
    1214:	ed 59       	subi	r30, 0x9D	; 157
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 81       	ld	r24, Z
    121a:	8f 5f       	subi	r24, 0xFF	; 255
    121c:	8c 93       	st	X, r24
					if (wrong_Counter == 3)
    121e:	fe 01       	movw	r30, r28
    1220:	ed 59       	subi	r30, 0x9D	; 157
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	80 81       	ld	r24, Z
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	d1 f4       	brne	.+52     	; 0x125e <main+0x718>
					{
						LCD_clearScreen();
    122a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "     ERROR      ");
    122e:	2d e2       	ldi	r18, 0x2D	; 45
    1230:	31 e0       	ldi	r19, 0x01	; 1
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
						timer0_init_normal_mode();
    123c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <timer0_init_normal_mode>
						while (second != 45)
    1240:	80 91 c3 01 	lds	r24, 0x01C3
    1244:	8d 32       	cpi	r24, 0x2D	; 45
    1246:	e1 f7       	brne	.-8      	; 0x1240 <main+0x6fa>
							;
						second = 0;
    1248:	10 92 c3 01 	sts	0x01C3, r1
						wrong_Counter = 0;
    124c:	fe 01       	movw	r30, r28
    124e:	ed 59       	subi	r30, 0x9D	; 157
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	10 82       	st	Z, r1
						state = 0;
    1254:	fe 01       	movw	r30, r28
    1256:	ec 59       	subi	r30, 0x9C	; 156
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	10 82       	st	Z, r1
    125c:	b4 cc       	rjmp	.-1688   	; 0xbc6 <main+0x80>
						continue;
					}

					LCD_clearScreen();
    125e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Wrong password    ");
    1262:	2e e3       	ldi	r18, 0x3E	; 62
    1264:	31 e0       	ldi	r19, 0x01	; 1
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	aa ef       	ldi	r26, 0xFA	; 250
    1276:	b4 e4       	ldi	r27, 0x44	; 68
    1278:	8d ab       	std	Y+53, r24	; 0x35
    127a:	9e ab       	std	Y+54, r25	; 0x36
    127c:	af ab       	std	Y+55, r26	; 0x37
    127e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1280:	6d a9       	ldd	r22, Y+53	; 0x35
    1282:	7e a9       	ldd	r23, Y+54	; 0x36
    1284:	8f a9       	ldd	r24, Y+55	; 0x37
    1286:	98 ad       	ldd	r25, Y+56	; 0x38
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	4a ef       	ldi	r20, 0xFA	; 250
    128e:	54 e4       	ldi	r21, 0x44	; 68
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	89 ab       	std	Y+49, r24	; 0x31
    129a:	9a ab       	std	Y+50, r25	; 0x32
    129c:	ab ab       	std	Y+51, r26	; 0x33
    129e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12a0:	69 a9       	ldd	r22, Y+49	; 0x31
    12a2:	7a a9       	ldd	r23, Y+50	; 0x32
    12a4:	8b a9       	ldd	r24, Y+51	; 0x33
    12a6:	9c a9       	ldd	r25, Y+52	; 0x34
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e8       	ldi	r20, 0x80	; 128
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <main+0x77c>
		__ticks = 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	98 ab       	std	Y+48, r25	; 0x30
    12be:	8f a7       	std	Y+47, r24	; 0x2f
    12c0:	3f c0       	rjmp	.+126    	; 0x1340 <main+0x7fa>
	else if (__tmp > 65535)
    12c2:	69 a9       	ldd	r22, Y+49	; 0x31
    12c4:	7a a9       	ldd	r23, Y+50	; 0x32
    12c6:	8b a9       	ldd	r24, Y+51	; 0x33
    12c8:	9c a9       	ldd	r25, Y+52	; 0x34
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	57 e4       	ldi	r21, 0x47	; 71
    12d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d6:	18 16       	cp	r1, r24
    12d8:	4c f5       	brge	.+82     	; 0x132c <main+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12da:	6d a9       	ldd	r22, Y+53	; 0x35
    12dc:	7e a9       	ldd	r23, Y+54	; 0x36
    12de:	8f a9       	ldd	r24, Y+55	; 0x37
    12e0:	98 ad       	ldd	r25, Y+56	; 0x38
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e2       	ldi	r20, 0x20	; 32
    12e8:	51 e4       	ldi	r21, 0x41	; 65
    12ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	98 ab       	std	Y+48, r25	; 0x30
    1300:	8f a7       	std	Y+47, r24	; 0x2f
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <main+0x7dc>
    1304:	88 ec       	ldi	r24, 0xC8	; 200
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9e a7       	std	Y+46, r25	; 0x2e
    130a:	8d a7       	std	Y+45, r24	; 0x2d
    130c:	8d a5       	ldd	r24, Y+45	; 0x2d
    130e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <main+0x7ca>
    1314:	9e a7       	std	Y+46, r25	; 0x2e
    1316:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	8f a5       	ldd	r24, Y+47	; 0x2f
    131a:	98 a9       	ldd	r25, Y+48	; 0x30
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	98 ab       	std	Y+48, r25	; 0x30
    1320:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	8f a5       	ldd	r24, Y+47	; 0x2f
    1324:	98 a9       	ldd	r25, Y+48	; 0x30
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	69 f7       	brne	.-38     	; 0x1304 <main+0x7be>
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <main+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132c:	69 a9       	ldd	r22, Y+49	; 0x31
    132e:	7a a9       	ldd	r23, Y+50	; 0x32
    1330:	8b a9       	ldd	r24, Y+51	; 0x33
    1332:	9c a9       	ldd	r25, Y+52	; 0x34
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	98 ab       	std	Y+48, r25	; 0x30
    133e:	8f a7       	std	Y+47, r24	; 0x2f
    1340:	8f a5       	ldd	r24, Y+47	; 0x2f
    1342:	98 a9       	ldd	r25, Y+48	; 0x30
    1344:	9c a7       	std	Y+44, r25	; 0x2c
    1346:	8b a7       	std	Y+43, r24	; 0x2b
    1348:	8b a5       	ldd	r24, Y+43	; 0x2b
    134a:	9c a5       	ldd	r25, Y+44	; 0x2c
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <main+0x806>
    1350:	9c a7       	std	Y+44, r25	; 0x2c
    1352:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(2000);

					state = 0;
    1354:	fe 01       	movw	r30, r28
    1356:	ec 59       	subi	r30, 0x9C	; 156
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	10 82       	st	Z, r1
    135c:	34 cc       	rjmp	.-1944   	; 0xbc6 <main+0x80>

				}
				else if (g_choice == 3)
    135e:	80 91 c2 01 	lds	r24, 0x01C2
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	09 f0       	breq	.+2      	; 0x1368 <main+0x822>
    1366:	57 c1       	rjmp	.+686    	; 0x1616 <main+0xad0>
				{

					g_choice = 0;
    1368:	10 92 c2 01 	sts	0x01C2, r1

					LCD_displayStringRowColumn(0, 0, "New password: ");
    136c:	21 e5       	ldi	r18, 0x51	; 81
    136e:	31 e0       	ldi	r19, 0x01	; 1
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "                ");
    137a:	21 e8       	ldi	r18, 0x81	; 129
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					getPassword(a_firstPass);
    1388:	ce 01       	movw	r24, r28
    138a:	87 59       	subi	r24, 0x97	; 151
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <getPassword>

					LCD_displayStringRowColumn(0, 0, "Reenter password   ");
    1392:	20 e6       	ldi	r18, 0x60	; 96
    1394:	31 e0       	ldi	r19, 0x01	; 1
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "                ");
    13a0:	21 e8       	ldi	r18, 0x81	; 129
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					getPassword(a_secondPass);
    13ae:	ce 01       	movw	r24, r28
    13b0:	81 59       	subi	r24, 0x91	; 145
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <getPassword>

					compare = strcmp(a_firstPass, a_secondPass);
    13b8:	ce 01       	movw	r24, r28
    13ba:	87 59       	subi	r24, 0x97	; 151
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	9e 01       	movw	r18, r28
    13c0:	21 59       	subi	r18, 0x91	; 145
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	b9 01       	movw	r22, r18
    13c6:	0e 94 57 18 	call	0x30ae	; 0x30ae <strcmp>
    13ca:	fe 01       	movw	r30, r28
    13cc:	ea 59       	subi	r30, 0x9A	; 154
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 83       	st	Z, r24

					if (compare == 0)
    13d2:	fe 01       	movw	r30, r28
    13d4:	ea 59       	subi	r30, 0x9A	; 154
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	88 23       	and	r24, r24
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <main+0x89a>
    13de:	96 c0       	rjmp	.+300    	; 0x150c <main+0x9c6>
					{
						LCD_displayStringRowColumn(0, 0, "password Match   ");
    13e0:	24 e7       	ldi	r18, 0x74	; 116
    13e2:	31 e0       	ldi	r19, 0x01	; 1
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "                ");
    13ee:	21 e8       	ldi	r18, 0x81	; 129
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	aa ef       	ldi	r26, 0xFA	; 250
    1402:	b4 e4       	ldi	r27, 0x44	; 68
    1404:	8f a3       	std	Y+39, r24	; 0x27
    1406:	98 a7       	std	Y+40, r25	; 0x28
    1408:	a9 a7       	std	Y+41, r26	; 0x29
    140a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140c:	6f a1       	ldd	r22, Y+39	; 0x27
    140e:	78 a5       	ldd	r23, Y+40	; 0x28
    1410:	89 a5       	ldd	r24, Y+41	; 0x29
    1412:	9a a5       	ldd	r25, Y+42	; 0x2a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4a ef       	ldi	r20, 0xFA	; 250
    141a:	54 e4       	ldi	r21, 0x44	; 68
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8b a3       	std	Y+35, r24	; 0x23
    1426:	9c a3       	std	Y+36, r25	; 0x24
    1428:	ad a3       	std	Y+37, r26	; 0x25
    142a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    142c:	6b a1       	ldd	r22, Y+35	; 0x23
    142e:	7c a1       	ldd	r23, Y+36	; 0x24
    1430:	8d a1       	ldd	r24, Y+37	; 0x25
    1432:	9e a1       	ldd	r25, Y+38	; 0x26
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	2c f4       	brge	.+10     	; 0x144e <main+0x908>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9a a3       	std	Y+34, r25	; 0x22
    144a:	89 a3       	std	Y+33, r24	; 0x21
    144c:	3f c0       	rjmp	.+126    	; 0x14cc <main+0x986>
	else if (__tmp > 65535)
    144e:	6b a1       	ldd	r22, Y+35	; 0x23
    1450:	7c a1       	ldd	r23, Y+36	; 0x24
    1452:	8d a1       	ldd	r24, Y+37	; 0x25
    1454:	9e a1       	ldd	r25, Y+38	; 0x26
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	4c f5       	brge	.+82     	; 0x14b8 <main+0x972>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	6f a1       	ldd	r22, Y+39	; 0x27
    1468:	78 a5       	ldd	r23, Y+40	; 0x28
    146a:	89 a5       	ldd	r24, Y+41	; 0x29
    146c:	9a a5       	ldd	r25, Y+42	; 0x2a
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e2       	ldi	r20, 0x20	; 32
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9a a3       	std	Y+34, r25	; 0x22
    148c:	89 a3       	std	Y+33, r24	; 0x21
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <main+0x968>
    1490:	88 ec       	ldi	r24, 0xC8	; 200
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	98 a3       	std	Y+32, r25	; 0x20
    1496:	8f 8f       	std	Y+31, r24	; 0x1f
    1498:	8f 8d       	ldd	r24, Y+31	; 0x1f
    149a:	98 a1       	ldd	r25, Y+32	; 0x20
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <main+0x956>
    14a0:	98 a3       	std	Y+32, r25	; 0x20
    14a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a4:	89 a1       	ldd	r24, Y+33	; 0x21
    14a6:	9a a1       	ldd	r25, Y+34	; 0x22
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	9a a3       	std	Y+34, r25	; 0x22
    14ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	89 a1       	ldd	r24, Y+33	; 0x21
    14b0:	9a a1       	ldd	r25, Y+34	; 0x22
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	69 f7       	brne	.-38     	; 0x1490 <main+0x94a>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <main+0x99a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ba:	7c a1       	ldd	r23, Y+36	; 0x24
    14bc:	8d a1       	ldd	r24, Y+37	; 0x25
    14be:	9e a1       	ldd	r25, Y+38	; 0x26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9a a3       	std	Y+34, r25	; 0x22
    14ca:	89 a3       	std	Y+33, r24	; 0x21
    14cc:	89 a1       	ldd	r24, Y+33	; 0x21
    14ce:	9a a1       	ldd	r25, Y+34	; 0x22
    14d0:	9e 8f       	std	Y+30, r25	; 0x1e
    14d2:	8d 8f       	std	Y+29, r24	; 0x1d
    14d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <main+0x992>
    14dc:	9e 8f       	std	Y+30, r25	; 0x1e
    14de:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);

						prepareToSend(a_firstPass, a_message);
    14e0:	ce 01       	movw	r24, r28
    14e2:	87 59       	subi	r24, 0x97	; 151
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	9e 01       	movw	r18, r28
    14e8:	2b 58       	subi	r18, 0x8B	; 139
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	b9 01       	movw	r22, r18
    14ee:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <prepareToSend>
						UART_sendByte(CHANGED_PASSWORD);
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
						UART_sendString(a_message);
    14f8:	ce 01       	movw	r24, r28
    14fa:	8b 58       	subi	r24, 0x8B	; 139
    14fc:	9f 4f       	sbci	r25, 0xFF	; 255
    14fe:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <UART_sendString>

						state = 0;
    1502:	fe 01       	movw	r30, r28
    1504:	ec 59       	subi	r30, 0x9C	; 156
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	10 82       	st	Z, r1
    150a:	5d cb       	rjmp	.-2374   	; 0xbc6 <main+0x80>

					}
					else
					{

						LCD_displayStringRowColumn(0, 0, "pass NOT Match  ");
    150c:	26 e8       	ldi	r18, 0x86	; 134
    150e:	31 e0       	ldi	r19, 0x01	; 1
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "                ");
    151a:	21 e8       	ldi	r18, 0x81	; 129
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	aa ef       	ldi	r26, 0xFA	; 250
    152e:	b4 e4       	ldi	r27, 0x44	; 68
    1530:	89 8f       	std	Y+25, r24	; 0x19
    1532:	9a 8f       	std	Y+26, r25	; 0x1a
    1534:	ab 8f       	std	Y+27, r26	; 0x1b
    1536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	69 8d       	ldd	r22, Y+25	; 0x19
    153a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a ef       	ldi	r20, 0xFA	; 250
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8d 8b       	std	Y+21, r24	; 0x15
    1552:	9e 8b       	std	Y+22, r25	; 0x16
    1554:	af 8b       	std	Y+23, r26	; 0x17
    1556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1558:	6d 89       	ldd	r22, Y+21	; 0x15
    155a:	7e 89       	ldd	r23, Y+22	; 0x16
    155c:	8f 89       	ldd	r24, Y+23	; 0x17
    155e:	98 8d       	ldd	r25, Y+24	; 0x18
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <main+0xa34>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9c 8b       	std	Y+20, r25	; 0x14
    1576:	8b 8b       	std	Y+19, r24	; 0x13
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <main+0xab2>
	else if (__tmp > 65535)
    157a:	6d 89       	ldd	r22, Y+21	; 0x15
    157c:	7e 89       	ldd	r23, Y+22	; 0x16
    157e:	8f 89       	ldd	r24, Y+23	; 0x17
    1580:	98 8d       	ldd	r25, Y+24	; 0x18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <main+0xa9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	69 8d       	ldd	r22, Y+25	; 0x19
    1594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <main+0xa94>
    15bc:	88 ec       	ldi	r24, 0xC8	; 200
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9a 8b       	std	Y+18, r25	; 0x12
    15c2:	89 8b       	std	Y+17, r24	; 0x11
    15c4:	89 89       	ldd	r24, Y+17	; 0x11
    15c6:	9a 89       	ldd	r25, Y+18	; 0x12
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <main+0xa82>
    15cc:	9a 8b       	std	Y+18, r25	; 0x12
    15ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	8b 89       	ldd	r24, Y+19	; 0x13
    15d2:	9c 89       	ldd	r25, Y+20	; 0x14
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9c 8b       	std	Y+20, r25	; 0x14
    15d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <main+0xa76>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <main+0xac6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9c 8b       	std	Y+20, r25	; 0x14
    15f6:	8b 8b       	std	Y+19, r24	; 0x13
    15f8:	8b 89       	ldd	r24, Y+19	; 0x13
    15fa:	9c 89       	ldd	r25, Y+20	; 0x14
    15fc:	98 8b       	std	Y+16, r25	; 0x10
    15fe:	8f 87       	std	Y+15, r24	; 0x0f
    1600:	8f 85       	ldd	r24, Y+15	; 0x0f
    1602:	98 89       	ldd	r25, Y+16	; 0x10
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <main+0xabe>
    1608:	98 8b       	std	Y+16, r25	; 0x10
    160a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(2000);

						state = 0;
    160c:	fe 01       	movw	r30, r28
    160e:	ec 59       	subi	r30, 0x9C	; 156
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	10 82       	st	Z, r1
    1614:	d8 ca       	rjmp	.-2640   	; 0xbc6 <main+0x80>
					}

				}
				else if (g_choice == 4)
    1616:	80 91 c2 01 	lds	r24, 0x01C2
    161a:	84 30       	cpi	r24, 0x04	; 4
    161c:	09 f0       	breq	.+2      	; 0x1620 <main+0xada>
    161e:	d3 ca       	rjmp	.-2650   	; 0xbc6 <main+0x80>
				{

					g_choice = 0;
    1620:	10 92 c2 01 	sts	0x01C2, r1

					LCD_displayStringRowColumn(0, 0, "Wrong password  ");
    1624:	27 e9       	ldi	r18, 0x97	; 151
    1626:	31 e0       	ldi	r19, 0x01	; 1
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "                ");
    1632:	21 e8       	ldi	r18, 0x81	; 129
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	aa ef       	ldi	r26, 0xFA	; 250
    1646:	b4 e4       	ldi	r27, 0x44	; 68
    1648:	8b 87       	std	Y+11, r24	; 0x0b
    164a:	9c 87       	std	Y+12, r25	; 0x0c
    164c:	ad 87       	std	Y+13, r26	; 0x0d
    164e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1650:	6b 85       	ldd	r22, Y+11	; 0x0b
    1652:	7c 85       	ldd	r23, Y+12	; 0x0c
    1654:	8d 85       	ldd	r24, Y+13	; 0x0d
    1656:	9e 85       	ldd	r25, Y+14	; 0x0e
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a ef       	ldi	r20, 0xFA	; 250
    165e:	54 e4       	ldi	r21, 0x44	; 68
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8f 83       	std	Y+7, r24	; 0x07
    166a:	98 87       	std	Y+8, r25	; 0x08
    166c:	a9 87       	std	Y+9, r26	; 0x09
    166e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <main+0xb4c>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <main+0xbca>
	else if (__tmp > 65535)
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <main+0xbb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <main+0xbac>
    16d4:	88 ec       	ldi	r24, 0xC8	; 200
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <main+0xb9a>
    16e4:	9c 83       	std	Y+4, r25	; 0x04
    16e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <main+0xb8e>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <main+0xbde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9e 83       	std	Y+6, r25	; 0x06
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <main+0xbd6>
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);

					state = 0;
    1724:	fe 01       	movw	r30, r28
    1726:	ec 59       	subi	r30, 0x9C	; 156
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	10 82       	st	Z, r1
    172c:	4c ca       	rjmp	.-2920   	; 0xbc6 <main+0x80>

0000172e <eepromWriteByte>:
 ---------------------------------------------------------------------------------------------------*/

#include "IntEEPROM.h"

void eepromWriteByte(unsigned short a_addr, unsigned char a_data)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <eepromWriteByte+0x6>
    1734:	0f 92       	push	r0
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write */
	while (EECR & (1 << EEWE))
    1740:	ec e3       	ldi	r30, 0x3C	; 60
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	82 70       	andi	r24, 0x02	; 2
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	b9 f7       	brne	.-18     	; 0x1740 <eepromWriteByte+0x12>
		;
	/* Set up address and data registers */
	EEAR = a_addr;
    1752:	ee e3       	ldi	r30, 0x3E	; 62
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
	EEDR = a_data;
    175e:	ed e3       	ldi	r30, 0x3D	; 61
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
    1766:	ac e3       	ldi	r26, 0x3C	; 60
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ec e3       	ldi	r30, 0x3C	; 60
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	84 60       	ori	r24, 0x04	; 4
    1772:	8c 93       	st	X, r24
	/* Start EEPROM write by setting EEWE */
	EECR |= (1 << EEWE);
    1774:	ac e3       	ldi	r26, 0x3C	; 60
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ec e3       	ldi	r30, 0x3C	; 60
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	82 60       	ori	r24, 0x02	; 2
    1780:	8c 93       	st	X, r24
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <eepromReadByte>:

unsigned char eepromReadByte(unsigned short a_addr)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <eepromReadByte+0x6>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while (EECR & (1 << EEWE))
    179c:	ec e3       	ldi	r30, 0x3C	; 60
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	82 70       	andi	r24, 0x02	; 2
    17a8:	90 70       	andi	r25, 0x00	; 0
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	b9 f7       	brne	.-18     	; 0x179c <eepromReadByte+0xe>
		;
	/* Set up address register */
	EEAR = a_addr;
    17ae:	ee e3       	ldi	r30, 0x3E	; 62
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    17ba:	ac e3       	ldi	r26, 0x3C	; 60
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	ec e3       	ldi	r30, 0x3C	; 60
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    17c8:	ed e3       	ldi	r30, 0x3D	; 61
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <KeyPad_getPressedKey>:
 *  Author: Mohamed Tarek
 */

#include "keypad.h"

uint8 KeyPad_getPressedKey(void){
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <KeyPad_getPressedKey+0x6>
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    17e2:	1a 82       	std	Y+2, r1	; 0x02
    17e4:	4c c0       	rjmp	.+152    	; 0x187e <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    17e6:	e4 e3       	ldi	r30, 0x34	; 52
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	80 e1       	ldi	r24, 0x10	; 16
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <KeyPad_getPressedKey+0x22>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	2a 95       	dec	r18
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <KeyPad_getPressedKey+0x1e>
    17fe:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1800:	e5 e3       	ldi	r30, 0x35	; 53
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	80 e1       	ldi	r24, 0x10	; 16
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <KeyPad_getPressedKey+0x3e>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <KeyPad_getPressedKey+0x3a>
    181a:	80 95       	com	r24
    181c:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	28 c0       	rjmp	.+80     	; 0x1872 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1822:	e3 e3       	ldi	r30, 0x33	; 51
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <KeyPad_getPressedKey+0x62>
    1836:	55 95       	asr	r21
    1838:	47 95       	ror	r20
    183a:	8a 95       	dec	r24
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <KeyPad_getPressedKey+0x5e>
    183e:	ca 01       	movw	r24, r20
    1840:	81 70       	andi	r24, 0x01	; 1
    1842:	90 70       	andi	r25, 0x00	; 0
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	91 f4       	brne	.+36     	; 0x186c <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	98 2f       	mov	r25, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	89 0f       	add	r24, r25
    185c:	8f 5f       	subi	r24, 0xFF	; 255
    185e:	0e 94 44 0c 	call	0x1888	; 0x1888 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	8f 5f       	subi	r24, 0xFF	; 255
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	84 30       	cpi	r24, 0x04	; 4
    1876:	a8 f2       	brcs	.-86     	; 0x1822 <KeyPad_getPressedKey+0x4a>

uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	08 f4       	brcc	.+2      	; 0x1886 <KeyPad_getPressedKey+0xae>
    1884:	b0 cf       	rjmp	.-160    	; 0x17e6 <KeyPad_getPressedKey+0xe>
    1886:	ad cf       	rjmp	.-166    	; 0x17e2 <KeyPad_getPressedKey+0xa>

00001888 <KeyPad_4x4_adjustKeyNumber>:


#elif (N_col == 4)
 
uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <KeyPad_4x4_adjustKeyNumber+0x6>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <KeyPad_4x4_adjustKeyNumber+0x8>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3c 83       	std	Y+4, r19	; 0x04
    189e:	2b 83       	std	Y+3, r18	; 0x03
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	88 30       	cpi	r24, 0x08	; 8
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <KeyPad_4x4_adjustKeyNumber+0x24>
    18aa:	70 c0       	rjmp	.+224    	; 0x198c <KeyPad_4x4_adjustKeyNumber+0x104>
    18ac:	2b 81       	ldd	r18, Y+3	; 0x03
    18ae:	3c 81       	ldd	r19, Y+4	; 0x04
    18b0:	29 30       	cpi	r18, 0x09	; 9
    18b2:	31 05       	cpc	r19, r1
    18b4:	5c f5       	brge	.+86     	; 0x190c <KeyPad_4x4_adjustKeyNumber+0x84>
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <KeyPad_4x4_adjustKeyNumber+0x3a>
    18c0:	59 c0       	rjmp	.+178    	; 0x1974 <KeyPad_4x4_adjustKeyNumber+0xec>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	25 30       	cpi	r18, 0x05	; 5
    18c8:	31 05       	cpc	r19, r1
    18ca:	9c f4       	brge	.+38     	; 0x18f2 <KeyPad_4x4_adjustKeyNumber+0x6a>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	91 05       	cpc	r25, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <KeyPad_4x4_adjustKeyNumber+0x50>
    18d6:	48 c0       	rjmp	.+144    	; 0x1968 <KeyPad_4x4_adjustKeyNumber+0xe0>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	23 30       	cpi	r18, 0x03	; 3
    18de:	31 05       	cpc	r19, r1
    18e0:	0c f0       	brlt	.+2      	; 0x18e4 <KeyPad_4x4_adjustKeyNumber+0x5c>
    18e2:	45 c0       	rjmp	.+138    	; 0x196e <KeyPad_4x4_adjustKeyNumber+0xe6>
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <KeyPad_4x4_adjustKeyNumber+0x68>
    18ee:	39 c0       	rjmp	.+114    	; 0x1962 <KeyPad_4x4_adjustKeyNumber+0xda>
    18f0:	67 c0       	rjmp	.+206    	; 0x19c0 <KeyPad_4x4_adjustKeyNumber+0x138>
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	26 30       	cpi	r18, 0x06	; 6
    18f8:	31 05       	cpc	r19, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <KeyPad_4x4_adjustKeyNumber+0x76>
    18fc:	41 c0       	rjmp	.+130    	; 0x1980 <KeyPad_4x4_adjustKeyNumber+0xf8>
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	87 30       	cpi	r24, 0x07	; 7
    1904:	91 05       	cpc	r25, r1
    1906:	0c f0       	brlt	.+2      	; 0x190a <KeyPad_4x4_adjustKeyNumber+0x82>
    1908:	3e c0       	rjmp	.+124    	; 0x1986 <KeyPad_4x4_adjustKeyNumber+0xfe>
    190a:	37 c0       	rjmp	.+110    	; 0x197a <KeyPad_4x4_adjustKeyNumber+0xf2>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	2c 30       	cpi	r18, 0x0C	; 12
    1912:	31 05       	cpc	r19, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <KeyPad_4x4_adjustKeyNumber+0x90>
    1916:	46 c0       	rjmp	.+140    	; 0x19a4 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	8d 30       	cpi	r24, 0x0D	; 13
    191e:	91 05       	cpc	r25, r1
    1920:	5c f4       	brge	.+22     	; 0x1938 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1922:	2b 81       	ldd	r18, Y+3	; 0x03
    1924:	3c 81       	ldd	r19, Y+4	; 0x04
    1926:	2a 30       	cpi	r18, 0x0A	; 10
    1928:	31 05       	cpc	r19, r1
    192a:	b1 f1       	breq	.+108    	; 0x1998 <KeyPad_4x4_adjustKeyNumber+0x110>
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	8b 30       	cpi	r24, 0x0B	; 11
    1932:	91 05       	cpc	r25, r1
    1934:	a4 f5       	brge	.+104    	; 0x199e <KeyPad_4x4_adjustKeyNumber+0x116>
    1936:	2d c0       	rjmp	.+90     	; 0x1992 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	2e 30       	cpi	r18, 0x0E	; 14
    193e:	31 05       	cpc	r19, r1
    1940:	b9 f1       	breq	.+110    	; 0x19b0 <KeyPad_4x4_adjustKeyNumber+0x128>
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	8e 30       	cpi	r24, 0x0E	; 14
    1948:	91 05       	cpc	r25, r1
    194a:	7c f1       	brlt	.+94     	; 0x19aa <KeyPad_4x4_adjustKeyNumber+0x122>
    194c:	2b 81       	ldd	r18, Y+3	; 0x03
    194e:	3c 81       	ldd	r19, Y+4	; 0x04
    1950:	2f 30       	cpi	r18, 0x0F	; 15
    1952:	31 05       	cpc	r19, r1
    1954:	79 f1       	breq	.+94     	; 0x19b4 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	80 31       	cpi	r24, 0x10	; 16
    195c:	91 05       	cpc	r25, r1
    195e:	69 f1       	breq	.+90     	; 0x19ba <KeyPad_4x4_adjustKeyNumber+0x132>
    1960:	2f c0       	rjmp	.+94     	; 0x19c0 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1962:	97 e0       	ldi	r25, 0x07	; 7
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	2e c0       	rjmp	.+92     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1968:	28 e0       	ldi	r18, 0x08	; 8
    196a:	2a 83       	std	Y+2, r18	; 0x02
    196c:	2b c0       	rjmp	.+86     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    196e:	39 e0       	ldi	r19, 0x09	; 9
    1970:	3a 83       	std	Y+2, r19	; 0x02
    1972:	28 c0       	rjmp	.+80     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1974:	85 e2       	ldi	r24, 0x25	; 37
    1976:	8a 83       	std	Y+2, r24	; 0x02
    1978:	25 c0       	rjmp	.+74     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    197a:	94 e0       	ldi	r25, 0x04	; 4
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	22 c0       	rjmp	.+68     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1980:	25 e0       	ldi	r18, 0x05	; 5
    1982:	2a 83       	std	Y+2, r18	; 0x02
    1984:	1f c0       	rjmp	.+62     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1986:	36 e0       	ldi	r19, 0x06	; 6
    1988:	3a 83       	std	Y+2, r19	; 0x02
    198a:	1c c0       	rjmp	.+56     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    198c:	8a e2       	ldi	r24, 0x2A	; 42
    198e:	8a 83       	std	Y+2, r24	; 0x02
    1990:	19 c0       	rjmp	.+50     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	16 c0       	rjmp	.+44     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1998:	22 e0       	ldi	r18, 0x02	; 2
    199a:	2a 83       	std	Y+2, r18	; 0x02
    199c:	13 c0       	rjmp	.+38     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    199e:	33 e0       	ldi	r19, 0x03	; 3
    19a0:	3a 83       	std	Y+2, r19	; 0x02
    19a2:	10 c0       	rjmp	.+32     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    19a4:	8d e2       	ldi	r24, 0x2D	; 45
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    19a8:	0d c0       	rjmp	.+26     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    19aa:	9d e0       	ldi	r25, 0x0D	; 13
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	0a c0       	rjmp	.+20     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    19b0:	1a 82       	std	Y+2, r1	; 0x02
    19b2:	08 c0       	rjmp	.+16     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    19b4:	2d e3       	ldi	r18, 0x3D	; 61
    19b6:	2a 83       	std	Y+2, r18	; 0x02
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    19ba:	3b e2       	ldi	r19, 0x2B	; 43
    19bc:	3a 83       	std	Y+2, r19	; 0x02
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <LCD_init>:
 */

#include "lcd.h"

void LCD_init(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    19dc:	a7 e3       	ldi	r26, 0x37	; 55
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e7 e3       	ldi	r30, 0x37	; 55
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	87 60       	ori	r24, 0x07	; 7
    19e8:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    19ea:	aa e3       	ldi	r26, 0x3A	; 58
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	ea e3       	ldi	r30, 0x3A	; 58
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	80 6f       	ori	r24, 0xF0	; 240
    19f6:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    19fe:	88 e2       	ldi	r24, 0x28	; 40
    1a00:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1a04:	8c e0       	ldi	r24, 0x0C	; 12
    1a06:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_sendCommand>
}
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	c3 56       	subi	r28, 0x63	; 99
    1a24:	d0 40       	sbci	r29, 0x00	; 0
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	fe 01       	movw	r30, r28
    1a32:	ed 59       	subi	r30, 0x9D	; 157
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1a38:	a8 e3       	ldi	r26, 0x38	; 56
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e8 e3       	ldi	r30, 0x38	; 56
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8b 7f       	andi	r24, 0xFB	; 251
    1a44:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8d 7f       	andi	r24, 0xFD	; 253
    1a52:	8c 93       	st	X, r24
    1a54:	fe 01       	movw	r30, r28
    1a56:	e1 5a       	subi	r30, 0xA1	; 161
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e8       	ldi	r26, 0x80	; 128
    1a60:	bf e3       	ldi	r27, 0x3F	; 63
    1a62:	80 83       	st	Z, r24
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	a2 83       	std	Z+2, r26	; 0x02
    1a68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	05 5a       	subi	r16, 0xA5	; 165
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	fe 01       	movw	r30, r28
    1a72:	e1 5a       	subi	r30, 0xA1	; 161
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	f8 01       	movw	r30, r16
    1a90:	80 83       	st	Z, r24
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e5 5a       	subi	r30, 0xA5	; 165
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	44 f4       	brge	.+16     	; 0x1ac6 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5a       	subi	r30, 0xA7	; 167
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	64 c0       	rjmp	.+200    	; 0x1b8e <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e5 5a       	subi	r30, 0xA5	; 165
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	0c f0       	brlt	.+2      	; 0x1ae6 <LCD_sendCommand+0xd0>
    1ae4:	43 c0       	rjmp	.+134    	; 0x1b6c <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e1 5a       	subi	r30, 0xA1	; 161
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8e 01       	movw	r16, r28
    1b06:	07 5a       	subi	r16, 0xA7	; 167
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	f8 01       	movw	r30, r16
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	1f c0       	rjmp	.+62     	; 0x1b5c <LCD_sendCommand+0x146>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e9 5a       	subi	r30, 0xA9	; 169
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	88 ec       	ldi	r24, 0xC8	; 200
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e9 5a       	subi	r30, 0xA9	; 169
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_sendCommand+0x120>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e9 5a       	subi	r30, 0xA9	; 169
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	de 01       	movw	r26, r28
    1b46:	a7 5a       	subi	r26, 0xA7	; 167
    1b48:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e7 5a       	subi	r30, 0xA7	; 167
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	11 96       	adiw	r26, 0x01	; 1
    1b58:	9c 93       	st	X, r25
    1b5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e7 5a       	subi	r30, 0xA7	; 167
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	d1 f6       	brne	.-76     	; 0x1b1e <LCD_sendCommand+0x108>
    1b6a:	27 c0       	rjmp	.+78     	; 0x1bba <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	07 5a       	subi	r16, 0xA7	; 167
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	e5 5a       	subi	r30, 0xA5	; 165
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
    1b8e:	de 01       	movw	r26, r28
    1b90:	ab 5a       	subi	r26, 0xAB	; 171
    1b92:	bf 4f       	sbci	r27, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	e7 5a       	subi	r30, 0xA7	; 167
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	8d 93       	st	X+, r24
    1ba0:	9c 93       	st	X, r25
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	eb 5a       	subi	r30, 0xAB	; 171
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_sendCommand+0x196>
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	eb 5a       	subi	r30, 0xAB	; 171
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bba:	a8 e3       	ldi	r26, 0x38	; 56
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e8 e3       	ldi	r30, 0x38	; 56
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	81 60       	ori	r24, 0x01	; 1
    1bc6:	8c 93       	st	X, r24
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ef 5a       	subi	r30, 0xAF	; 175
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e8       	ldi	r26, 0x80	; 128
    1bd4:	bf e3       	ldi	r27, 0x3F	; 63
    1bd6:	80 83       	st	Z, r24
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	a2 83       	std	Z+2, r26	; 0x02
    1bdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bde:	8e 01       	movw	r16, r28
    1be0:	03 5b       	subi	r16, 0xB3	; 179
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	fe 01       	movw	r30, r28
    1be6:	ef 5a       	subi	r30, 0xAF	; 175
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a ef       	ldi	r20, 0xFA	; 250
    1bf8:	54 e4       	ldi	r21, 0x44	; 68
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	f8 01       	movw	r30, r16
    1c04:	80 83       	st	Z, r24
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	a2 83       	std	Z+2, r26	; 0x02
    1c0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e3 5b       	subi	r30, 0xB3	; 179
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	44 f4       	brge	.+16     	; 0x1c3a <LCD_sendCommand+0x224>
		__ticks = 1;
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e5 5b       	subi	r30, 0xB5	; 181
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	80 83       	st	Z, r24
    1c38:	64 c0       	rjmp	.+200    	; 0x1d02 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e3 5b       	subi	r30, 0xB3	; 179
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	0c f0       	brlt	.+2      	; 0x1c5a <LCD_sendCommand+0x244>
    1c58:	43 c0       	rjmp	.+134    	; 0x1ce0 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ef 5a       	subi	r30, 0xAF	; 175
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8e 01       	movw	r16, r28
    1c7a:	05 5b       	subi	r16, 0xB5	; 181
    1c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    1c90:	1f c0       	rjmp	.+62     	; 0x1cd0 <LCD_sendCommand+0x2ba>
    1c92:	fe 01       	movw	r30, r28
    1c94:	e7 5b       	subi	r30, 0xB7	; 183
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e7 5b       	subi	r30, 0xB7	; 183
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_sendCommand+0x294>
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e7 5b       	subi	r30, 0xB7	; 183
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	de 01       	movw	r26, r28
    1cba:	a5 5b       	subi	r26, 0xB5	; 181
    1cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e5 5b       	subi	r30, 0xB5	; 181
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	11 96       	adiw	r26, 0x01	; 1
    1ccc:	9c 93       	st	X, r25
    1cce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e5 5b       	subi	r30, 0xB5	; 181
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	d1 f6       	brne	.-76     	; 0x1c92 <LCD_sendCommand+0x27c>
    1cde:	27 c0       	rjmp	.+78     	; 0x1d2e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	05 5b       	subi	r16, 0xB5	; 181
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e3 5b       	subi	r30, 0xB3	; 179
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	80 83       	st	Z, r24
    1d02:	de 01       	movw	r26, r28
    1d04:	a9 5b       	subi	r26, 0xB9	; 185
    1d06:	bf 4f       	sbci	r27, 0xFF	; 255
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e5 5b       	subi	r30, 0xB5	; 181
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	8d 93       	st	X+, r24
    1d14:	9c 93       	st	X, r25
    1d16:	fe 01       	movw	r30, r28
    1d18:	e9 5b       	subi	r30, 0xB9	; 185
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_sendCommand+0x30a>
    1d24:	fe 01       	movw	r30, r28
    1d26:	e9 5b       	subi	r30, 0xB9	; 185
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command & 0xF0); 
    1d2e:	ab e3       	ldi	r26, 0x3B	; 59
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 59       	subi	r30, 0x9D	; 157
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 7f       	andi	r24, 0xF0	; 240
    1d3c:	8c 93       	st	X, r24
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ed 5b       	subi	r30, 0xBD	; 189
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	8e 01       	movw	r16, r28
    1d56:	01 5c       	subi	r16, 0xC1	; 193
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	ed 5b       	subi	r30, 0xBD	; 189
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	f8 01       	movw	r30, r16
    1d7a:	80 83       	st	Z, r24
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	a2 83       	std	Z+2, r26	; 0x02
    1d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d82:	fe 01       	movw	r30, r28
    1d84:	ff 96       	adiw	r30, 0x3f	; 63
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <LCD_sendCommand+0x392>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9e af       	std	Y+62, r25	; 0x3e
    1da4:	8d af       	std	Y+61, r24	; 0x3d
    1da6:	46 c0       	rjmp	.+140    	; 0x1e34 <LCD_sendCommand+0x41e>
	else if (__tmp > 65535)
    1da8:	fe 01       	movw	r30, r28
    1daa:	ff 96       	adiw	r30, 0x3f	; 63
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	64 f5       	brge	.+88     	; 0x1e1c <LCD_sendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ed 5b       	subi	r30, 0xBD	; 189
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9e af       	std	Y+62, r25	; 0x3e
    1df0:	8d af       	std	Y+61, r24	; 0x3d
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <LCD_sendCommand+0x3fc>
    1df4:	88 ec       	ldi	r24, 0xC8	; 200
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9c af       	std	Y+60, r25	; 0x3c
    1dfa:	8b af       	std	Y+59, r24	; 0x3b
    1dfc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dfe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_sendCommand+0x3ea>
    1e04:	9c af       	std	Y+60, r25	; 0x3c
    1e06:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	9e af       	std	Y+62, r25	; 0x3e
    1e10:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <LCD_sendCommand+0x3de>
    1e1a:	16 c0       	rjmp	.+44     	; 0x1e48 <LCD_sendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ff 96       	adiw	r30, 0x3f	; 63
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
    1e34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e38:	9a af       	std	Y+58, r25	; 0x3a
    1e3a:	89 af       	std	Y+57, r24	; 0x39
    1e3c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_sendCommand+0x42a>
    1e44:	9a af       	std	Y+58, r25	; 0x3a
    1e46:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((command >> 4) & 0x0F);
		#endif
			
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e48:	a8 e3       	ldi	r26, 0x38	; 56
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e8 e3       	ldi	r30, 0x38	; 56
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8e 7f       	andi	r24, 0xFE	; 254
    1e54:	8c 93       	st	X, r24
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	8d ab       	std	Y+53, r24	; 0x35
    1e60:	9e ab       	std	Y+54, r25	; 0x36
    1e62:	af ab       	std	Y+55, r26	; 0x37
    1e64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6d a9       	ldd	r22, Y+53	; 0x35
    1e68:	7e a9       	ldd	r23, Y+54	; 0x36
    1e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a ef       	ldi	r20, 0xFA	; 250
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	89 ab       	std	Y+49, r24	; 0x31
    1e80:	9a ab       	std	Y+50, r25	; 0x32
    1e82:	ab ab       	std	Y+51, r26	; 0x33
    1e84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e86:	69 a9       	ldd	r22, Y+49	; 0x31
    1e88:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_sendCommand+0x492>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	98 ab       	std	Y+48, r25	; 0x30
    1ea4:	8f a7       	std	Y+47, r24	; 0x2f
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_sendCommand+0x510>
	else if (__tmp > 65535)
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_sendCommand+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	98 ab       	std	Y+48, r25	; 0x30
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_sendCommand+0x4f2>
    1eea:	88 ec       	ldi	r24, 0xC8	; 200
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e a7       	std	Y+46, r25	; 0x2e
    1ef0:	8d a7       	std	Y+45, r24	; 0x2d
    1ef2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_sendCommand+0x4e0>
    1efa:	9e a7       	std	Y+46, r25	; 0x2e
    1efc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_sendCommand+0x4d4>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_sendCommand+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	69 a9       	ldd	r22, Y+49	; 0x31
    1f14:	7a a9       	ldd	r23, Y+50	; 0x32
    1f16:	8b a9       	ldd	r24, Y+51	; 0x33
    1f18:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
    1f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f28:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2a:	9c a7       	std	Y+44, r25	; 0x2c
    1f2c:	8b a7       	std	Y+43, r24	; 0x2b
    1f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_sendCommand+0x51c>
    1f36:	9c a7       	std	Y+44, r25	; 0x2c
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f3a:	a8 e3       	ldi	r26, 0x38	; 56
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e8 e3       	ldi	r30, 0x38	; 56
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	81 60       	ori	r24, 0x01	; 1
    1f46:	8c 93       	st	X, r24
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a0 e8       	ldi	r26, 0x80	; 128
    1f4e:	bf e3       	ldi	r27, 0x3F	; 63
    1f50:	8f a3       	std	Y+39, r24	; 0x27
    1f52:	98 a7       	std	Y+40, r25	; 0x28
    1f54:	a9 a7       	std	Y+41, r26	; 0x29
    1f56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a ef       	ldi	r20, 0xFA	; 250
    1f66:	54 e4       	ldi	r21, 0x44	; 68
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	8b a3       	std	Y+35, r24	; 0x23
    1f72:	9c a3       	std	Y+36, r25	; 0x24
    1f74:	ad a3       	std	Y+37, r26	; 0x25
    1f76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f78:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <LCD_sendCommand+0x584>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	89 a3       	std	Y+33, r24	; 0x21
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <LCD_sendCommand+0x602>
	else if (__tmp > 65535)
    1f9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <LCD_sendCommand+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9a a3       	std	Y+34, r25	; 0x22
    1fd8:	89 a3       	std	Y+33, r24	; 0x21
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <LCD_sendCommand+0x5e4>
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	98 a3       	std	Y+32, r25	; 0x20
    1fe2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_sendCommand+0x5d2>
    1fec:	98 a3       	std	Y+32, r25	; 0x20
    1fee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	9a a3       	std	Y+34, r25	; 0x22
    1ff8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <LCD_sendCommand+0x5c6>
    2002:	14 c0       	rjmp	.+40     	; 0x202c <LCD_sendCommand+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9a a3       	std	Y+34, r25	; 0x22
    2016:	89 a3       	std	Y+33, r24	; 0x21
    2018:	89 a1       	ldd	r24, Y+33	; 0x21
    201a:	9a a1       	ldd	r25, Y+34	; 0x22
    201c:	9e 8f       	std	Y+30, r25	; 0x1e
    201e:	8d 8f       	std	Y+29, r24	; 0x1d
    2020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2022:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_sendCommand+0x60e>
    2028:	9e 8f       	std	Y+30, r25	; 0x1e
    202a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command << 4) & 0xF0; 
    202c:	ab e3       	ldi	r26, 0x3B	; 59
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	fe 01       	movw	r30, r28
    2032:	ed 59       	subi	r30, 0x9D	; 157
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	82 95       	swap	r24
    203e:	92 95       	swap	r25
    2040:	90 7f       	andi	r25, 0xF0	; 240
    2042:	98 27       	eor	r25, r24
    2044:	80 7f       	andi	r24, 0xF0	; 240
    2046:	98 27       	eor	r25, r24
    2048:	8c 93       	st	X, r24
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	89 8f       	std	Y+25, r24	; 0x19
    2054:	9a 8f       	std	Y+26, r25	; 0x1a
    2056:	ab 8f       	std	Y+27, r26	; 0x1b
    2058:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	69 8d       	ldd	r22, Y+25	; 0x19
    205c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8d 8b       	std	Y+21, r24	; 0x15
    2074:	9e 8b       	std	Y+22, r25	; 0x16
    2076:	af 8b       	std	Y+23, r26	; 0x17
    2078:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    207a:	6d 89       	ldd	r22, Y+21	; 0x15
    207c:	7e 89       	ldd	r23, Y+22	; 0x16
    207e:	8f 89       	ldd	r24, Y+23	; 0x17
    2080:	98 8d       	ldd	r25, Y+24	; 0x18
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <LCD_sendCommand+0x686>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	3f c0       	rjmp	.+126    	; 0x211a <LCD_sendCommand+0x704>
	else if (__tmp > 65535)
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <LCD_sendCommand+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	69 8d       	ldd	r22, Y+25	; 0x19
    20b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <LCD_sendCommand+0x6e6>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9a 8b       	std	Y+18, r25	; 0x12
    20e4:	89 8b       	std	Y+17, r24	; 0x11
    20e6:	89 89       	ldd	r24, Y+17	; 0x11
    20e8:	9a 89       	ldd	r25, Y+18	; 0x12
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_sendCommand+0x6d4>
    20ee:	9a 8b       	std	Y+18, r25	; 0x12
    20f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8b 89       	ldd	r24, Y+19	; 0x13
    20fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <LCD_sendCommand+0x6c8>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <LCD_sendCommand+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9c 8b       	std	Y+20, r25	; 0x14
    2118:	8b 8b       	std	Y+19, r24	; 0x13
    211a:	8b 89       	ldd	r24, Y+19	; 0x13
    211c:	9c 89       	ldd	r25, Y+20	; 0x14
    211e:	98 8b       	std	Y+16, r25	; 0x10
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    2122:	8f 85       	ldd	r24, Y+15	; 0x0f
    2124:	98 89       	ldd	r25, Y+16	; 0x10
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_sendCommand+0x710>
    212a:	98 8b       	std	Y+16, r25	; 0x10
    212c:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (command & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    212e:	a8 e3       	ldi	r26, 0x38	; 56
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e8 e3       	ldi	r30, 0x38	; 56
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	8e 7f       	andi	r24, 0xFE	; 254
    213a:	8c 93       	st	X, r24
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e8       	ldi	r26, 0x80	; 128
    2142:	bf e3       	ldi	r27, 0x3F	; 63
    2144:	8b 87       	std	Y+11, r24	; 0x0b
    2146:	9c 87       	std	Y+12, r25	; 0x0c
    2148:	ad 87       	std	Y+13, r26	; 0x0d
    214a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a ef       	ldi	r20, 0xFA	; 250
    215a:	54 e4       	ldi	r21, 0x44	; 68
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8f 83       	std	Y+7, r24	; 0x07
    2166:	98 87       	std	Y+8, r25	; 0x08
    2168:	a9 87       	std	Y+9, r26	; 0x09
    216a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <LCD_sendCommand+0x778>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	3f c0       	rjmp	.+126    	; 0x220c <LCD_sendCommand+0x7f6>
	else if (__tmp > 65535)
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <LCD_sendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <LCD_sendCommand+0x7d8>
    21d0:	88 ec       	ldi	r24, 0xC8	; 200
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_sendCommand+0x7c6>
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <LCD_sendCommand+0x7ba>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <LCD_sendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_sendCommand+0x802>
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */ 
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    2220:	cd 59       	subi	r28, 0x9D	; 157
    2222:	df 4f       	sbci	r29, 0xFF	; 255
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	08 95       	ret

00002238 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	c3 56       	subi	r28, 0x63	; 99
    2246:	d0 40       	sbci	r29, 0x00	; 0
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	fe 01       	movw	r30, r28
    2254:	ed 59       	subi	r30, 0x9D	; 157
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    225a:	a8 e3       	ldi	r26, 0x38	; 56
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e8 e3       	ldi	r30, 0x38	; 56
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	84 60       	ori	r24, 0x04	; 4
    2266:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2268:	a8 e3       	ldi	r26, 0x38	; 56
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e8 e3       	ldi	r30, 0x38	; 56
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8d 7f       	andi	r24, 0xFD	; 253
    2274:	8c 93       	st	X, r24
    2276:	fe 01       	movw	r30, r28
    2278:	e1 5a       	subi	r30, 0xA1	; 161
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 e8       	ldi	r26, 0x80	; 128
    2282:	bf e3       	ldi	r27, 0x3F	; 63
    2284:	80 83       	st	Z, r24
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	a2 83       	std	Z+2, r26	; 0x02
    228a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	8e 01       	movw	r16, r28
    228e:	05 5a       	subi	r16, 0xA5	; 165
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	e1 5a       	subi	r30, 0xA1	; 161
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	80 83       	st	Z, r24
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	a2 83       	std	Z+2, r26	; 0x02
    22b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ba:	fe 01       	movw	r30, r28
    22bc:	e5 5a       	subi	r30, 0xA5	; 165
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	44 f4       	brge	.+16     	; 0x22e8 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    22d8:	fe 01       	movw	r30, r28
    22da:	e7 5a       	subi	r30, 0xA7	; 167
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	64 c0       	rjmp	.+200    	; 0x23b0 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    22e8:	fe 01       	movw	r30, r28
    22ea:	e5 5a       	subi	r30, 0xA5	; 165
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	0c f0       	brlt	.+2      	; 0x2308 <LCD_displayCharacter+0xd0>
    2306:	43 c0       	rjmp	.+134    	; 0x238e <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	fe 01       	movw	r30, r28
    230a:	e1 5a       	subi	r30, 0xA1	; 161
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	8e 01       	movw	r16, r28
    2328:	07 5a       	subi	r16, 0xA7	; 167
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	f8 01       	movw	r30, r16
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
    233e:	1f c0       	rjmp	.+62     	; 0x237e <LCD_displayCharacter+0x146>
    2340:	fe 01       	movw	r30, r28
    2342:	e9 5a       	subi	r30, 0xA9	; 169
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	88 ec       	ldi	r24, 0xC8	; 200
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	fe 01       	movw	r30, r28
    2350:	e9 5a       	subi	r30, 0xA9	; 169
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_displayCharacter+0x120>
    235c:	fe 01       	movw	r30, r28
    235e:	e9 5a       	subi	r30, 0xA9	; 169
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	de 01       	movw	r26, r28
    2368:	a7 5a       	subi	r26, 0xA7	; 167
    236a:	bf 4f       	sbci	r27, 0xFF	; 255
    236c:	fe 01       	movw	r30, r28
    236e:	e7 5a       	subi	r30, 0xA7	; 167
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	9c 93       	st	X, r25
    237c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	fe 01       	movw	r30, r28
    2380:	e7 5a       	subi	r30, 0xA7	; 167
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	d1 f6       	brne	.-76     	; 0x2340 <LCD_displayCharacter+0x108>
    238c:	27 c0       	rjmp	.+78     	; 0x23dc <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238e:	8e 01       	movw	r16, r28
    2390:	07 5a       	subi	r16, 0xA7	; 167
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	fe 01       	movw	r30, r28
    2396:	e5 5a       	subi	r30, 0xA5	; 165
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	f8 01       	movw	r30, r16
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	80 83       	st	Z, r24
    23b0:	de 01       	movw	r26, r28
    23b2:	ab 5a       	subi	r26, 0xAB	; 171
    23b4:	bf 4f       	sbci	r27, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	e7 5a       	subi	r30, 0xA7	; 167
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	8d 93       	st	X+, r24
    23c2:	9c 93       	st	X, r25
    23c4:	fe 01       	movw	r30, r28
    23c6:	eb 5a       	subi	r30, 0xAB	; 171
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_displayCharacter+0x196>
    23d2:	fe 01       	movw	r30, r28
    23d4:	eb 5a       	subi	r30, 0xAB	; 171
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    23dc:	a8 e3       	ldi	r26, 0x38	; 56
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e8 e3       	ldi	r30, 0x38	; 56
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	8c 93       	st	X, r24
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 5a       	subi	r30, 0xAF	; 175
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e8       	ldi	r26, 0x80	; 128
    23f6:	bf e3       	ldi	r27, 0x3F	; 63
    23f8:	80 83       	st	Z, r24
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	a2 83       	std	Z+2, r26	; 0x02
    23fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	8e 01       	movw	r16, r28
    2402:	03 5b       	subi	r16, 0xB3	; 179
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	ef 5a       	subi	r30, 0xAF	; 175
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a ef       	ldi	r20, 0xFA	; 250
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	f8 01       	movw	r30, r16
    2426:	80 83       	st	Z, r24
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	a2 83       	std	Z+2, r26	; 0x02
    242c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242e:	fe 01       	movw	r30, r28
    2430:	e3 5b       	subi	r30, 0xB3	; 179
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	44 f4       	brge	.+16     	; 0x245c <LCD_displayCharacter+0x224>
		__ticks = 1;
    244c:	fe 01       	movw	r30, r28
    244e:	e5 5b       	subi	r30, 0xB5	; 181
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	64 c0       	rjmp	.+200    	; 0x2524 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    245c:	fe 01       	movw	r30, r28
    245e:	e3 5b       	subi	r30, 0xB3	; 179
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	0c f0       	brlt	.+2      	; 0x247c <LCD_displayCharacter+0x244>
    247a:	43 c0       	rjmp	.+134    	; 0x2502 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	fe 01       	movw	r30, r28
    247e:	ef 5a       	subi	r30, 0xAF	; 175
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	8e 01       	movw	r16, r28
    249c:	05 5b       	subi	r16, 0xB5	; 181
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	f8 01       	movw	r30, r16
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24
    24b2:	1f c0       	rjmp	.+62     	; 0x24f2 <LCD_displayCharacter+0x2ba>
    24b4:	fe 01       	movw	r30, r28
    24b6:	e7 5b       	subi	r30, 0xB7	; 183
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 5b       	subi	r30, 0xB7	; 183
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_displayCharacter+0x294>
    24d0:	fe 01       	movw	r30, r28
    24d2:	e7 5b       	subi	r30, 0xB7	; 183
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	de 01       	movw	r26, r28
    24dc:	a5 5b       	subi	r26, 0xB5	; 181
    24de:	bf 4f       	sbci	r27, 0xFF	; 255
    24e0:	fe 01       	movw	r30, r28
    24e2:	e5 5b       	subi	r30, 0xB5	; 181
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	11 96       	adiw	r26, 0x01	; 1
    24ee:	9c 93       	st	X, r25
    24f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5b       	subi	r30, 0xB5	; 181
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	d1 f6       	brne	.-76     	; 0x24b4 <LCD_displayCharacter+0x27c>
    2500:	27 c0       	rjmp	.+78     	; 0x2550 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2502:	8e 01       	movw	r16, r28
    2504:	05 5b       	subi	r16, 0xB5	; 181
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	fe 01       	movw	r30, r28
    250a:	e3 5b       	subi	r30, 0xB3	; 179
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	f8 01       	movw	r30, r16
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	de 01       	movw	r26, r28
    2526:	a9 5b       	subi	r26, 0xB9	; 185
    2528:	bf 4f       	sbci	r27, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	e5 5b       	subi	r30, 0xB5	; 181
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	8d 93       	st	X+, r24
    2536:	9c 93       	st	X, r25
    2538:	fe 01       	movw	r30, r28
    253a:	e9 5b       	subi	r30, 0xB9	; 185
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_displayCharacter+0x30a>
    2546:	fe 01       	movw	r30, r28
    2548:	e9 5b       	subi	r30, 0xB9	; 185
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data & 0xF0); 
    2550:	ab e3       	ldi	r26, 0x3B	; 59
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	fe 01       	movw	r30, r28
    2556:	ed 59       	subi	r30, 0x9D	; 157
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 81       	ld	r24, Z
    255c:	80 7f       	andi	r24, 0xF0	; 240
    255e:	8c 93       	st	X, r24
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5b       	subi	r30, 0xBD	; 189
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e8       	ldi	r26, 0x80	; 128
    256c:	bf e3       	ldi	r27, 0x3F	; 63
    256e:	80 83       	st	Z, r24
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	a2 83       	std	Z+2, r26	; 0x02
    2574:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	8e 01       	movw	r16, r28
    2578:	01 5c       	subi	r16, 0xC1	; 193
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	ed 5b       	subi	r30, 0xBD	; 189
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	4a ef       	ldi	r20, 0xFA	; 250
    2590:	54 e4       	ldi	r21, 0x44	; 68
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	f8 01       	movw	r30, r16
    259c:	80 83       	st	Z, r24
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	a2 83       	std	Z+2, r26	; 0x02
    25a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a4:	fe 01       	movw	r30, r28
    25a6:	ff 96       	adiw	r30, 0x3f	; 63
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <LCD_displayCharacter+0x392>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9e af       	std	Y+62, r25	; 0x3e
    25c6:	8d af       	std	Y+61, r24	; 0x3d
    25c8:	46 c0       	rjmp	.+140    	; 0x2656 <LCD_displayCharacter+0x41e>
	else if (__tmp > 65535)
    25ca:	fe 01       	movw	r30, r28
    25cc:	ff 96       	adiw	r30, 0x3f	; 63
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	3f ef       	ldi	r19, 0xFF	; 255
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	57 e4       	ldi	r21, 0x47	; 71
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e2:	18 16       	cp	r1, r24
    25e4:	64 f5       	brge	.+88     	; 0x263e <LCD_displayCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e6:	fe 01       	movw	r30, r28
    25e8:	ed 5b       	subi	r30, 0xBD	; 189
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9e af       	std	Y+62, r25	; 0x3e
    2612:	8d af       	std	Y+61, r24	; 0x3d
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <LCD_displayCharacter+0x3fc>
    2616:	88 ec       	ldi	r24, 0xC8	; 200
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9c af       	std	Y+60, r25	; 0x3c
    261c:	8b af       	std	Y+59, r24	; 0x3b
    261e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2620:	9c ad       	ldd	r25, Y+60	; 0x3c
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_displayCharacter+0x3ea>
    2626:	9c af       	std	Y+60, r25	; 0x3c
    2628:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	8d ad       	ldd	r24, Y+61	; 0x3d
    262c:	9e ad       	ldd	r25, Y+62	; 0x3e
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9e af       	std	Y+62, r25	; 0x3e
    2632:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	8d ad       	ldd	r24, Y+61	; 0x3d
    2636:	9e ad       	ldd	r25, Y+62	; 0x3e
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <LCD_displayCharacter+0x3de>
    263c:	16 c0       	rjmp	.+44     	; 0x266a <LCD_displayCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	fe 01       	movw	r30, r28
    2640:	ff 96       	adiw	r30, 0x3f	; 63
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e af       	std	Y+62, r25	; 0x3e
    2654:	8d af       	std	Y+61, r24	; 0x3d
    2656:	8d ad       	ldd	r24, Y+61	; 0x3d
    2658:	9e ad       	ldd	r25, Y+62	; 0x3e
    265a:	9a af       	std	Y+58, r25	; 0x3a
    265c:	89 af       	std	Y+57, r24	; 0x39
    265e:	89 ad       	ldd	r24, Y+57	; 0x39
    2660:	9a ad       	ldd	r25, Y+58	; 0x3a
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_displayCharacter+0x42a>
    2666:	9a af       	std	Y+58, r25	; 0x3a
    2668:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((data >> 4) & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    266a:	a8 e3       	ldi	r26, 0x38	; 56
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e8 e3       	ldi	r30, 0x38	; 56
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	8e 7f       	andi	r24, 0xFE	; 254
    2676:	8c 93       	st	X, r24
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a0 e8       	ldi	r26, 0x80	; 128
    267e:	bf e3       	ldi	r27, 0x3F	; 63
    2680:	8d ab       	std	Y+53, r24	; 0x35
    2682:	9e ab       	std	Y+54, r25	; 0x36
    2684:	af ab       	std	Y+55, r26	; 0x37
    2686:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2688:	6d a9       	ldd	r22, Y+53	; 0x35
    268a:	7e a9       	ldd	r23, Y+54	; 0x36
    268c:	8f a9       	ldd	r24, Y+55	; 0x37
    268e:	98 ad       	ldd	r25, Y+56	; 0x38
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a ef       	ldi	r20, 0xFA	; 250
    2696:	54 e4       	ldi	r21, 0x44	; 68
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	89 ab       	std	Y+49, r24	; 0x31
    26a2:	9a ab       	std	Y+50, r25	; 0x32
    26a4:	ab ab       	std	Y+51, r26	; 0x33
    26a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26a8:	69 a9       	ldd	r22, Y+49	; 0x31
    26aa:	7a a9       	ldd	r23, Y+50	; 0x32
    26ac:	8b a9       	ldd	r24, Y+51	; 0x33
    26ae:	9c a9       	ldd	r25, Y+52	; 0x34
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <LCD_displayCharacter+0x492>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	98 ab       	std	Y+48, r25	; 0x30
    26c6:	8f a7       	std	Y+47, r24	; 0x2f
    26c8:	3f c0       	rjmp	.+126    	; 0x2748 <LCD_displayCharacter+0x510>
	else if (__tmp > 65535)
    26ca:	69 a9       	ldd	r22, Y+49	; 0x31
    26cc:	7a a9       	ldd	r23, Y+50	; 0x32
    26ce:	8b a9       	ldd	r24, Y+51	; 0x33
    26d0:	9c a9       	ldd	r25, Y+52	; 0x34
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	4c f5       	brge	.+82     	; 0x2734 <LCD_displayCharacter+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	6d a9       	ldd	r22, Y+53	; 0x35
    26e4:	7e a9       	ldd	r23, Y+54	; 0x36
    26e6:	8f a9       	ldd	r24, Y+55	; 0x37
    26e8:	98 ad       	ldd	r25, Y+56	; 0x38
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	98 ab       	std	Y+48, r25	; 0x30
    2708:	8f a7       	std	Y+47, r24	; 0x2f
    270a:	0f c0       	rjmp	.+30     	; 0x272a <LCD_displayCharacter+0x4f2>
    270c:	88 ec       	ldi	r24, 0xC8	; 200
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9e a7       	std	Y+46, r25	; 0x2e
    2712:	8d a7       	std	Y+45, r24	; 0x2d
    2714:	8d a5       	ldd	r24, Y+45	; 0x2d
    2716:	9e a5       	ldd	r25, Y+46	; 0x2e
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_displayCharacter+0x4e0>
    271c:	9e a7       	std	Y+46, r25	; 0x2e
    271e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	8f a5       	ldd	r24, Y+47	; 0x2f
    2722:	98 a9       	ldd	r25, Y+48	; 0x30
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	98 ab       	std	Y+48, r25	; 0x30
    2728:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	8f a5       	ldd	r24, Y+47	; 0x2f
    272c:	98 a9       	ldd	r25, Y+48	; 0x30
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <LCD_displayCharacter+0x4d4>
    2732:	14 c0       	rjmp	.+40     	; 0x275c <LCD_displayCharacter+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	69 a9       	ldd	r22, Y+49	; 0x31
    2736:	7a a9       	ldd	r23, Y+50	; 0x32
    2738:	8b a9       	ldd	r24, Y+51	; 0x33
    273a:	9c a9       	ldd	r25, Y+52	; 0x34
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	98 ab       	std	Y+48, r25	; 0x30
    2746:	8f a7       	std	Y+47, r24	; 0x2f
    2748:	8f a5       	ldd	r24, Y+47	; 0x2f
    274a:	98 a9       	ldd	r25, Y+48	; 0x30
    274c:	9c a7       	std	Y+44, r25	; 0x2c
    274e:	8b a7       	std	Y+43, r24	; 0x2b
    2750:	8b a5       	ldd	r24, Y+43	; 0x2b
    2752:	9c a5       	ldd	r25, Y+44	; 0x2c
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_displayCharacter+0x51c>
    2758:	9c a7       	std	Y+44, r25	; 0x2c
    275a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    275c:	a8 e3       	ldi	r26, 0x38	; 56
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e8 e3       	ldi	r30, 0x38	; 56
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	81 60       	ori	r24, 0x01	; 1
    2768:	8c 93       	st	X, r24
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e8       	ldi	r26, 0x80	; 128
    2770:	bf e3       	ldi	r27, 0x3F	; 63
    2772:	8f a3       	std	Y+39, r24	; 0x27
    2774:	98 a7       	std	Y+40, r25	; 0x28
    2776:	a9 a7       	std	Y+41, r26	; 0x29
    2778:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	6f a1       	ldd	r22, Y+39	; 0x27
    277c:	78 a5       	ldd	r23, Y+40	; 0x28
    277e:	89 a5       	ldd	r24, Y+41	; 0x29
    2780:	9a a5       	ldd	r25, Y+42	; 0x2a
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a ef       	ldi	r20, 0xFA	; 250
    2788:	54 e4       	ldi	r21, 0x44	; 68
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8b a3       	std	Y+35, r24	; 0x23
    2794:	9c a3       	std	Y+36, r25	; 0x24
    2796:	ad a3       	std	Y+37, r26	; 0x25
    2798:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    279a:	6b a1       	ldd	r22, Y+35	; 0x23
    279c:	7c a1       	ldd	r23, Y+36	; 0x24
    279e:	8d a1       	ldd	r24, Y+37	; 0x25
    27a0:	9e a1       	ldd	r25, Y+38	; 0x26
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_displayCharacter+0x584>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9a a3       	std	Y+34, r25	; 0x22
    27b8:	89 a3       	std	Y+33, r24	; 0x21
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <LCD_displayCharacter+0x602>
	else if (__tmp > 65535)
    27bc:	6b a1       	ldd	r22, Y+35	; 0x23
    27be:	7c a1       	ldd	r23, Y+36	; 0x24
    27c0:	8d a1       	ldd	r24, Y+37	; 0x25
    27c2:	9e a1       	ldd	r25, Y+38	; 0x26
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <LCD_displayCharacter+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	6f a1       	ldd	r22, Y+39	; 0x27
    27d6:	78 a5       	ldd	r23, Y+40	; 0x28
    27d8:	89 a5       	ldd	r24, Y+41	; 0x29
    27da:	9a a5       	ldd	r25, Y+42	; 0x2a
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9a a3       	std	Y+34, r25	; 0x22
    27fa:	89 a3       	std	Y+33, r24	; 0x21
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <LCD_displayCharacter+0x5e4>
    27fe:	88 ec       	ldi	r24, 0xC8	; 200
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	98 a3       	std	Y+32, r25	; 0x20
    2804:	8f 8f       	std	Y+31, r24	; 0x1f
    2806:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2808:	98 a1       	ldd	r25, Y+32	; 0x20
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_displayCharacter+0x5d2>
    280e:	98 a3       	std	Y+32, r25	; 0x20
    2810:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	89 a1       	ldd	r24, Y+33	; 0x21
    2814:	9a a1       	ldd	r25, Y+34	; 0x22
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9a a3       	std	Y+34, r25	; 0x22
    281a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	89 a1       	ldd	r24, Y+33	; 0x21
    281e:	9a a1       	ldd	r25, Y+34	; 0x22
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <LCD_displayCharacter+0x5c6>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <LCD_displayCharacter+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	6b a1       	ldd	r22, Y+35	; 0x23
    2828:	7c a1       	ldd	r23, Y+36	; 0x24
    282a:	8d a1       	ldd	r24, Y+37	; 0x25
    282c:	9e a1       	ldd	r25, Y+38	; 0x26
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9a a3       	std	Y+34, r25	; 0x22
    2838:	89 a3       	std	Y+33, r24	; 0x21
    283a:	89 a1       	ldd	r24, Y+33	; 0x21
    283c:	9a a1       	ldd	r25, Y+34	; 0x22
    283e:	9e 8f       	std	Y+30, r25	; 0x1e
    2840:	8d 8f       	std	Y+29, r24	; 0x1d
    2842:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2844:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_displayCharacter+0x60e>
    284a:	9e 8f       	std	Y+30, r25	; 0x1e
    284c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data << 4) & 0xF0; 
    284e:	ab e3       	ldi	r26, 0x3B	; 59
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	fe 01       	movw	r30, r28
    2854:	ed 59       	subi	r30, 0x9D	; 157
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	82 95       	swap	r24
    2860:	92 95       	swap	r25
    2862:	90 7f       	andi	r25, 0xF0	; 240
    2864:	98 27       	eor	r25, r24
    2866:	80 7f       	andi	r24, 0xF0	; 240
    2868:	98 27       	eor	r25, r24
    286a:	8c 93       	st	X, r24
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e8       	ldi	r26, 0x80	; 128
    2872:	bf e3       	ldi	r27, 0x3F	; 63
    2874:	89 8f       	std	Y+25, r24	; 0x19
    2876:	9a 8f       	std	Y+26, r25	; 0x1a
    2878:	ab 8f       	std	Y+27, r26	; 0x1b
    287a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	69 8d       	ldd	r22, Y+25	; 0x19
    287e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a ef       	ldi	r20, 0xFA	; 250
    288a:	54 e4       	ldi	r21, 0x44	; 68
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	8d 8b       	std	Y+21, r24	; 0x15
    2896:	9e 8b       	std	Y+22, r25	; 0x16
    2898:	af 8b       	std	Y+23, r26	; 0x17
    289a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    289c:	6d 89       	ldd	r22, Y+21	; 0x15
    289e:	7e 89       	ldd	r23, Y+22	; 0x16
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <LCD_displayCharacter+0x686>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9c 8b       	std	Y+20, r25	; 0x14
    28ba:	8b 8b       	std	Y+19, r24	; 0x13
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <LCD_displayCharacter+0x704>
	else if (__tmp > 65535)
    28be:	6d 89       	ldd	r22, Y+21	; 0x15
    28c0:	7e 89       	ldd	r23, Y+22	; 0x16
    28c2:	8f 89       	ldd	r24, Y+23	; 0x17
    28c4:	98 8d       	ldd	r25, Y+24	; 0x18
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <LCD_displayCharacter+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	69 8d       	ldd	r22, Y+25	; 0x19
    28d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9c 8b       	std	Y+20, r25	; 0x14
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <LCD_displayCharacter+0x6e6>
    2900:	88 ec       	ldi	r24, 0xC8	; 200
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9a 8b       	std	Y+18, r25	; 0x12
    2906:	89 8b       	std	Y+17, r24	; 0x11
    2908:	89 89       	ldd	r24, Y+17	; 0x11
    290a:	9a 89       	ldd	r25, Y+18	; 0x12
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_displayCharacter+0x6d4>
    2910:	9a 8b       	std	Y+18, r25	; 0x12
    2912:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8b 89       	ldd	r24, Y+19	; 0x13
    2916:	9c 89       	ldd	r25, Y+20	; 0x14
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	9c 8b       	std	Y+20, r25	; 0x14
    291c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8b 89       	ldd	r24, Y+19	; 0x13
    2920:	9c 89       	ldd	r25, Y+20	; 0x14
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <LCD_displayCharacter+0x6c8>
    2926:	14 c0       	rjmp	.+40     	; 0x2950 <LCD_displayCharacter+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	6d 89       	ldd	r22, Y+21	; 0x15
    292a:	7e 89       	ldd	r23, Y+22	; 0x16
    292c:	8f 89       	ldd	r24, Y+23	; 0x17
    292e:	98 8d       	ldd	r25, Y+24	; 0x18
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	8b 89       	ldd	r24, Y+19	; 0x13
    293e:	9c 89       	ldd	r25, Y+20	; 0x14
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	8f 87       	std	Y+15, r24	; 0x0f
    2944:	8f 85       	ldd	r24, Y+15	; 0x0f
    2946:	98 89       	ldd	r25, Y+16	; 0x10
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_displayCharacter+0x710>
    294c:	98 8b       	std	Y+16, r25	; 0x10
    294e:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (data & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2950:	a8 e3       	ldi	r26, 0x38	; 56
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e8 e3       	ldi	r30, 0x38	; 56
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	8e 7f       	andi	r24, 0xFE	; 254
    295c:	8c 93       	st	X, r24
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	a0 e8       	ldi	r26, 0x80	; 128
    2964:	bf e3       	ldi	r27, 0x3F	; 63
    2966:	8b 87       	std	Y+11, r24	; 0x0b
    2968:	9c 87       	std	Y+12, r25	; 0x0c
    296a:	ad 87       	std	Y+13, r26	; 0x0d
    296c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2970:	7c 85       	ldd	r23, Y+12	; 0x0c
    2972:	8d 85       	ldd	r24, Y+13	; 0x0d
    2974:	9e 85       	ldd	r25, Y+14	; 0x0e
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4a ef       	ldi	r20, 0xFA	; 250
    297c:	54 e4       	ldi	r21, 0x44	; 68
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	8f 83       	std	Y+7, r24	; 0x07
    2988:	98 87       	std	Y+8, r25	; 0x08
    298a:	a9 87       	std	Y+9, r26	; 0x09
    298c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    298e:	6f 81       	ldd	r22, Y+7	; 0x07
    2990:	78 85       	ldd	r23, Y+8	; 0x08
    2992:	89 85       	ldd	r24, Y+9	; 0x09
    2994:	9a 85       	ldd	r25, Y+10	; 0x0a
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	2c f4       	brge	.+10     	; 0x29b0 <LCD_displayCharacter+0x778>
		__ticks = 1;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
    29ae:	3f c0       	rjmp	.+126    	; 0x2a2e <LCD_displayCharacter+0x7f6>
	else if (__tmp > 65535)
    29b0:	6f 81       	ldd	r22, Y+7	; 0x07
    29b2:	78 85       	ldd	r23, Y+8	; 0x08
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	3f ef       	ldi	r19, 0xFF	; 255
    29bc:	4f e7       	ldi	r20, 0x7F	; 127
    29be:	57 e4       	ldi	r21, 0x47	; 71
    29c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c4:	18 16       	cp	r1, r24
    29c6:	4c f5       	brge	.+82     	; 0x2a1a <LCD_displayCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    29cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	0f c0       	rjmp	.+30     	; 0x2a10 <LCD_displayCharacter+0x7d8>
    29f2:	88 ec       	ldi	r24, 0xC8	; 200
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9c 83       	std	Y+4, r25	; 0x04
    29f8:	8b 83       	std	Y+3, r24	; 0x03
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	9c 81       	ldd	r25, Y+4	; 0x04
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <LCD_displayCharacter+0x7c6>
    2a02:	9c 83       	std	Y+4, r25	; 0x04
    2a04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	9e 83       	std	Y+6, r25	; 0x06
    2a0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a10:	8d 81       	ldd	r24, Y+5	; 0x05
    2a12:	9e 81       	ldd	r25, Y+6	; 0x06
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	69 f7       	brne	.-38     	; 0x29f2 <LCD_displayCharacter+0x7ba>
    2a18:	14 c0       	rjmp	.+40     	; 0x2a42 <LCD_displayCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1c:	78 85       	ldd	r23, Y+8	; 0x08
    2a1e:	89 85       	ldd	r24, Y+9	; 0x09
    2a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	9a 83       	std	Y+2, r25	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_displayCharacter+0x802>
    2a3e:	9a 83       	std	Y+2, r25	; 0x02
    2a40:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    2a42:	cd 59       	subi	r28, 0x9D	; 157
    2a44:	df 4f       	sbci	r29, 0xFF	; 255
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	08 95       	ret

00002a5a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <LCD_displayString+0x6>
    2a60:	0f 92       	push	r0
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	9b 83       	std	Y+3, r25	; 0x03
    2a68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a6a:	19 82       	std	Y+1, r1	; 0x01
    2a6c:	0e c0       	rjmp	.+28     	; 0x2a8a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	80 81       	ld	r24, Z
    2a80:	0e 94 1c 11 	call	0x2238	; 0x2238 <LCD_displayCharacter>
		i++;
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	8f 5f       	subi	r24, 0xFF	; 255
    2a88:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	fc 01       	movw	r30, r24
    2a96:	e2 0f       	add	r30, r18
    2a98:	f3 1f       	adc	r31, r19
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 23       	and	r24, r24
    2a9e:	39 f7       	brne	.-50     	; 0x2a6e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <LCD_goToRowColumn+0x6>
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <LCD_goToRowColumn+0x8>
    2ab4:	0f 92       	push	r0
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	8a 83       	std	Y+2, r24	; 0x02
    2abc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	3d 83       	std	Y+5, r19	; 0x05
    2ac6:	2c 83       	std	Y+4, r18	; 0x04
    2ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aca:	9d 81       	ldd	r25, Y+5	; 0x05
    2acc:	81 30       	cpi	r24, 0x01	; 1
    2ace:	91 05       	cpc	r25, r1
    2ad0:	c1 f0       	breq	.+48     	; 0x2b02 <LCD_goToRowColumn+0x56>
    2ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ad6:	22 30       	cpi	r18, 0x02	; 2
    2ad8:	31 05       	cpc	r19, r1
    2ada:	2c f4       	brge	.+10     	; 0x2ae6 <LCD_goToRowColumn+0x3a>
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	61 f0       	breq	.+24     	; 0x2afc <LCD_goToRowColumn+0x50>
    2ae4:	19 c0       	rjmp	.+50     	; 0x2b18 <LCD_goToRowColumn+0x6c>
    2ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    2aea:	22 30       	cpi	r18, 0x02	; 2
    2aec:	31 05       	cpc	r19, r1
    2aee:	69 f0       	breq	.+26     	; 0x2b0a <LCD_goToRowColumn+0x5e>
    2af0:	8c 81       	ldd	r24, Y+4	; 0x04
    2af2:	9d 81       	ldd	r25, Y+5	; 0x05
    2af4:	83 30       	cpi	r24, 0x03	; 3
    2af6:	91 05       	cpc	r25, r1
    2af8:	61 f0       	breq	.+24     	; 0x2b12 <LCD_goToRowColumn+0x66>
    2afa:	0e c0       	rjmp	.+28     	; 0x2b18 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	0b c0       	rjmp	.+22     	; 0x2b18 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	80 5c       	subi	r24, 0xC0	; 192
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	07 c0       	rjmp	.+14     	; 0x2b18 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	80 5f       	subi	r24, 0xF0	; 240
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	03 c0       	rjmp	.+6      	; 0x2b18 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	80 5b       	subi	r24, 0xB0	; 176
    2b16:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	80 68       	ori	r24, 0x80	; 128
    2b1c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_sendCommand>
}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <LCD_displayStringRowColumn+0x6>
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <LCD_displayStringRowColumn+0x8>
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	6a 83       	std	Y+2, r22	; 0x02
    2b40:	5c 83       	std	Y+4, r21	; 0x04
    2b42:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	6a 81       	ldd	r22, Y+2	; 0x02
    2b48:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b50:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <LCD_displayString>
}
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	62 97       	sbiw	r28, 0x12	; 18
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	9a 8b       	std	Y+18, r25	; 0x12
    2b78:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2b7a:	89 89       	ldd	r24, Y+17	; 0x11
    2b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b7e:	9e 01       	movw	r18, r28
    2b80:	2f 5f       	subi	r18, 0xFF	; 255
    2b82:	3f 4f       	sbci	r19, 0xFF	; 255
    2b84:	b9 01       	movw	r22, r18
    2b86:	4a e0       	ldi	r20, 0x0A	; 10
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	0e 94 60 18 	call	0x30c0	; 0x30c0 <itoa>
   LCD_displayString(buff);
    2b8e:	ce 01       	movw	r24, r28
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <LCD_displayString>
}
    2b96:	62 96       	adiw	r28, 0x12	; 18
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_sendCommand>
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <getPassword>:
#include <util/delay.h>

#define BUTTON_DELAY 400 /*define a time value of each button press */

void getPassword(uint8 array[])
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	62 97       	sbiw	r28, 0x12	; 18
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	9a 8b       	std	Y+18, r25	; 0x12
    2bd2:	89 8b       	std	Y+17, r24	; 0x11
	sint8 i;
	uint8 key;
	for (i = 0; i < 5; i++)
    2bd4:	18 8a       	std	Y+16, r1	; 0x10
    2bd6:	b9 c0       	rjmp	.+370    	; 0x2d4a <getPassword+0x18e>
	{
		key = KeyPad_getPressedKey();
    2bd8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <KeyPad_getPressedKey>
    2bdc:	8f 87       	std	Y+15, r24	; 0x0f
		if (key == '*')
    2bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be0:	8a 32       	cpi	r24, 0x2A	; 42
    2be2:	51 f4       	brne	.+20     	; 0x2bf8 <getPassword+0x3c>
		{
			LCD_displayStringRowColumn(1, 0, "                ");
    2be4:	28 ea       	ldi	r18, 0xA8	; 168
    2be6:	31 e0       	ldi	r19, 0x01	; 1
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	a9 01       	movw	r20, r18
    2bee:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
			i = -1;
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	88 8b       	std	Y+16, r24	; 0x10
    2bf6:	a6 c0       	rjmp	.+332    	; 0x2d44 <getPassword+0x188>
			continue;
		}
		else if ((key >= 0) && (key <= 9))
    2bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfa:	8a 30       	cpi	r24, 0x0A	; 10
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <getPassword+0x44>
    2bfe:	8c c0       	rjmp	.+280    	; 0x2d18 <getPassword+0x15c>
		{
			array[i] = key;
    2c00:	88 89       	ldd	r24, Y+16	; 0x10
    2c02:	28 2f       	mov	r18, r24
    2c04:	33 27       	eor	r19, r19
    2c06:	27 fd       	sbrc	r18, 7
    2c08:	30 95       	com	r19
    2c0a:	89 89       	ldd	r24, Y+17	; 0x11
    2c0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0e:	fc 01       	movw	r30, r24
    2c10:	e2 0f       	add	r30, r18
    2c12:	f3 1f       	adc	r31, r19
    2c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c16:	80 83       	st	Z, r24
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	a8 ec       	ldi	r26, 0xC8	; 200
    2c1e:	b3 e4       	ldi	r27, 0x43	; 67
    2c20:	8b 87       	std	Y+11, r24	; 0x0b
    2c22:	9c 87       	std	Y+12, r25	; 0x0c
    2c24:	ad 87       	std	Y+13, r26	; 0x0d
    2c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	4a ef       	ldi	r20, 0xFA	; 250
    2c36:	54 e4       	ldi	r21, 0x44	; 68
    2c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	8f 83       	std	Y+7, r24	; 0x07
    2c42:	98 87       	std	Y+8, r25	; 0x08
    2c44:	a9 87       	std	Y+9, r26	; 0x09
    2c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c48:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4a:	78 85       	ldd	r23, Y+8	; 0x08
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e8       	ldi	r20, 0x80	; 128
    2c56:	5f e3       	ldi	r21, 0x3F	; 63
    2c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c5c:	88 23       	and	r24, r24
    2c5e:	2c f4       	brge	.+10     	; 0x2c6a <getPassword+0xae>
		__ticks = 1;
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
    2c68:	3f c0       	rjmp	.+126    	; 0x2ce8 <getPassword+0x12c>
	else if (__tmp > 65535)
    2c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6c:	78 85       	ldd	r23, Y+8	; 0x08
    2c6e:	89 85       	ldd	r24, Y+9	; 0x09
    2c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	3f ef       	ldi	r19, 0xFF	; 255
    2c76:	4f e7       	ldi	r20, 0x7F	; 127
    2c78:	57 e4       	ldi	r21, 0x47	; 71
    2c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c7e:	18 16       	cp	r1, r24
    2c80:	4c f5       	brge	.+82     	; 0x2cd4 <getPassword+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e2       	ldi	r20, 0x20	; 32
    2c90:	51 e4       	ldi	r21, 0x41	; 65
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	bc 01       	movw	r22, r24
    2c9c:	cd 01       	movw	r24, r26
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <getPassword+0x10e>
    2cac:	88 ec       	ldi	r24, 0xC8	; 200
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <getPassword+0xfc>
    2cbc:	9c 83       	std	Y+4, r25	; 0x04
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	9e 83       	std	Y+6, r25	; 0x06
    2cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	69 f7       	brne	.-38     	; 0x2cac <getPassword+0xf0>
    2cd2:	14 c0       	rjmp	.+40     	; 0x2cfc <getPassword+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd6:	78 85       	ldd	r23, Y+8	; 0x08
    2cd8:	89 85       	ldd	r24, Y+9	; 0x09
    2cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <getPassword+0x138>
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
		{
			i -= 1;
			continue;
		}
		_delay_ms(BUTTON_DELAY);
		LCD_goToRowColumn(1, i + 3);
    2cfc:	88 89       	ldd	r24, Y+16	; 0x10
    2cfe:	98 2f       	mov	r25, r24
    2d00:	9d 5f       	subi	r25, 0xFD	; 253
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	69 2f       	mov	r22, r25
    2d06:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    2d0a:	8a e2       	ldi	r24, 0x2A	; 42
    2d0c:	0e 94 1c 11 	call	0x2238	; 0x2238 <LCD_displayCharacter>

		if (i == 4)
    2d10:	88 89       	ldd	r24, Y+16	; 0x10
    2d12:	84 30       	cpi	r24, 0x04	; 4
    2d14:	29 f0       	breq	.+10     	; 0x2d20 <getPassword+0x164>
    2d16:	16 c0       	rjmp	.+44     	; 0x2d44 <getPassword+0x188>
		{
			array[i] = key;
		}
		else
		{
			i -= 1;
    2d18:	88 89       	ldd	r24, Y+16	; 0x10
    2d1a:	81 50       	subi	r24, 0x01	; 1
    2d1c:	88 8b       	std	Y+16, r24	; 0x10
    2d1e:	12 c0       	rjmp	.+36     	; 0x2d44 <getPassword+0x188>
		LCD_goToRowColumn(1, i + 3);
		LCD_displayCharacter('*');

		if (i == 4)
		{
			key = KeyPad_getPressedKey();
    2d20:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <KeyPad_getPressedKey>
    2d24:	8f 87       	std	Y+15, r24	; 0x0f
			if (key == 13)
    2d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d28:	8d 30       	cpi	r24, 0x0D	; 13
    2d2a:	99 f0       	breq	.+38     	; 0x2d52 <getPassword+0x196>
			{
				break;
			}
			else if (key == '*')
    2d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2e:	8a 32       	cpi	r24, 0x2A	; 42
    2d30:	49 f4       	brne	.+18     	; 0x2d44 <getPassword+0x188>
			{
				LCD_displayStringRowColumn(1, 0, "                ");
    2d32:	28 ea       	ldi	r18, 0xA8	; 168
    2d34:	31 e0       	ldi	r19, 0x01	; 1
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	a9 01       	movw	r20, r18
    2d3c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_displayStringRowColumn>
				i = -1;
    2d40:	8f ef       	ldi	r24, 0xFF	; 255
    2d42:	88 8b       	std	Y+16, r24	; 0x10

void getPassword(uint8 array[])
{
	sint8 i;
	uint8 key;
	for (i = 0; i < 5; i++)
    2d44:	88 89       	ldd	r24, Y+16	; 0x10
    2d46:	8f 5f       	subi	r24, 0xFF	; 255
    2d48:	88 8b       	std	Y+16, r24	; 0x10
    2d4a:	88 89       	ldd	r24, Y+16	; 0x10
    2d4c:	85 30       	cpi	r24, 0x05	; 5
    2d4e:	0c f4       	brge	.+2      	; 0x2d52 <getPassword+0x196>
    2d50:	43 cf       	rjmp	.-378    	; 0x2bd8 <getPassword+0x1c>
				continue;
			}
		}
	}

}
    2d52:	62 96       	adiw	r28, 0x12	; 18
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <prepareToSend>:

void prepareToSend(uint8 array[], uint8 array2[])
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <prepareToSend+0x6>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <prepareToSend+0x8>
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02
    2d76:	7d 83       	std	Y+5, r23	; 0x05
    2d78:	6c 83       	std	Y+4, r22	; 0x04
	sint8 i = 0;
    2d7a:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 6; i++)
    2d7c:	19 82       	std	Y+1, r1	; 0x01
    2d7e:	28 c0       	rjmp	.+80     	; 0x2dd0 <prepareToSend+0x6c>
	{
		array2[i] = array[i];
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	33 27       	eor	r19, r19
    2d86:	27 fd       	sbrc	r18, 7
    2d88:	30 95       	com	r19
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8e:	dc 01       	movw	r26, r24
    2d90:	a2 0f       	add	r26, r18
    2d92:	b3 1f       	adc	r27, r19
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	28 2f       	mov	r18, r24
    2d98:	33 27       	eor	r19, r19
    2d9a:	27 fd       	sbrc	r18, 7
    2d9c:	30 95       	com	r19
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	9b 81       	ldd	r25, Y+3	; 0x03
    2da2:	fc 01       	movw	r30, r24
    2da4:	e2 0f       	add	r30, r18
    2da6:	f3 1f       	adc	r31, r19
    2da8:	80 81       	ld	r24, Z
    2daa:	8c 93       	st	X, r24
		if (i == 5)
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	85 30       	cpi	r24, 0x05	; 5
    2db0:	61 f4       	brne	.+24     	; 0x2dca <prepareToSend+0x66>
		{
			array2[i] = '#';
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	28 2f       	mov	r18, r24
    2db6:	33 27       	eor	r19, r19
    2db8:	27 fd       	sbrc	r18, 7
    2dba:	30 95       	com	r19
    2dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	e2 0f       	add	r30, r18
    2dc4:	f3 1f       	adc	r31, r19
    2dc6:	83 e2       	ldi	r24, 0x23	; 35
    2dc8:	80 83       	st	Z, r24
}

void prepareToSend(uint8 array[], uint8 array2[])
{
	sint8 i = 0;
	for (i = 0; i < 6; i++)
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	86 30       	cpi	r24, 0x06	; 6
    2dd4:	ac f2       	brlt	.-86     	; 0x2d80 <prepareToSend+0x1c>
		{
			array2[i] = '#';
			//break;
		}
	}
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <timer0_init_normal_mode>:
 * so put initial timer counter=0  0 --> 255 (32ms per overflow)
 * so we need timer to overflow 31 times to get a 1 second
 */

void timer0_init_normal_mode(void)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; //timer initial value
    2dee:	e2 e5       	ldi	r30, 0x52	; 82
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE0); //enable overflow interrupt
    2df4:	a9 e5       	ldi	r26, 0x59	; 89
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e9 e5       	ldi	r30, 0x59	; 89
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	81 60       	ori	r24, 0x01	; 1
    2e00:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1 << FOC0) | (1 << CS02) | (1 << CS00);
    2e02:	e3 e5       	ldi	r30, 0x53	; 83
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	85 e8       	ldi	r24, 0x85	; 133
    2e08:	80 83       	st	Z, r24
	second = 0;
    2e0a:	10 92 c3 01 	sts	0x01C3, r1
}
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    2e14:	1f 92       	push	r1
    2e16:	0f 92       	push	r0
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	0f 92       	push	r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	8f 93       	push	r24
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2e28:	80 91 c4 01 	lds	r24, 0x01C4
    2e2c:	8f 5f       	subi	r24, 0xFF	; 255
    2e2e:	80 93 c4 01 	sts	0x01C4, r24
	if (g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
    2e32:	80 91 c4 01 	lds	r24, 0x01C4
    2e36:	80 32       	cpi	r24, 0x20	; 32
    2e38:	39 f4       	brne	.+14     	; 0x2e48 <__vector_9+0x34>
	{
		second++;
    2e3a:	80 91 c3 01 	lds	r24, 0x01C3
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	80 93 c3 01 	sts	0x01C3, r24
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
    2e44:	10 92 c4 01 	sts	0x01C4, r1
	}
}
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	8f 91       	pop	r24
    2e4e:	0f 90       	pop	r0
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	0f 90       	pop	r0
    2e54:	1f 90       	pop	r1
    2e56:	18 95       	reti

00002e58 <UART_init>:
 */

#include "uart.h"

extern volatile uint8 g_choice;
void UART_init(void) {
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1 << U2X); /* U2X = 1 for double transmission speed */
    2e60:	eb e2       	ldi	r30, 0x2B	; 43
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    2e68:	ea e2       	ldi	r30, 0x2A	; 42
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	88 e9       	ldi	r24, 0x98	; 152
    2e6e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    2e70:	e0 e4       	ldi	r30, 0x40	; 64
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	86 e8       	ldi	r24, 0x86	; 134
    2e76:	80 83       	st	Z, r24

	/* baud rate=9600 & Fosc=8MHz -->  UBBR=( Fosc / (8 * baud rate) ) - 1 = 103 */
	UBRRH = 0;
    2e78:	e0 e4       	ldi	r30, 0x40	; 64
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	10 82       	st	Z, r1
	UBRRL = 103;
    2e7e:	e9 e2       	ldi	r30, 0x29	; 41
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	87 e6       	ldi	r24, 0x67	; 103
    2e84:	80 83       	st	Z, r24
}
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <UART_sendByte>:

void UART_sendByte(const uint8 data) {
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	0f 92       	push	r0
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    2e98:	eb e2       	ldi	r30, 0x2B	; 43
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	80 72       	andi	r24, 0x20	; 32
    2ea4:	90 70       	andi	r25, 0x00	; 0
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	b9 f3       	breq	.-18     	; 0x2e98 <UART_sendByte+0xc>
	}
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */
	UDR = data;
    2eaa:	ec e2       	ldi	r30, 0x2C	; 44
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <UART_recieveByte>:

uint8 UART_recieveByte(void) {
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    2ec2:	eb e2       	ldi	r30, 0x2B	; 43
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	88 23       	and	r24, r24
    2eca:	dc f7       	brge	.-10     	; 0x2ec2 <UART_recieveByte+0x8>
	}
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	 will be cleared after read this data */
	return UDR;
    2ecc:	ec e2       	ldi	r30, 0x2C	; 44
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
}
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <UART_sendString>:

void UART_sendString(const uint8 *Str) {
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <UART_sendString+0x6>
    2ede:	0f 92       	push	r0
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	9b 83       	std	Y+3, r25	; 0x03
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ee8:	19 82       	std	Y+1, r1	; 0x01
    2eea:	0e c0       	rjmp	.+28     	; 0x2f08 <UART_sendString+0x30>
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	28 2f       	mov	r18, r24
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	e2 0f       	add	r30, r18
    2efa:	f3 1f       	adc	r31, r19
    2efc:	80 81       	ld	r24, Z
    2efe:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
		i++;
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	fc 01       	movw	r30, r24
    2f14:	e2 0f       	add	r30, r18
    2f16:	f3 1f       	adc	r31, r19
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 23       	and	r24, r24
    2f1c:	39 f7       	brne	.-50     	; 0x2eec <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <UART_receiveString>:

void UART_receiveString(uint8 *Str) {
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <UART_receiveString+0xa>
    2f34:	0f 92       	push	r0
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	9b 83       	std	Y+3, r25	; 0x03
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f3e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	8c 01       	movw	r16, r24
    2f4c:	02 0f       	add	r16, r18
    2f4e:	13 1f       	adc	r17, r19
    2f50:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    2f54:	f8 01       	movw	r30, r16
    2f56:	80 83       	st	Z, r24
    2f58:	0f c0       	rjmp	.+30     	; 0x2f78 <UART_receiveString+0x4e>
	while (Str[i] != '#') {
		i++;
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	8c 01       	movw	r16, r24
    2f6c:	02 0f       	add	r16, r18
    2f6e:	13 1f       	adc	r17, r19
    2f70:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    2f74:	f8 01       	movw	r30, r16
    2f76:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while (Str[i] != '#') {
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	fc 01       	movw	r30, r24
    2f84:	e2 0f       	add	r30, r18
    2f86:	f3 1f       	adc	r31, r19
    2f88:	80 81       	ld	r24, Z
    2f8a:	83 32       	cpi	r24, 0x23	; 35
    2f8c:	31 f7       	brne	.-52     	; 0x2f5a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	9b 81       	ldd	r25, Y+3	; 0x03
    2f98:	fc 01       	movw	r30, r24
    2f9a:	e2 0f       	add	r30, r18
    2f9c:	f3 1f       	adc	r31, r19
    2f9e:	10 82       	st	Z, r1
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <__vector_11>:

ISR(USART_RXC_vect) {
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	2f 93       	push	r18
    2fbc:	3f 93       	push	r19
    2fbe:	4f 93       	push	r20
    2fc0:	5f 93       	push	r21
    2fc2:	6f 93       	push	r22
    2fc4:	7f 93       	push	r23
    2fc6:	8f 93       	push	r24
    2fc8:	9f 93       	push	r25
    2fca:	af 93       	push	r26
    2fcc:	bf 93       	push	r27
    2fce:	ef 93       	push	r30
    2fd0:	ff 93       	push	r31
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	0f 92       	push	r0
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
	uint8 key = UART_recieveByte();
    2fdc:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    2fe0:	89 83       	std	Y+1, r24	; 0x01
	if (key == CORRECT_PASSWORD) {
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	8e 30       	cpi	r24, 0x0E	; 14
    2fe6:	21 f4       	brne	.+8      	; 0x2ff0 <__vector_11+0x40>
		g_choice = 1;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	80 93 c2 01 	sts	0x01C2, r24
    2fee:	14 c0       	rjmp	.+40     	; 0x3018 <__vector_11+0x68>

	} else if (key == WRONG_PASSWORD) {
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	8f 30       	cpi	r24, 0x0F	; 15
    2ff4:	21 f4       	brne	.+8      	; 0x2ffe <__vector_11+0x4e>
		g_choice = 2;
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	80 93 c2 01 	sts	0x01C2, r24
    2ffc:	0d c0       	rjmp	.+26     	; 0x3018 <__vector_11+0x68>
	}
	else if(key == PRECEDE_CHANGE)
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	21 f4       	brne	.+8      	; 0x300c <__vector_11+0x5c>
	{
		g_choice = 3;
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	80 93 c2 01 	sts	0x01C2, r24
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <__vector_11+0x68>
	}
	else if(key == DONT_CHANGE)
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	82 30       	cpi	r24, 0x02	; 2
    3010:	19 f4       	brne	.+6      	; 0x3018 <__vector_11+0x68>
	{
		g_choice = 4;
    3012:	84 e0       	ldi	r24, 0x04	; 4
    3014:	80 93 c2 01 	sts	0x01C2, r24
	}

}
    3018:	0f 90       	pop	r0
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	ff 91       	pop	r31
    3020:	ef 91       	pop	r30
    3022:	bf 91       	pop	r27
    3024:	af 91       	pop	r26
    3026:	9f 91       	pop	r25
    3028:	8f 91       	pop	r24
    302a:	7f 91       	pop	r23
    302c:	6f 91       	pop	r22
    302e:	5f 91       	pop	r21
    3030:	4f 91       	pop	r20
    3032:	3f 91       	pop	r19
    3034:	2f 91       	pop	r18
    3036:	0f 90       	pop	r0
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	0f 90       	pop	r0
    303c:	1f 90       	pop	r1
    303e:	18 95       	reti

00003040 <__prologue_saves__>:
    3040:	2f 92       	push	r2
    3042:	3f 92       	push	r3
    3044:	4f 92       	push	r4
    3046:	5f 92       	push	r5
    3048:	6f 92       	push	r6
    304a:	7f 92       	push	r7
    304c:	8f 92       	push	r8
    304e:	9f 92       	push	r9
    3050:	af 92       	push	r10
    3052:	bf 92       	push	r11
    3054:	cf 92       	push	r12
    3056:	df 92       	push	r13
    3058:	ef 92       	push	r14
    305a:	ff 92       	push	r15
    305c:	0f 93       	push	r16
    305e:	1f 93       	push	r17
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	ca 1b       	sub	r28, r26
    306a:	db 0b       	sbc	r29, r27
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	09 94       	ijmp

00003078 <__epilogue_restores__>:
    3078:	2a 88       	ldd	r2, Y+18	; 0x12
    307a:	39 88       	ldd	r3, Y+17	; 0x11
    307c:	48 88       	ldd	r4, Y+16	; 0x10
    307e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3080:	6e 84       	ldd	r6, Y+14	; 0x0e
    3082:	7d 84       	ldd	r7, Y+13	; 0x0d
    3084:	8c 84       	ldd	r8, Y+12	; 0x0c
    3086:	9b 84       	ldd	r9, Y+11	; 0x0b
    3088:	aa 84       	ldd	r10, Y+10	; 0x0a
    308a:	b9 84       	ldd	r11, Y+9	; 0x09
    308c:	c8 84       	ldd	r12, Y+8	; 0x08
    308e:	df 80       	ldd	r13, Y+7	; 0x07
    3090:	ee 80       	ldd	r14, Y+6	; 0x06
    3092:	fd 80       	ldd	r15, Y+5	; 0x05
    3094:	0c 81       	ldd	r16, Y+4	; 0x04
    3096:	1b 81       	ldd	r17, Y+3	; 0x03
    3098:	aa 81       	ldd	r26, Y+2	; 0x02
    309a:	b9 81       	ldd	r27, Y+1	; 0x01
    309c:	ce 0f       	add	r28, r30
    309e:	d1 1d       	adc	r29, r1
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	ed 01       	movw	r28, r26
    30ac:	08 95       	ret

000030ae <strcmp>:
    30ae:	fb 01       	movw	r30, r22
    30b0:	dc 01       	movw	r26, r24
    30b2:	8d 91       	ld	r24, X+
    30b4:	01 90       	ld	r0, Z+
    30b6:	80 19       	sub	r24, r0
    30b8:	01 10       	cpse	r0, r1
    30ba:	d9 f3       	breq	.-10     	; 0x30b2 <strcmp+0x4>
    30bc:	99 0b       	sbc	r25, r25
    30be:	08 95       	ret

000030c0 <itoa>:
    30c0:	fb 01       	movw	r30, r22
    30c2:	9f 01       	movw	r18, r30
    30c4:	e8 94       	clt
    30c6:	42 30       	cpi	r20, 0x02	; 2
    30c8:	c4 f0       	brlt	.+48     	; 0x30fa <itoa+0x3a>
    30ca:	45 32       	cpi	r20, 0x25	; 37
    30cc:	b4 f4       	brge	.+44     	; 0x30fa <itoa+0x3a>
    30ce:	4a 30       	cpi	r20, 0x0A	; 10
    30d0:	29 f4       	brne	.+10     	; 0x30dc <itoa+0x1c>
    30d2:	97 fb       	bst	r25, 7
    30d4:	1e f4       	brtc	.+6      	; 0x30dc <itoa+0x1c>
    30d6:	90 95       	com	r25
    30d8:	81 95       	neg	r24
    30da:	9f 4f       	sbci	r25, 0xFF	; 255
    30dc:	64 2f       	mov	r22, r20
    30de:	77 27       	eor	r23, r23
    30e0:	0e 94 91 18 	call	0x3122	; 0x3122 <__udivmodhi4>
    30e4:	80 5d       	subi	r24, 0xD0	; 208
    30e6:	8a 33       	cpi	r24, 0x3A	; 58
    30e8:	0c f0       	brlt	.+2      	; 0x30ec <itoa+0x2c>
    30ea:	89 5d       	subi	r24, 0xD9	; 217
    30ec:	81 93       	st	Z+, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	00 97       	sbiw	r24, 0x00	; 0
    30f2:	a1 f7       	brne	.-24     	; 0x30dc <itoa+0x1c>
    30f4:	16 f4       	brtc	.+4      	; 0x30fa <itoa+0x3a>
    30f6:	5d e2       	ldi	r21, 0x2D	; 45
    30f8:	51 93       	st	Z+, r21
    30fa:	10 82       	st	Z, r1
    30fc:	c9 01       	movw	r24, r18
    30fe:	0c 94 81 18 	jmp	0x3102	; 0x3102 <strrev>

00003102 <strrev>:
    3102:	dc 01       	movw	r26, r24
    3104:	fc 01       	movw	r30, r24
    3106:	67 2f       	mov	r22, r23
    3108:	71 91       	ld	r23, Z+
    310a:	77 23       	and	r23, r23
    310c:	e1 f7       	brne	.-8      	; 0x3106 <strrev+0x4>
    310e:	32 97       	sbiw	r30, 0x02	; 2
    3110:	04 c0       	rjmp	.+8      	; 0x311a <strrev+0x18>
    3112:	7c 91       	ld	r23, X
    3114:	6d 93       	st	X+, r22
    3116:	70 83       	st	Z, r23
    3118:	62 91       	ld	r22, -Z
    311a:	ae 17       	cp	r26, r30
    311c:	bf 07       	cpc	r27, r31
    311e:	c8 f3       	brcs	.-14     	; 0x3112 <strrev+0x10>
    3120:	08 95       	ret

00003122 <__udivmodhi4>:
    3122:	aa 1b       	sub	r26, r26
    3124:	bb 1b       	sub	r27, r27
    3126:	51 e1       	ldi	r21, 0x11	; 17
    3128:	07 c0       	rjmp	.+14     	; 0x3138 <__udivmodhi4_ep>

0000312a <__udivmodhi4_loop>:
    312a:	aa 1f       	adc	r26, r26
    312c:	bb 1f       	adc	r27, r27
    312e:	a6 17       	cp	r26, r22
    3130:	b7 07       	cpc	r27, r23
    3132:	10 f0       	brcs	.+4      	; 0x3138 <__udivmodhi4_ep>
    3134:	a6 1b       	sub	r26, r22
    3136:	b7 0b       	sbc	r27, r23

00003138 <__udivmodhi4_ep>:
    3138:	88 1f       	adc	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	5a 95       	dec	r21
    313e:	a9 f7       	brne	.-22     	; 0x312a <__udivmodhi4_loop>
    3140:	80 95       	com	r24
    3142:	90 95       	com	r25
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	08 95       	ret

0000314a <_exit>:
    314a:	f8 94       	cli

0000314c <__stop_program>:
    314c:	ff cf       	rjmp	.-2      	; 0x314c <__stop_program>
