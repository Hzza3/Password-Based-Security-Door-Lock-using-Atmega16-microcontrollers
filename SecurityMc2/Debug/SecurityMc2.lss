
SecurityMc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002d10  00002da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080007a  0080007a  00002dbe  2**0
                  ALLOC
  3 .stab         0000300c  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb3  00000000  00000000  00005dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000702f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a910  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000acfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
volatile uint8 recived_new[6];
volatile uint8 recived_open[6];
volatile uint8 recived_change[6];
volatile uint8 second = 0;
int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a7 97       	sbiw	r28, 0x27	; 39
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	sint8 i = 0;
     b5a:	18 a2       	std	Y+32, r1	; 0x20
	uint8 buffer[6];
	uint8 compare;
	uint8 write = 0, read = 0;
     b5c:	1e 8e       	std	Y+30, r1	; 0x1e
     b5e:	1f a2       	std	Y+39, r1	; 0x27
	uint8 wrong_counter = 0;
     b60:	1d 8e       	std	Y+29, r1	; 0x1d

	UART_init();
     b62:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UART_init>
	EEPROM_Init();
     b66:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_Init>
	DCMOTOR_Init();
     b6a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DCMOTOR_Init>
	sei();
     b6e:	78 94       	sei

	DDRD |= (1 << PD2);
     b70:	a1 e3       	ldi	r26, 0x31	; 49
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e1 e3       	ldi	r30, 0x31	; 49
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	84 60       	ori	r24, 0x04	; 4
     b7c:	8c 93       	st	X, r24
	while (1)
	{
		while (g_choice == 0)
     b7e:	80 91 7a 00 	lds	r24, 0x007A
     b82:	88 23       	and	r24, r24
     b84:	e1 f3       	breq	.-8      	; 0xb7e <main+0x38>
			;
		compare = 5;
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	8f 8f       	std	Y+31, r24	; 0x1f
		if (g_choice == 1)
     b8a:	80 91 7a 00 	lds	r24, 0x007A
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	09 f0       	breq	.+2      	; 0xb94 <main+0x4e>
     b92:	98 c0       	rjmp	.+304    	; 0xcc4 <main+0x17e>
		{
			g_choice = 0;
     b94:	10 92 7a 00 	sts	0x007A, r1
     b98:	89 c0       	rjmp	.+274    	; 0xcac <main+0x166>
			while (recived_new[i] != '\0')
			{
				write = recived_new[i];
     b9a:	88 a1       	ldd	r24, Y+32	; 0x20
     b9c:	99 27       	eor	r25, r25
     b9e:	87 fd       	sbrc	r24, 7
     ba0:	90 95       	com	r25
     ba2:	fc 01       	movw	r30, r24
     ba4:	ed 57       	subi	r30, 0x7D	; 125
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	80 81       	ld	r24, Z
     baa:	8e 8f       	std	Y+30, r24	; 0x1e
				EEPROM_Write_Byte(0xAE, EEPROMSTART + i, write);
     bac:	88 a1       	ldd	r24, Y+32	; 0x20
     bae:	99 27       	eor	r25, r25
     bb0:	87 fd       	sbrc	r24, 7
     bb2:	90 95       	com	r25
     bb4:	0a 96       	adiw	r24, 0x0a	; 10
     bb6:	9c 01       	movw	r18, r24
     bb8:	8e ea       	ldi	r24, 0xAE	; 174
     bba:	b9 01       	movw	r22, r18
     bbc:	4e 8d       	ldd	r20, Y+30	; 0x1e
     bbe:	0e 94 b9 07 	call	0xf72	; 0xf72 <EEPROM_Write_Byte>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a8 e4       	ldi	r26, 0x48	; 72
     bc8:	b2 e4       	ldi	r27, 0x42	; 66
     bca:	89 8f       	std	Y+25, r24	; 0x19
     bcc:	9a 8f       	std	Y+26, r25	; 0x1a
     bce:	ab 8f       	std	Y+27, r26	; 0x1b
     bd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd2:	69 8d       	ldd	r22, Y+25	; 0x19
     bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4a ef       	ldi	r20, 0xFA	; 250
     be0:	54 e4       	ldi	r21, 0x44	; 68
     be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	8d 8b       	std	Y+21, r24	; 0x15
     bec:	9e 8b       	std	Y+22, r25	; 0x16
     bee:	af 8b       	std	Y+23, r26	; 0x17
     bf0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bf2:	6d 89       	ldd	r22, Y+21	; 0x15
     bf4:	7e 89       	ldd	r23, Y+22	; 0x16
     bf6:	8f 89       	ldd	r24, Y+23	; 0x17
     bf8:	98 8d       	ldd	r25, Y+24	; 0x18
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e8       	ldi	r20, 0x80	; 128
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c06:	88 23       	and	r24, r24
     c08:	2c f4       	brge	.+10     	; 0xc14 <main+0xce>
		__ticks = 1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9c 8b       	std	Y+20, r25	; 0x14
     c10:	8b 8b       	std	Y+19, r24	; 0x13
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <main+0x14c>
	else if (__tmp > 65535)
     c14:	6d 89       	ldd	r22, Y+21	; 0x15
     c16:	7e 89       	ldd	r23, Y+22	; 0x16
     c18:	8f 89       	ldd	r24, Y+23	; 0x17
     c1a:	98 8d       	ldd	r25, Y+24	; 0x18
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	3f ef       	ldi	r19, 0xFF	; 255
     c20:	4f e7       	ldi	r20, 0x7F	; 127
     c22:	57 e4       	ldi	r21, 0x47	; 71
     c24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c28:	18 16       	cp	r1, r24
     c2a:	4c f5       	brge	.+82     	; 0xc7e <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2c:	69 8d       	ldd	r22, Y+25	; 0x19
     c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c32:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e2       	ldi	r20, 0x20	; 32
     c3a:	51 e4       	ldi	r21, 0x41	; 65
     c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	bc 01       	movw	r22, r24
     c46:	cd 01       	movw	r24, r26
     c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	0f c0       	rjmp	.+30     	; 0xc74 <main+0x12e>
     c56:	88 ec       	ldi	r24, 0xC8	; 200
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	9a 8b       	std	Y+18, r25	; 0x12
     c5c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5e:	89 89       	ldd	r24, Y+17	; 0x11
     c60:	9a 89       	ldd	r25, Y+18	; 0x12
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <main+0x11c>
     c66:	9a 8b       	std	Y+18, r25	; 0x12
     c68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6a:	8b 89       	ldd	r24, Y+19	; 0x13
     c6c:	9c 89       	ldd	r25, Y+20	; 0x14
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	9c 8b       	std	Y+20, r25	; 0x14
     c72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c74:	8b 89       	ldd	r24, Y+19	; 0x13
     c76:	9c 89       	ldd	r25, Y+20	; 0x14
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	69 f7       	brne	.-38     	; 0xc56 <main+0x110>
     c7c:	14 c0       	rjmp	.+40     	; 0xca6 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7e:	6d 89       	ldd	r22, Y+21	; 0x15
     c80:	7e 89       	ldd	r23, Y+22	; 0x16
     c82:	8f 89       	ldd	r24, Y+23	; 0x17
     c84:	98 8d       	ldd	r25, Y+24	; 0x18
     c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	9c 8b       	std	Y+20, r25	; 0x14
     c90:	8b 8b       	std	Y+19, r24	; 0x13
     c92:	8b 89       	ldd	r24, Y+19	; 0x13
     c94:	9c 89       	ldd	r25, Y+20	; 0x14
     c96:	98 8b       	std	Y+16, r25	; 0x10
     c98:	8f 87       	std	Y+15, r24	; 0x0f
     c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9c:	98 89       	ldd	r25, Y+16	; 0x10
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <main+0x158>
     ca2:	98 8b       	std	Y+16, r25	; 0x10
     ca4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				i++;
     ca6:	88 a1       	ldd	r24, Y+32	; 0x20
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	88 a3       	std	Y+32, r24	; 0x20
			;
		compare = 5;
		if (g_choice == 1)
		{
			g_choice = 0;
			while (recived_new[i] != '\0')
     cac:	88 a1       	ldd	r24, Y+32	; 0x20
     cae:	99 27       	eor	r25, r25
     cb0:	87 fd       	sbrc	r24, 7
     cb2:	90 95       	com	r25
     cb4:	fc 01       	movw	r30, r24
     cb6:	ed 57       	subi	r30, 0x7D	; 125
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <main+0x17c>
     cc0:	6c cf       	rjmp	.-296    	; 0xb9a <main+0x54>
     cc2:	5d cf       	rjmp	.-326    	; 0xb7e <main+0x38>
			 }
			 buffer[5] = '\0';
			 compare = strcmp(buffer, recived_new);
			 if(compare == 0) PORTB = 0b00001111;*/
		}
		else if (g_choice == 2)
     cc4:	80 91 7a 00 	lds	r24, 0x007A
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	09 f0       	breq	.+2      	; 0xcce <main+0x188>
     ccc:	6f c0       	rjmp	.+222    	; 0xdac <main+0x266>
		{
			g_choice = 0;
     cce:	10 92 7a 00 	sts	0x007A, r1
			for (i = 0; i < 5; i++)
     cd2:	18 a2       	std	Y+32, r1	; 0x20
     cd4:	1c c0       	rjmp	.+56     	; 0xd0e <main+0x1c8>
			{
				EEPROM_Read_Byte(0xAE, EEPROMSTART + i, &read);
     cd6:	88 a1       	ldd	r24, Y+32	; 0x20
     cd8:	99 27       	eor	r25, r25
     cda:	87 fd       	sbrc	r24, 7
     cdc:	90 95       	com	r25
     cde:	0a 96       	adiw	r24, 0x0a	; 10
     ce0:	9c 01       	movw	r18, r24
     ce2:	ae 01       	movw	r20, r28
     ce4:	49 5d       	subi	r20, 0xD9	; 217
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
     ce8:	8e ea       	ldi	r24, 0xAE	; 174
     cea:	b9 01       	movw	r22, r18
     cec:	0e 94 03 08 	call	0x1006	; 0x1006 <EEPROM_Read_Byte>
				buffer[i] = read;
     cf0:	88 a1       	ldd	r24, Y+32	; 0x20
     cf2:	28 2f       	mov	r18, r24
     cf4:	33 27       	eor	r19, r19
     cf6:	27 fd       	sbrc	r18, 7
     cf8:	30 95       	com	r19
     cfa:	4f a1       	ldd	r20, Y+39	; 0x27
     cfc:	ce 01       	movw	r24, r28
     cfe:	81 96       	adiw	r24, 0x21	; 33
     d00:	fc 01       	movw	r30, r24
     d02:	e2 0f       	add	r30, r18
     d04:	f3 1f       	adc	r31, r19
     d06:	40 83       	st	Z, r20
			 if(compare == 0) PORTB = 0b00001111;*/
		}
		else if (g_choice == 2)
		{
			g_choice = 0;
			for (i = 0; i < 5; i++)
     d08:	88 a1       	ldd	r24, Y+32	; 0x20
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	88 a3       	std	Y+32, r24	; 0x20
     d0e:	88 a1       	ldd	r24, Y+32	; 0x20
     d10:	85 30       	cpi	r24, 0x05	; 5
     d12:	0c f3       	brlt	.-62     	; 0xcd6 <main+0x190>
			{
				EEPROM_Read_Byte(0xAE, EEPROMSTART + i, &read);
				buffer[i] = read;
			}
			buffer[5] = '\0';
     d14:	1e a2       	std	Y+38, r1	; 0x26
			compare = strcmp(recived_open, buffer);
     d16:	8d e7       	ldi	r24, 0x7D	; 125
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9e 01       	movw	r18, r28
     d1c:	2f 5d       	subi	r18, 0xDF	; 223
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	b9 01       	movw	r22, r18
     d22:	0e 94 38 16 	call	0x2c70	; 0x2c70 <strcmp>
     d26:	8f 8f       	std	Y+31, r24	; 0x1f
			if (compare == 0)
     d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d2a:	88 23       	and	r24, r24
     d2c:	e9 f4       	brne	.+58     	; 0xd68 <main+0x222>
			{
				UART_sendByte(CORRECT_PASSWORD);
     d2e:	8e e0       	ldi	r24, 0x0E	; 14
     d30:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
				//Open the door
				DCMOTOR_onAntiClockWise(30000);
     d34:	80 e3       	ldi	r24, 0x30	; 48
     d36:	95 e7       	ldi	r25, 0x75	; 117
     d38:	0e 94 bf 08 	call	0x117e	; 0x117e <DCMOTOR_onAntiClockWise>
				timer0_init_normal_mode();
     d3c:	0e 94 c4 14 	call	0x2988	; 0x2988 <timer0_init_normal_mode>
				while (second != 6)
     d40:	80 91 7b 00 	lds	r24, 0x007B
     d44:	86 30       	cpi	r24, 0x06	; 6
     d46:	e1 f7       	brne	.-8      	; 0xd40 <main+0x1fa>
					;
				second = 0;
     d48:	10 92 7b 00 	sts	0x007B, r1

				DCMOTOR_onClockWise(30000);
     d4c:	80 e3       	ldi	r24, 0x30	; 48
     d4e:	95 e7       	ldi	r25, 0x75	; 117
     d50:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DCMOTOR_onClockWise>
				while (second != 6)
     d54:	80 91 7b 00 	lds	r24, 0x007B
     d58:	86 30       	cpi	r24, 0x06	; 6
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <main+0x20e>
					;
				second = 0;
     d5c:	10 92 7b 00 	sts	0x007B, r1

				DCMOTOR_stop();
     d60:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DCMOTOR_stop>
				wrong_counter = 0;
     d64:	1d 8e       	std	Y+29, r1	; 0x1d
     d66:	0b cf       	rjmp	.-490    	; 0xb7e <main+0x38>
			}
			else
			{
				UART_sendByte(WRONG_PASSWORD);
     d68:	8f e0       	ldi	r24, 0x0F	; 15
     d6a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
				wrong_counter++;
     d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	8d 8f       	std	Y+29, r24	; 0x1d
				if (wrong_counter == 3)
     d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	09 f0       	breq	.+2      	; 0xd7c <main+0x236>
     d7a:	01 cf       	rjmp	.-510    	; 0xb7e <main+0x38>
				{
					PORTD |= (1 << PD2);
     d7c:	a2 e3       	ldi	r26, 0x32	; 50
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e2 e3       	ldi	r30, 0x32	; 50
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	84 60       	ori	r24, 0x04	; 4
     d88:	8c 93       	st	X, r24
					timer0_init_normal_mode();
     d8a:	0e 94 c4 14 	call	0x2988	; 0x2988 <timer0_init_normal_mode>
					while (second != 45)
     d8e:	80 91 7b 00 	lds	r24, 0x007B
     d92:	8d 32       	cpi	r24, 0x2D	; 45
     d94:	e1 f7       	brne	.-8      	; 0xd8e <main+0x248>
						;
					second = 0;
     d96:	10 92 7b 00 	sts	0x007B, r1
					PORTD &= ~(1 << PD2);
     d9a:	a2 e3       	ldi	r26, 0x32	; 50
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e2 e3       	ldi	r30, 0x32	; 50
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8b 7f       	andi	r24, 0xFB	; 251
     da6:	8c 93       	st	X, r24
					wrong_counter = 0;
     da8:	1d 8e       	std	Y+29, r1	; 0x1d
     daa:	e9 ce       	rjmp	.-558    	; 0xb7e <main+0x38>
				}
			}

		}
		else if (g_choice == 3)
     dac:	80 91 7a 00 	lds	r24, 0x007A
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	c1 f5       	brne	.+112    	; 0xe24 <main+0x2de>
		{
			g_choice = 0;
     db4:	10 92 7a 00 	sts	0x007A, r1
			for (i = 0; i < 5; i++)
     db8:	18 a2       	std	Y+32, r1	; 0x20
     dba:	1c c0       	rjmp	.+56     	; 0xdf4 <main+0x2ae>
			{
				EEPROM_Read_Byte(0xAE, EEPROMSTART + i, &read);
     dbc:	88 a1       	ldd	r24, Y+32	; 0x20
     dbe:	99 27       	eor	r25, r25
     dc0:	87 fd       	sbrc	r24, 7
     dc2:	90 95       	com	r25
     dc4:	0a 96       	adiw	r24, 0x0a	; 10
     dc6:	9c 01       	movw	r18, r24
     dc8:	ae 01       	movw	r20, r28
     dca:	49 5d       	subi	r20, 0xD9	; 217
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	8e ea       	ldi	r24, 0xAE	; 174
     dd0:	b9 01       	movw	r22, r18
     dd2:	0e 94 03 08 	call	0x1006	; 0x1006 <EEPROM_Read_Byte>
				buffer[i] = read;
     dd6:	88 a1       	ldd	r24, Y+32	; 0x20
     dd8:	28 2f       	mov	r18, r24
     dda:	33 27       	eor	r19, r19
     ddc:	27 fd       	sbrc	r18, 7
     dde:	30 95       	com	r19
     de0:	4f a1       	ldd	r20, Y+39	; 0x27
     de2:	ce 01       	movw	r24, r28
     de4:	81 96       	adiw	r24, 0x21	; 33
     de6:	fc 01       	movw	r30, r24
     de8:	e2 0f       	add	r30, r18
     dea:	f3 1f       	adc	r31, r19
     dec:	40 83       	st	Z, r20

		}
		else if (g_choice == 3)
		{
			g_choice = 0;
			for (i = 0; i < 5; i++)
     dee:	88 a1       	ldd	r24, Y+32	; 0x20
     df0:	8f 5f       	subi	r24, 0xFF	; 255
     df2:	88 a3       	std	Y+32, r24	; 0x20
     df4:	88 a1       	ldd	r24, Y+32	; 0x20
     df6:	85 30       	cpi	r24, 0x05	; 5
     df8:	0c f3       	brlt	.-62     	; 0xdbc <main+0x276>
			{
				EEPROM_Read_Byte(0xAE, EEPROMSTART + i, &read);
				buffer[i] = read;
			}
			buffer[5] = '\0';
     dfa:	1e a2       	std	Y+38, r1	; 0x26
			compare = strcmp(recived_change, buffer);
     dfc:	89 e8       	ldi	r24, 0x89	; 137
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9e 01       	movw	r18, r28
     e02:	2f 5d       	subi	r18, 0xDF	; 223
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	b9 01       	movw	r22, r18
     e08:	0e 94 38 16 	call	0x2c70	; 0x2c70 <strcmp>
     e0c:	8f 8f       	std	Y+31, r24	; 0x1f
			if (compare == 0)
     e0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e10:	88 23       	and	r24, r24
     e12:	21 f4       	brne	.+8      	; 0xe1c <main+0x2d6>
			{
				UART_sendByte(PRECEDE_CHANGE);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
     e1a:	b1 ce       	rjmp	.-670    	; 0xb7e <main+0x38>
			}
			else
			{
				UART_sendByte(DONT_CHANGE);
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
     e22:	ad ce       	rjmp	.-678    	; 0xb7e <main+0x38>
			}
		}
		else if (g_choice == 4)
     e24:	80 91 7a 00 	lds	r24, 0x007A
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	09 f0       	breq	.+2      	; 0xe2e <main+0x2e8>
     e2c:	a8 ce       	rjmp	.-688    	; 0xb7e <main+0x38>
		{
			g_choice = 0;
     e2e:	10 92 7a 00 	sts	0x007A, r1
			i = 0;
     e32:	18 a2       	std	Y+32, r1	; 0x20
     e34:	89 c0       	rjmp	.+274    	; 0xf48 <main+0x402>
			while (recived_change[i] != '\0')
			{
				write = recived_change[i];
     e36:	88 a1       	ldd	r24, Y+32	; 0x20
     e38:	99 27       	eor	r25, r25
     e3a:	87 fd       	sbrc	r24, 7
     e3c:	90 95       	com	r25
     e3e:	fc 01       	movw	r30, r24
     e40:	e7 57       	subi	r30, 0x77	; 119
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	8e 8f       	std	Y+30, r24	; 0x1e
				EEPROM_Write_Byte(0xAE, EEPROMSTART + i, write);
     e48:	88 a1       	ldd	r24, Y+32	; 0x20
     e4a:	99 27       	eor	r25, r25
     e4c:	87 fd       	sbrc	r24, 7
     e4e:	90 95       	com	r25
     e50:	0a 96       	adiw	r24, 0x0a	; 10
     e52:	9c 01       	movw	r18, r24
     e54:	8e ea       	ldi	r24, 0xAE	; 174
     e56:	b9 01       	movw	r22, r18
     e58:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e5a:	0e 94 b9 07 	call	0xf72	; 0xf72 <EEPROM_Write_Byte>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	a8 e4       	ldi	r26, 0x48	; 72
     e64:	b2 e4       	ldi	r27, 0x42	; 66
     e66:	8b 87       	std	Y+11, r24	; 0x0b
     e68:	9c 87       	std	Y+12, r25	; 0x0c
     e6a:	ad 87       	std	Y+13, r26	; 0x0d
     e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e70:	7c 85       	ldd	r23, Y+12	; 0x0c
     e72:	8d 85       	ldd	r24, Y+13	; 0x0d
     e74:	9e 85       	ldd	r25, Y+14	; 0x0e
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4a ef       	ldi	r20, 0xFA	; 250
     e7c:	54 e4       	ldi	r21, 0x44	; 68
     e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	8f 83       	std	Y+7, r24	; 0x07
     e88:	98 87       	std	Y+8, r25	; 0x08
     e8a:	a9 87       	std	Y+9, r26	; 0x09
     e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <main+0x36a>
		__ticks = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9e 83       	std	Y+6, r25	; 0x06
     eac:	8d 83       	std	Y+5, r24	; 0x05
     eae:	3f c0       	rjmp	.+126    	; 0xf2e <main+0x3e8>
	else if (__tmp > 65535)
     eb0:	6f 81       	ldd	r22, Y+7	; 0x07
     eb2:	78 85       	ldd	r23, Y+8	; 0x08
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	4f e7       	ldi	r20, 0x7F	; 127
     ebe:	57 e4       	ldi	r21, 0x47	; 71
     ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec4:	18 16       	cp	r1, r24
     ec6:	4c f5       	brge	.+82     	; 0xf1a <main+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e2       	ldi	r20, 0x20	; 32
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	9e 83       	std	Y+6, r25	; 0x06
     eee:	8d 83       	std	Y+5, r24	; 0x05
     ef0:	0f c0       	rjmp	.+30     	; 0xf10 <main+0x3ca>
     ef2:	88 ec       	ldi	r24, 0xC8	; 200
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <main+0x3b8>
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f06:	8d 81       	ldd	r24, Y+5	; 0x05
     f08:	9e 81       	ldd	r25, Y+6	; 0x06
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	69 f7       	brne	.-38     	; 0xef2 <main+0x3ac>
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <main+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1a:	6f 81       	ldd	r22, Y+7	; 0x07
     f1c:	78 85       	ldd	r23, Y+8	; 0x08
     f1e:	89 85       	ldd	r24, Y+9	; 0x09
     f20:	9a 85       	ldd	r25, Y+10	; 0x0a
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <main+0x3f4>
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				i++;
     f42:	88 a1       	ldd	r24, Y+32	; 0x20
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	88 a3       	std	Y+32, r24	; 0x20
		}
		else if (g_choice == 4)
		{
			g_choice = 0;
			i = 0;
			while (recived_change[i] != '\0')
     f48:	88 a1       	ldd	r24, Y+32	; 0x20
     f4a:	99 27       	eor	r25, r25
     f4c:	87 fd       	sbrc	r24, 7
     f4e:	90 95       	com	r25
     f50:	fc 01       	movw	r30, r24
     f52:	e7 57       	subi	r30, 0x77	; 119
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	88 23       	and	r24, r24
     f5a:	09 f0       	breq	.+2      	; 0xf5e <main+0x418>
     f5c:	6c cf       	rjmp	.-296    	; 0xe36 <main+0x2f0>
     f5e:	0f ce       	rjmp	.-994    	; 0xb7e <main+0x38>

00000f60 <EEPROM_Init>:
 * Created: 3/12/2014 12:06:35 PM
 * Author: Mohamed Tarek
 */
#include "Ex_EEPROM_I2C_24c256.h"

void EEPROM_Init(void) {
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	TWI_Init(); // just initialize the TWI module inside the MC
     f68:	0e 94 0d 09 	call	0x121a	; 0x121a <TWI_Init>
}
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <EEPROM_Write_Byte>:

uint8 EEPROM_Write_Byte(unsigned char u8Dev_addr, unsigned short u16Byte_addr,
		unsigned char u8data) {
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <EEPROM_Write_Byte+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <EEPROM_Write_Byte+0x8>
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	7b 83       	std	Y+3, r23	; 0x03
     f84:	6a 83       	std	Y+2, r22	; 0x02
     f86:	4c 83       	std	Y+4, r20	; 0x04
	TWI_Start();
     f88:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
     f8c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
     f90:	88 30       	cpi	r24, 0x08	; 8
     f92:	11 f0       	breq	.+4      	; 0xf98 <EEPROM_Write_Byte+0x26>
		return ERROR;
     f94:	1d 82       	std	Y+5, r1	; 0x05
     f96:	2e c0       	rjmp	.+92     	; 0xff4 <EEPROM_Write_Byte+0x82>

	//write the device address and R/W=0 (write)
	TWI_Write(u8Dev_addr);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
     f9e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
     fa2:	88 31       	cpi	r24, 0x18	; 24
     fa4:	11 f0       	breq	.+4      	; 0xfaa <EEPROM_Write_Byte+0x38>
		return ERROR;
     fa6:	1d 82       	std	Y+5, r1	; 0x05
     fa8:	25 c0       	rjmp	.+74     	; 0xff4 <EEPROM_Write_Byte+0x82>

	//send the required first word location address
	TWI_Write((uint8) (u16Byte_addr >> 7));
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	88 0f       	add	r24, r24
     fb0:	89 2f       	mov	r24, r25
     fb2:	88 1f       	adc	r24, r24
     fb4:	99 0b       	sbc	r25, r25
     fb6:	91 95       	neg	r25
     fb8:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
     fbc:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
     fc0:	88 32       	cpi	r24, 0x28	; 40
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <EEPROM_Write_Byte+0x56>
		return ERROR;
     fc4:	1d 82       	std	Y+5, r1	; 0x05
     fc6:	16 c0       	rjmp	.+44     	; 0xff4 <EEPROM_Write_Byte+0x82>
	//send the required second word location address
	TWI_Write((uint8) (u16Byte_addr));
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
     fce:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
     fd2:	88 32       	cpi	r24, 0x28	; 40
     fd4:	11 f0       	breq	.+4      	; 0xfda <EEPROM_Write_Byte+0x68>
		return ERROR;
     fd6:	1d 82       	std	Y+5, r1	; 0x05
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <EEPROM_Write_Byte+0x82>
	//write byte to eeprom
	TWI_Write(u8data);
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
     fe0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
     fe4:	88 32       	cpi	r24, 0x28	; 40
     fe6:	11 f0       	breq	.+4      	; 0xfec <EEPROM_Write_Byte+0x7a>
		return ERROR;
     fe8:	1d 82       	std	Y+5, r1	; 0x05
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <EEPROM_Write_Byte+0x82>

	TWI_Stop();
     fec:	0e 94 33 09 	call	0x1266	; 0x1266 <TWI_Stop>

	return SUCCESS;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <EEPROM_Read_Byte>:

uint8 EEPROM_Read_Byte(unsigned char u8Dev_addr, unsigned short u16Byte_addr,
		unsigned char *u8data) {
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <EEPROM_Read_Byte+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <EEPROM_Read_Byte+0x8>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <EEPROM_Read_Byte+0xa>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	7b 83       	std	Y+3, r23	; 0x03
    1018:	6a 83       	std	Y+2, r22	; 0x02
    101a:	5d 83       	std	Y+5, r21	; 0x05
    101c:	4c 83       	std	Y+4, r20	; 0x04
	TWI_Start();
    101e:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1022:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	11 f0       	breq	.+4      	; 0x102e <EEPROM_Read_Byte+0x28>
		return ERROR;
    102a:	1e 82       	std	Y+6, r1	; 0x06
    102c:	42 c0       	rjmp	.+132    	; 0x10b2 <EEPROM_Read_Byte+0xac>

	//write the device address and R/W=0 (write)
	TWI_Write(u8Dev_addr);
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1034:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
    1038:	88 31       	cpi	r24, 0x18	; 24
    103a:	11 f0       	breq	.+4      	; 0x1040 <EEPROM_Read_Byte+0x3a>
		return ERROR;
    103c:	1e 82       	std	Y+6, r1	; 0x06
    103e:	39 c0       	rjmp	.+114    	; 0x10b2 <EEPROM_Read_Byte+0xac>

	//send the required first word location address
		TWI_Write((uint8) (u16Byte_addr >> 7));
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	88 0f       	add	r24, r24
    1046:	89 2f       	mov	r24, r25
    1048:	88 1f       	adc	r24, r24
    104a:	99 0b       	sbc	r25, r25
    104c:	91 95       	neg	r25
    104e:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
		if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1052:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
    1056:	88 32       	cpi	r24, 0x28	; 40
    1058:	11 f0       	breq	.+4      	; 0x105e <EEPROM_Read_Byte+0x58>
			return ERROR;
    105a:	1e 82       	std	Y+6, r1	; 0x06
    105c:	2a c0       	rjmp	.+84     	; 0x10b2 <EEPROM_Read_Byte+0xac>
		//send the required second word location address
		TWI_Write((uint8) (u16Byte_addr));
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
		if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1064:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
    1068:	88 32       	cpi	r24, 0x28	; 40
    106a:	11 f0       	breq	.+4      	; 0x1070 <EEPROM_Read_Byte+0x6a>
			return ERROR;
    106c:	1e 82       	std	Y+6, r1	; 0x06
    106e:	21 c0       	rjmp	.+66     	; 0x10b2 <EEPROM_Read_Byte+0xac>

	//send a repeated start
	TWI_Start();
    1070:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    1074:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
    1078:	80 31       	cpi	r24, 0x10	; 16
    107a:	11 f0       	breq	.+4      	; 0x1080 <EEPROM_Read_Byte+0x7a>
		return ERROR;
    107c:	1e 82       	std	Y+6, r1	; 0x06
    107e:	19 c0       	rjmp	.+50     	; 0x10b2 <EEPROM_Read_Byte+0xac>

	//write the device address and R/W=1 (Read)
	TWI_Write((u8Dev_addr)|1);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	81 60       	ori	r24, 0x01	; 1
    1084:	0e 94 3e 09 	call	0x127c	; 0x127c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1088:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
    108c:	80 34       	cpi	r24, 0x40	; 64
    108e:	11 f0       	breq	.+4      	; 0x1094 <EEPROM_Read_Byte+0x8e>
		return ERROR;
    1090:	1e 82       	std	Y+6, r1	; 0x06
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <EEPROM_Read_Byte+0xac>

	*u8data = TWI_Read_With_NACK();
    1094:	0e 94 68 09 	call	0x12d0	; 0x12d0 <TWI_Read_With_NACK>
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_NACK)
    109e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_Get_Status>
    10a2:	88 35       	cpi	r24, 0x58	; 88
    10a4:	11 f0       	breq	.+4      	; 0x10aa <EEPROM_Read_Byte+0xa4>
		return ERROR;
    10a6:	1e 82       	std	Y+6, r1	; 0x06
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <EEPROM_Read_Byte+0xac>

	TWI_Stop();
    10aa:	0e 94 33 09 	call	0x1266	; 0x1266 <TWI_Stop>
	return SUCCESS;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	8e 83       	std	Y+6, r24	; 0x06
    10b2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    10b4:	26 96       	adiw	r28, 0x06	; 6
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <DCMOTOR_Init>:
 */

#include "dcmotor.h"
#include <avr/io.h>
void DCMOTOR_Init()
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DIRECTION |= (1 << IN1); /* configure IN1 pin as output pin*/
    10ce:	a4 e3       	ldi	r26, 0x34	; 52
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	84 60       	ori	r24, 0x04	; 4
    10da:	8c 93       	st	X, r24
	MOTOR_DIRECTION |= (1 << IN2); /* configure IN1 pin as output pin*/
    10dc:	a4 e3       	ldi	r26, 0x34	; 52
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e4 e3       	ldi	r30, 0x34	; 52
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 60       	ori	r24, 0x08	; 8
    10e8:	8c 93       	st	X, r24

	/*Motor is stop at the beginning*/
	MOTOR_OUTPUT &= ~((1 << IN1) | (1 << IN2));
    10ea:	a5 e3       	ldi	r26, 0x35	; 53
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e3       	ldi	r30, 0x35	; 53
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	83 7f       	andi	r24, 0xF3	; 243
    10f6:	8c 93       	st	X, r24
}
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <DCMOTOR_onClockWise>:
void DCMOTOR_onClockWise(uint16 duty_cycle)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <DCMOTOR_onClockWise+0x6>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
	/* Direction of the DC Motor*/
	MOTOR_OUTPUT |= (1 << IN1);
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	84 60       	ori	r24, 0x04	; 4
    1118:	8c 93       	st	X, r24
	MOTOR_OUTPUT &= ~(1 << IN2);
    111a:	a5 e3       	ldi	r26, 0x35	; 53
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e3       	ldi	r30, 0x35	; 53
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	8c 93       	st	X, r24

	/* Timer 1 Fast PWM mode*/
	TCNT1 = 0; //initial timer value
    1128:	ec e4       	ldi	r30, 0x4C	; 76
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	11 82       	std	Z+1, r1	; 0x01
    112e:	10 82       	st	Z, r1
	ICR1 = 60000; //top value
    1130:	e6 e4       	ldi	r30, 0x46	; 70
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 e6       	ldi	r24, 0x60	; 96
    1136:	9a ee       	ldi	r25, 0xEA	; 234
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
	OCR1A = duty_cycle;
    113c:	ea e4       	ldi	r30, 0x4A	; 74
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24

	DDRD = DDRD | (1 << PD5); //set OC1A as output pin --> pin where the PWM signal is generated from MC.
    1148:	a1 e3       	ldi	r26, 0x31	; 49
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e1 e3       	ldi	r30, 0x31	; 49
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 62       	ori	r24, 0x20	; 32
    1154:	8c 93       	st	X, r24
	 * COM1A1=1 Clear OC0 on compare match(Non-Inverting Mode)
	 * CS10=1freq=F_CPU
	 * CS11=0 freq=F_CPU
	 * CS12=0 freq=F_CPU
	 */
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
    1156:	ef e4       	ldi	r30, 0x4F	; 79
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	82 e8       	ldi	r24, 0x82	; 130
    115c:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << FOC1A);
    115e:	af e4       	ldi	r26, 0x4F	; 79
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	ef e4       	ldi	r30, 0x4F	; 79
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	87 7f       	andi	r24, 0xF7	; 247
    116a:	8c 93       	st	X, r24
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10);
    116c:	ee e4       	ldi	r30, 0x4E	; 78
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	89 e1       	ldi	r24, 0x19	; 25
    1172:	80 83       	st	Z, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <DCMOTOR_onAntiClockWise>:

void DCMOTOR_onAntiClockWise(uint16 duty_cycle)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DCMOTOR_onAntiClockWise+0x6>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
	/* Direction of the DC Motor*/
	MOTOR_OUTPUT &= ~(1 << IN1);
    118c:	a5 e3       	ldi	r26, 0x35	; 53
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e3       	ldi	r30, 0x35	; 53
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8b 7f       	andi	r24, 0xFB	; 251
    1198:	8c 93       	st	X, r24
	MOTOR_OUTPUT |= (1 << IN2);
    119a:	a5 e3       	ldi	r26, 0x35	; 53
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	88 60       	ori	r24, 0x08	; 8
    11a6:	8c 93       	st	X, r24

	/* Timer 1 Fast PWM mode*/
	TCNT1 = 0; //initial timer value
    11a8:	ec e4       	ldi	r30, 0x4C	; 76
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	11 82       	std	Z+1, r1	; 0x01
    11ae:	10 82       	st	Z, r1
	ICR1 = 60000; //top value
    11b0:	e6 e4       	ldi	r30, 0x46	; 70
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 e6       	ldi	r24, 0x60	; 96
    11b6:	9a ee       	ldi	r25, 0xEA	; 234
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
	OCR1A = duty_cycle;
    11bc:	ea e4       	ldi	r30, 0x4A	; 74
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24

	DDRD = DDRD | (1 << PD5); //set OC1A as output pin --> pin where the PWM signal is generated from MC.
    11c8:	a1 e3       	ldi	r26, 0x31	; 49
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e1 e3       	ldi	r30, 0x31	; 49
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	8c 93       	st	X, r24
	 * COM1A1=1 Clear OC0 on compare match(Non-Inverting Mode)
	 * CS10=1freq=F_CPU
	 * CS11=0 freq=F_CPU
	 * CS12=0 freq=F_CPU
	 */
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
    11d6:	ef e4       	ldi	r30, 0x4F	; 79
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	82 e8       	ldi	r24, 0x82	; 130
    11dc:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << FOC1A);
    11de:	af e4       	ldi	r26, 0x4F	; 79
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	ef e4       	ldi	r30, 0x4F	; 79
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	87 7f       	andi	r24, 0xF7	; 247
    11ea:	8c 93       	st	X, r24
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10);
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	89 e1       	ldi	r24, 0x19	; 25
    11f2:	80 83       	st	Z, r24
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DCMOTOR_stop>:

void DCMOTOR_stop()
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
	MOTOR_OUTPUT &= ~((1 << IN1) | (1 << IN2));
    1206:	a5 e3       	ldi	r26, 0x35	; 53
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e3       	ldi	r30, 0x35	; 53
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	83 7f       	andi	r24, 0xF3	; 243
    1212:	8c 93       	st	X, r24
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <TWI_Init>:
 * Created: 3/12/2014 12:05:38 PM
 * Author: Mohamed Tarek
 */
#include "i2c.h"

void TWI_Init(void) {
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    1222:	e0 e2       	ldi	r30, 0x20	; 32
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	80 83       	st	Z, r24
	TWSR = 0x00;
    122a:	e1 e2       	ldi	r30, 0x21	; 33
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	 General Call Recognition: Off */
	TWAR = 0b00000010; // my address = 0x01 :)
    1230:	e2 e2       	ldi	r30, 0x22	; 34
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	80 83       	st	Z, r24

	TWCR = (1 << TWEN); /* enable TWI */
    1238:	e6 e5       	ldi	r30, 0x56	; 86
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	80 83       	st	Z, r24
}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <TWI_Start>:

void TWI_Start(void) {
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    124e:	e6 e5       	ldi	r30, 0x56	; 86
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	84 ea       	ldi	r24, 0xA4	; 164
    1254:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1256:	e6 e5       	ldi	r30, 0x56	; 86
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	88 23       	and	r24, r24
    125e:	dc f7       	brge	.-10     	; 0x1256 <TWI_Start+0x10>
		;
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <TWI_Stop>:

void TWI_Stop(void) {
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    126e:	e6 e5       	ldi	r30, 0x56	; 86
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	84 e9       	ldi	r24, 0x94	; 148
    1274:	80 83       	st	Z, r24
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TWI_Write>:

void TWI_Write(uint8 data) {
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	0f 92       	push	r0
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1288:	e3 e2       	ldi	r30, 0x23	; 35
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1290:	e6 e5       	ldi	r30, 0x56	; 86
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	84 e8       	ldi	r24, 0x84	; 132
    1296:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1298:	e6 e5       	ldi	r30, 0x56	; 86
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	88 23       	and	r24, r24
    12a0:	dc f7       	brge	.-10     	; 0x1298 <TWI_Write+0x1c>
		;
}
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void) {
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    12b2:	e6 e5       	ldi	r30, 0x56	; 86
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	84 ec       	ldi	r24, 0xC4	; 196
    12b8:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    12ba:	e6 e5       	ldi	r30, 0x56	; 86
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	88 23       	and	r24, r24
    12c2:	dc f7       	brge	.-10     	; 0x12ba <TWI_Read_With_ACK+0x10>
		;
	/* Read Data */
	return TWDR;
    12c4:	e3 e2       	ldi	r30, 0x23	; 35
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
}
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void) {
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    12d8:	e6 e5       	ldi	r30, 0x56	; 86
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	84 e8       	ldi	r24, 0x84	; 132
    12de:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    12e0:	e6 e5       	ldi	r30, 0x56	; 86
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 23       	and	r24, r24
    12e8:	dc f7       	brge	.-10     	; 0x12e0 <TWI_Read_With_NACK+0x10>
		;
	/* Read Data */
	return TWDR;
    12ea:	e3 e2       	ldi	r30, 0x23	; 35
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
}
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <TWI_Get_Status>:

uint8 TWI_Get_Status(void) {
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1300:	e1 e2       	ldi	r30, 0x21	; 33
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	88 7f       	andi	r24, 0xF8	; 248
    1308:	89 83       	std	Y+1, r24	; 0x01
	return status;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
}
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <KeyPad_getPressedKey>:
 *  Author: Mohamed Tarek
 */

#include "keypad.h"

uint8 KeyPad_getPressedKey(void){
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <KeyPad_getPressedKey+0x6>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    131e:	1a 82       	std	Y+2, r1	; 0x02
    1320:	4c c0       	rjmp	.+152    	; 0x13ba <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1322:	e4 e3       	ldi	r30, 0x34	; 52
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	80 e1       	ldi	r24, 0x10	; 16
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <KeyPad_getPressedKey+0x22>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	2a 95       	dec	r18
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <KeyPad_getPressedKey+0x1e>
    133a:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	80 e1       	ldi	r24, 0x10	; 16
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <KeyPad_getPressedKey+0x3e>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <KeyPad_getPressedKey+0x3a>
    1356:	80 95       	com	r24
    1358:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	28 c0       	rjmp	.+80     	; 0x13ae <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    135e:	e3 e3       	ldi	r30, 0x33	; 51
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <KeyPad_getPressedKey+0x62>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <KeyPad_getPressedKey+0x5e>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	90 70       	andi	r25, 0x00	; 0
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	91 f4       	brne	.+36     	; 0x13a8 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	98 2f       	mov	r25, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	89 0f       	add	r24, r25
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	a8 f2       	brcs	.-86     	; 0x135e <KeyPad_getPressedKey+0x4a>

uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	08 f4       	brcc	.+2      	; 0x13c2 <KeyPad_getPressedKey+0xae>
    13c0:	b0 cf       	rjmp	.-160    	; 0x1322 <KeyPad_getPressedKey+0xe>
    13c2:	ad cf       	rjmp	.-166    	; 0x131e <KeyPad_getPressedKey+0xa>

000013c4 <KeyPad_4x4_adjustKeyNumber>:


#elif (N_col == 4)
 
uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <KeyPad_4x4_adjustKeyNumber+0x6>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <KeyPad_4x4_adjustKeyNumber+0x8>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3c 83       	std	Y+4, r19	; 0x04
    13da:	2b 83       	std	Y+3, r18	; 0x03
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <KeyPad_4x4_adjustKeyNumber+0x24>
    13e6:	70 c0       	rjmp	.+224    	; 0x14c8 <KeyPad_4x4_adjustKeyNumber+0x104>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	29 30       	cpi	r18, 0x09	; 9
    13ee:	31 05       	cpc	r19, r1
    13f0:	5c f5       	brge	.+86     	; 0x1448 <KeyPad_4x4_adjustKeyNumber+0x84>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <KeyPad_4x4_adjustKeyNumber+0x3a>
    13fc:	59 c0       	rjmp	.+178    	; 0x14b0 <KeyPad_4x4_adjustKeyNumber+0xec>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	25 30       	cpi	r18, 0x05	; 5
    1404:	31 05       	cpc	r19, r1
    1406:	9c f4       	brge	.+38     	; 0x142e <KeyPad_4x4_adjustKeyNumber+0x6a>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <KeyPad_4x4_adjustKeyNumber+0x50>
    1412:	48 c0       	rjmp	.+144    	; 0x14a4 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	23 30       	cpi	r18, 0x03	; 3
    141a:	31 05       	cpc	r19, r1
    141c:	0c f0       	brlt	.+2      	; 0x1420 <KeyPad_4x4_adjustKeyNumber+0x5c>
    141e:	45 c0       	rjmp	.+138    	; 0x14aa <KeyPad_4x4_adjustKeyNumber+0xe6>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <KeyPad_4x4_adjustKeyNumber+0x68>
    142a:	39 c0       	rjmp	.+114    	; 0x149e <KeyPad_4x4_adjustKeyNumber+0xda>
    142c:	67 c0       	rjmp	.+206    	; 0x14fc <KeyPad_4x4_adjustKeyNumber+0x138>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	26 30       	cpi	r18, 0x06	; 6
    1434:	31 05       	cpc	r19, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <KeyPad_4x4_adjustKeyNumber+0x76>
    1438:	41 c0       	rjmp	.+130    	; 0x14bc <KeyPad_4x4_adjustKeyNumber+0xf8>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	91 05       	cpc	r25, r1
    1442:	0c f0       	brlt	.+2      	; 0x1446 <KeyPad_4x4_adjustKeyNumber+0x82>
    1444:	3e c0       	rjmp	.+124    	; 0x14c2 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1446:	37 c0       	rjmp	.+110    	; 0x14b6 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	2c 30       	cpi	r18, 0x0C	; 12
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <KeyPad_4x4_adjustKeyNumber+0x90>
    1452:	46 c0       	rjmp	.+140    	; 0x14e0 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	8d 30       	cpi	r24, 0x0D	; 13
    145a:	91 05       	cpc	r25, r1
    145c:	5c f4       	brge	.+22     	; 0x1474 <KeyPad_4x4_adjustKeyNumber+0xb0>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	2a 30       	cpi	r18, 0x0A	; 10
    1464:	31 05       	cpc	r19, r1
    1466:	b1 f1       	breq	.+108    	; 0x14d4 <KeyPad_4x4_adjustKeyNumber+0x110>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	8b 30       	cpi	r24, 0x0B	; 11
    146e:	91 05       	cpc	r25, r1
    1470:	a4 f5       	brge	.+104    	; 0x14da <KeyPad_4x4_adjustKeyNumber+0x116>
    1472:	2d c0       	rjmp	.+90     	; 0x14ce <KeyPad_4x4_adjustKeyNumber+0x10a>
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	2e 30       	cpi	r18, 0x0E	; 14
    147a:	31 05       	cpc	r19, r1
    147c:	b9 f1       	breq	.+110    	; 0x14ec <KeyPad_4x4_adjustKeyNumber+0x128>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	8e 30       	cpi	r24, 0x0E	; 14
    1484:	91 05       	cpc	r25, r1
    1486:	7c f1       	brlt	.+94     	; 0x14e6 <KeyPad_4x4_adjustKeyNumber+0x122>
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	2f 30       	cpi	r18, 0x0F	; 15
    148e:	31 05       	cpc	r19, r1
    1490:	79 f1       	breq	.+94     	; 0x14f0 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	80 31       	cpi	r24, 0x10	; 16
    1498:	91 05       	cpc	r25, r1
    149a:	69 f1       	breq	.+90     	; 0x14f6 <KeyPad_4x4_adjustKeyNumber+0x132>
    149c:	2f c0       	rjmp	.+94     	; 0x14fc <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    149e:	97 e0       	ldi	r25, 0x07	; 7
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	2e c0       	rjmp	.+92     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    14a4:	28 e0       	ldi	r18, 0x08	; 8
    14a6:	2a 83       	std	Y+2, r18	; 0x02
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    14aa:	39 e0       	ldi	r19, 0x09	; 9
    14ac:	3a 83       	std	Y+2, r19	; 0x02
    14ae:	28 c0       	rjmp	.+80     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    14b0:	85 e2       	ldi	r24, 0x25	; 37
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	25 c0       	rjmp	.+74     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    14b6:	94 e0       	ldi	r25, 0x04	; 4
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	22 c0       	rjmp	.+68     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    14bc:	25 e0       	ldi	r18, 0x05	; 5
    14be:	2a 83       	std	Y+2, r18	; 0x02
    14c0:	1f c0       	rjmp	.+62     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    14c2:	36 e0       	ldi	r19, 0x06	; 6
    14c4:	3a 83       	std	Y+2, r19	; 0x02
    14c6:	1c c0       	rjmp	.+56     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    14c8:	8a e2       	ldi	r24, 0x2A	; 42
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	19 c0       	rjmp	.+50     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	2a 83       	std	Y+2, r18	; 0x02
    14d8:	13 c0       	rjmp	.+38     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    14da:	33 e0       	ldi	r19, 0x03	; 3
    14dc:	3a 83       	std	Y+2, r19	; 0x02
    14de:	10 c0       	rjmp	.+32     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    14e0:	8d e2       	ldi	r24, 0x2D	; 45
    14e2:	8a 83       	std	Y+2, r24	; 0x02
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    14e6:	9d e0       	ldi	r25, 0x0D	; 13
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    14ec:	1a 82       	std	Y+2, r1	; 0x02
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    14f0:	2d e3       	ldi	r18, 0x3D	; 61
    14f2:	2a 83       	std	Y+2, r18	; 0x02
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    14f6:	3b e2       	ldi	r19, 0x2B	; 43
    14f8:	3a 83       	std	Y+2, r19	; 0x02
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <LCD_init>:
 */

#include "lcd.h"

void LCD_init(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1518:	a7 e3       	ldi	r26, 0x37	; 55
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e7 e3       	ldi	r30, 0x37	; 55
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	87 60       	ori	r24, 0x07	; 7
    1524:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1526:	aa e3       	ldi	r26, 0x3A	; 58
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 6f       	ori	r24, 0xF0	; 240
    1532:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    153a:	88 e2       	ldi	r24, 0x28	; 40
    153c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1540:	8c e0       	ldi	r24, 0x0C	; 12
    1542:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_sendCommand>
}
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	c3 56       	subi	r28, 0x63	; 99
    1560:	d0 40       	sbci	r29, 0x00	; 0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	fe 01       	movw	r30, r28
    156e:	ed 59       	subi	r30, 0x9D	; 157
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1574:	a8 e3       	ldi	r26, 0x38	; 56
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e8 e3       	ldi	r30, 0x38	; 56
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8b 7f       	andi	r24, 0xFB	; 251
    1580:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1582:	a8 e3       	ldi	r26, 0x38	; 56
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8d 7f       	andi	r24, 0xFD	; 253
    158e:	8c 93       	st	X, r24
    1590:	fe 01       	movw	r30, r28
    1592:	e1 5a       	subi	r30, 0xA1	; 161
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e8       	ldi	r26, 0x80	; 128
    159c:	bf e3       	ldi	r27, 0x3F	; 63
    159e:	80 83       	st	Z, r24
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	a2 83       	std	Z+2, r26	; 0x02
    15a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	8e 01       	movw	r16, r28
    15a8:	05 5a       	subi	r16, 0xA5	; 165
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	fe 01       	movw	r30, r28
    15ae:	e1 5a       	subi	r30, 0xA1	; 161
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	4a ef       	ldi	r20, 0xFA	; 250
    15c0:	54 e4       	ldi	r21, 0x44	; 68
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	f8 01       	movw	r30, r16
    15cc:	80 83       	st	Z, r24
    15ce:	91 83       	std	Z+1, r25	; 0x01
    15d0:	a2 83       	std	Z+2, r26	; 0x02
    15d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d4:	fe 01       	movw	r30, r28
    15d6:	e5 5a       	subi	r30, 0xA5	; 165
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	44 f4       	brge	.+16     	; 0x1602 <LCD_sendCommand+0xb0>
		__ticks = 1;
    15f2:	fe 01       	movw	r30, r28
    15f4:	e7 5a       	subi	r30, 0xA7	; 167
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
    1600:	64 c0       	rjmp	.+200    	; 0x16ca <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1602:	fe 01       	movw	r30, r28
    1604:	e5 5a       	subi	r30, 0xA5	; 165
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	0c f0       	brlt	.+2      	; 0x1622 <LCD_sendCommand+0xd0>
    1620:	43 c0       	rjmp	.+134    	; 0x16a8 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1622:	fe 01       	movw	r30, r28
    1624:	e1 5a       	subi	r30, 0xA1	; 161
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	51 e4       	ldi	r21, 0x41	; 65
    1638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8e 01       	movw	r16, r28
    1642:	07 5a       	subi	r16, 0xA7	; 167
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	f8 01       	movw	r30, r16
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
    1658:	1f c0       	rjmp	.+62     	; 0x1698 <LCD_sendCommand+0x146>
    165a:	fe 01       	movw	r30, r28
    165c:	e9 5a       	subi	r30, 0xA9	; 169
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	88 ec       	ldi	r24, 0xC8	; 200
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	fe 01       	movw	r30, r28
    166a:	e9 5a       	subi	r30, 0xA9	; 169
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <LCD_sendCommand+0x120>
    1676:	fe 01       	movw	r30, r28
    1678:	e9 5a       	subi	r30, 0xA9	; 169
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	de 01       	movw	r26, r28
    1682:	a7 5a       	subi	r26, 0xA7	; 167
    1684:	bf 4f       	sbci	r27, 0xFF	; 255
    1686:	fe 01       	movw	r30, r28
    1688:	e7 5a       	subi	r30, 0xA7	; 167
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	9c 93       	st	X, r25
    1696:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	fe 01       	movw	r30, r28
    169a:	e7 5a       	subi	r30, 0xA7	; 167
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	d1 f6       	brne	.-76     	; 0x165a <LCD_sendCommand+0x108>
    16a6:	27 c0       	rjmp	.+78     	; 0x16f6 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a8:	8e 01       	movw	r16, r28
    16aa:	07 5a       	subi	r16, 0xA7	; 167
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	fe 01       	movw	r30, r28
    16b0:	e5 5a       	subi	r30, 0xA5	; 165
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	80 83       	st	Z, r24
    16ca:	de 01       	movw	r26, r28
    16cc:	ab 5a       	subi	r26, 0xAB	; 171
    16ce:	bf 4f       	sbci	r27, 0xFF	; 255
    16d0:	fe 01       	movw	r30, r28
    16d2:	e7 5a       	subi	r30, 0xA7	; 167
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	8d 93       	st	X+, r24
    16dc:	9c 93       	st	X, r25
    16de:	fe 01       	movw	r30, r28
    16e0:	eb 5a       	subi	r30, 0xAB	; 171
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_sendCommand+0x196>
    16ec:	fe 01       	movw	r30, r28
    16ee:	eb 5a       	subi	r30, 0xAB	; 171
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    16f6:	a8 e3       	ldi	r26, 0x38	; 56
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e8 e3       	ldi	r30, 0x38	; 56
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	81 60       	ori	r24, 0x01	; 1
    1702:	8c 93       	st	X, r24
    1704:	fe 01       	movw	r30, r28
    1706:	ef 5a       	subi	r30, 0xAF	; 175
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 e8       	ldi	r26, 0x80	; 128
    1710:	bf e3       	ldi	r27, 0x3F	; 63
    1712:	80 83       	st	Z, r24
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	a2 83       	std	Z+2, r26	; 0x02
    1718:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171a:	8e 01       	movw	r16, r28
    171c:	03 5b       	subi	r16, 0xB3	; 179
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	fe 01       	movw	r30, r28
    1722:	ef 5a       	subi	r30, 0xAF	; 175
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a ef       	ldi	r20, 0xFA	; 250
    1734:	54 e4       	ldi	r21, 0x44	; 68
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	f8 01       	movw	r30, r16
    1740:	80 83       	st	Z, r24
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	a2 83       	std	Z+2, r26	; 0x02
    1746:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1748:	fe 01       	movw	r30, r28
    174a:	e3 5b       	subi	r30, 0xB3	; 179
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	44 f4       	brge	.+16     	; 0x1776 <LCD_sendCommand+0x224>
		__ticks = 1;
    1766:	fe 01       	movw	r30, r28
    1768:	e5 5b       	subi	r30, 0xB5	; 181
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	80 83       	st	Z, r24
    1774:	64 c0       	rjmp	.+200    	; 0x183e <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1776:	fe 01       	movw	r30, r28
    1778:	e3 5b       	subi	r30, 0xB3	; 179
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	0c f0       	brlt	.+2      	; 0x1796 <LCD_sendCommand+0x244>
    1794:	43 c0       	rjmp	.+134    	; 0x181c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	fe 01       	movw	r30, r28
    1798:	ef 5a       	subi	r30, 0xAF	; 175
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	8e 01       	movw	r16, r28
    17b6:	05 5b       	subi	r16, 0xB5	; 181
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
    17cc:	1f c0       	rjmp	.+62     	; 0x180c <LCD_sendCommand+0x2ba>
    17ce:	fe 01       	movw	r30, r28
    17d0:	e7 5b       	subi	r30, 0xB7	; 183
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
    17dc:	fe 01       	movw	r30, r28
    17de:	e7 5b       	subi	r30, 0xB7	; 183
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCD_sendCommand+0x294>
    17ea:	fe 01       	movw	r30, r28
    17ec:	e7 5b       	subi	r30, 0xB7	; 183
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f4:	de 01       	movw	r26, r28
    17f6:	a5 5b       	subi	r26, 0xB5	; 181
    17f8:	bf 4f       	sbci	r27, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	e5 5b       	subi	r30, 0xB5	; 181
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	9c 93       	st	X, r25
    180a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	fe 01       	movw	r30, r28
    180e:	e5 5b       	subi	r30, 0xB5	; 181
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	d1 f6       	brne	.-76     	; 0x17ce <LCD_sendCommand+0x27c>
    181a:	27 c0       	rjmp	.+78     	; 0x186a <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	8e 01       	movw	r16, r28
    181e:	05 5b       	subi	r16, 0xB5	; 181
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	fe 01       	movw	r30, r28
    1824:	e3 5b       	subi	r30, 0xB3	; 179
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	f8 01       	movw	r30, r16
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
    183e:	de 01       	movw	r26, r28
    1840:	a9 5b       	subi	r26, 0xB9	; 185
    1842:	bf 4f       	sbci	r27, 0xFF	; 255
    1844:	fe 01       	movw	r30, r28
    1846:	e5 5b       	subi	r30, 0xB5	; 181
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	8d 93       	st	X+, r24
    1850:	9c 93       	st	X, r25
    1852:	fe 01       	movw	r30, r28
    1854:	e9 5b       	subi	r30, 0xB9	; 185
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_sendCommand+0x30a>
    1860:	fe 01       	movw	r30, r28
    1862:	e9 5b       	subi	r30, 0xB9	; 185
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command & 0xF0); 
    186a:	ab e3       	ldi	r26, 0x3B	; 59
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	fe 01       	movw	r30, r28
    1870:	ed 59       	subi	r30, 0x9D	; 157
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 81       	ld	r24, Z
    1876:	80 7f       	andi	r24, 0xF0	; 240
    1878:	8c 93       	st	X, r24
    187a:	fe 01       	movw	r30, r28
    187c:	ed 5b       	subi	r30, 0xBD	; 189
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 e8       	ldi	r26, 0x80	; 128
    1886:	bf e3       	ldi	r27, 0x3F	; 63
    1888:	80 83       	st	Z, r24
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	a2 83       	std	Z+2, r26	; 0x02
    188e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	8e 01       	movw	r16, r28
    1892:	01 5c       	subi	r16, 0xC1	; 193
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	ed 5b       	subi	r30, 0xBD	; 189
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a ef       	ldi	r20, 0xFA	; 250
    18aa:	54 e4       	ldi	r21, 0x44	; 68
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	80 83       	st	Z, r24
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	a2 83       	std	Z+2, r26	; 0x02
    18bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18be:	fe 01       	movw	r30, r28
    18c0:	ff 96       	adiw	r30, 0x3f	; 63
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <LCD_sendCommand+0x392>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9e af       	std	Y+62, r25	; 0x3e
    18e0:	8d af       	std	Y+61, r24	; 0x3d
    18e2:	46 c0       	rjmp	.+140    	; 0x1970 <LCD_sendCommand+0x41e>
	else if (__tmp > 65535)
    18e4:	fe 01       	movw	r30, r28
    18e6:	ff 96       	adiw	r30, 0x3f	; 63
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	64 f5       	brge	.+88     	; 0x1958 <LCD_sendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1900:	fe 01       	movw	r30, r28
    1902:	ed 5b       	subi	r30, 0xBD	; 189
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e2       	ldi	r20, 0x20	; 32
    1914:	51 e4       	ldi	r21, 0x41	; 65
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9e af       	std	Y+62, r25	; 0x3e
    192c:	8d af       	std	Y+61, r24	; 0x3d
    192e:	0f c0       	rjmp	.+30     	; 0x194e <LCD_sendCommand+0x3fc>
    1930:	88 ec       	ldi	r24, 0xC8	; 200
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c af       	std	Y+60, r25	; 0x3c
    1936:	8b af       	std	Y+59, r24	; 0x3b
    1938:	8b ad       	ldd	r24, Y+59	; 0x3b
    193a:	9c ad       	ldd	r25, Y+60	; 0x3c
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_sendCommand+0x3ea>
    1940:	9c af       	std	Y+60, r25	; 0x3c
    1942:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	8d ad       	ldd	r24, Y+61	; 0x3d
    1946:	9e ad       	ldd	r25, Y+62	; 0x3e
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	9e af       	std	Y+62, r25	; 0x3e
    194c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1950:	9e ad       	ldd	r25, Y+62	; 0x3e
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	69 f7       	brne	.-38     	; 0x1930 <LCD_sendCommand+0x3de>
    1956:	16 c0       	rjmp	.+44     	; 0x1984 <LCD_sendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1958:	fe 01       	movw	r30, r28
    195a:	ff 96       	adiw	r30, 0x3f	; 63
    195c:	60 81       	ld	r22, Z
    195e:	71 81       	ldd	r23, Z+1	; 0x01
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e af       	std	Y+62, r25	; 0x3e
    196e:	8d af       	std	Y+61, r24	; 0x3d
    1970:	8d ad       	ldd	r24, Y+61	; 0x3d
    1972:	9e ad       	ldd	r25, Y+62	; 0x3e
    1974:	9a af       	std	Y+58, r25	; 0x3a
    1976:	89 af       	std	Y+57, r24	; 0x39
    1978:	89 ad       	ldd	r24, Y+57	; 0x39
    197a:	9a ad       	ldd	r25, Y+58	; 0x3a
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_sendCommand+0x42a>
    1980:	9a af       	std	Y+58, r25	; 0x3a
    1982:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((command >> 4) & 0x0F);
		#endif
			
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1984:	a8 e3       	ldi	r26, 0x38	; 56
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e8 e3       	ldi	r30, 0x38	; 56
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8e 7f       	andi	r24, 0xFE	; 254
    1990:	8c 93       	st	X, r24
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e8       	ldi	r26, 0x80	; 128
    1998:	bf e3       	ldi	r27, 0x3F	; 63
    199a:	8d ab       	std	Y+53, r24	; 0x35
    199c:	9e ab       	std	Y+54, r25	; 0x36
    199e:	af ab       	std	Y+55, r26	; 0x37
    19a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	6d a9       	ldd	r22, Y+53	; 0x35
    19a4:	7e a9       	ldd	r23, Y+54	; 0x36
    19a6:	8f a9       	ldd	r24, Y+55	; 0x37
    19a8:	98 ad       	ldd	r25, Y+56	; 0x38
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a ef       	ldi	r20, 0xFA	; 250
    19b0:	54 e4       	ldi	r21, 0x44	; 68
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	89 ab       	std	Y+49, r24	; 0x31
    19bc:	9a ab       	std	Y+50, r25	; 0x32
    19be:	ab ab       	std	Y+51, r26	; 0x33
    19c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19c2:	69 a9       	ldd	r22, Y+49	; 0x31
    19c4:	7a a9       	ldd	r23, Y+50	; 0x32
    19c6:	8b a9       	ldd	r24, Y+51	; 0x33
    19c8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <LCD_sendCommand+0x492>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	98 ab       	std	Y+48, r25	; 0x30
    19e0:	8f a7       	std	Y+47, r24	; 0x2f
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <LCD_sendCommand+0x510>
	else if (__tmp > 65535)
    19e4:	69 a9       	ldd	r22, Y+49	; 0x31
    19e6:	7a a9       	ldd	r23, Y+50	; 0x32
    19e8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ea:	9c a9       	ldd	r25, Y+52	; 0x34
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	4c f5       	brge	.+82     	; 0x1a4e <LCD_sendCommand+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	6d a9       	ldd	r22, Y+53	; 0x35
    19fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1a00:	8f a9       	ldd	r24, Y+55	; 0x37
    1a02:	98 ad       	ldd	r25, Y+56	; 0x38
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	98 ab       	std	Y+48, r25	; 0x30
    1a22:	8f a7       	std	Y+47, r24	; 0x2f
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_sendCommand+0x4f2>
    1a26:	88 ec       	ldi	r24, 0xC8	; 200
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9e a7       	std	Y+46, r25	; 0x2e
    1a2c:	8d a7       	std	Y+45, r24	; 0x2d
    1a2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_sendCommand+0x4e0>
    1a36:	9e a7       	std	Y+46, r25	; 0x2e
    1a38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	98 ab       	std	Y+48, r25	; 0x30
    1a42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a46:	98 a9       	ldd	r25, Y+48	; 0x30
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <LCD_sendCommand+0x4d4>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <LCD_sendCommand+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a50:	7a a9       	ldd	r23, Y+50	; 0x32
    1a52:	8b a9       	ldd	r24, Y+51	; 0x33
    1a54:	9c a9       	ldd	r25, Y+52	; 0x34
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	98 ab       	std	Y+48, r25	; 0x30
    1a60:	8f a7       	std	Y+47, r24	; 0x2f
    1a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a64:	98 a9       	ldd	r25, Y+48	; 0x30
    1a66:	9c a7       	std	Y+44, r25	; 0x2c
    1a68:	8b a7       	std	Y+43, r24	; 0x2b
    1a6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_sendCommand+0x51c>
    1a72:	9c a7       	std	Y+44, r25	; 0x2c
    1a74:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a76:	a8 e3       	ldi	r26, 0x38	; 56
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e8 e3       	ldi	r30, 0x38	; 56
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	81 60       	ori	r24, 0x01	; 1
    1a82:	8c 93       	st	X, r24
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a0 e8       	ldi	r26, 0x80	; 128
    1a8a:	bf e3       	ldi	r27, 0x3F	; 63
    1a8c:	8f a3       	std	Y+39, r24	; 0x27
    1a8e:	98 a7       	std	Y+40, r25	; 0x28
    1a90:	a9 a7       	std	Y+41, r26	; 0x29
    1a92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a94:	6f a1       	ldd	r22, Y+39	; 0x27
    1a96:	78 a5       	ldd	r23, Y+40	; 0x28
    1a98:	89 a5       	ldd	r24, Y+41	; 0x29
    1a9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a ef       	ldi	r20, 0xFA	; 250
    1aa2:	54 e4       	ldi	r21, 0x44	; 68
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8b a3       	std	Y+35, r24	; 0x23
    1aae:	9c a3       	std	Y+36, r25	; 0x24
    1ab0:	ad a3       	std	Y+37, r26	; 0x25
    1ab2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aba:	9e a1       	ldd	r25, Y+38	; 0x26
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e8       	ldi	r20, 0x80	; 128
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <LCD_sendCommand+0x584>
		__ticks = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9a a3       	std	Y+34, r25	; 0x22
    1ad2:	89 a3       	std	Y+33, r24	; 0x21
    1ad4:	3f c0       	rjmp	.+126    	; 0x1b54 <LCD_sendCommand+0x602>
	else if (__tmp > 65535)
    1ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ada:	8d a1       	ldd	r24, Y+37	; 0x25
    1adc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	57 e4       	ldi	r21, 0x47	; 71
    1ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	4c f5       	brge	.+82     	; 0x1b40 <LCD_sendCommand+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	6f a1       	ldd	r22, Y+39	; 0x27
    1af0:	78 a5       	ldd	r23, Y+40	; 0x28
    1af2:	89 a5       	ldd	r24, Y+41	; 0x29
    1af4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	51 e4       	ldi	r21, 0x41	; 65
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9a a3       	std	Y+34, r25	; 0x22
    1b14:	89 a3       	std	Y+33, r24	; 0x21
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <LCD_sendCommand+0x5e4>
    1b18:	88 ec       	ldi	r24, 0xC8	; 200
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	98 a3       	std	Y+32, r25	; 0x20
    1b1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b22:	98 a1       	ldd	r25, Y+32	; 0x20
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_sendCommand+0x5d2>
    1b28:	98 a3       	std	Y+32, r25	; 0x20
    1b2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	69 f7       	brne	.-38     	; 0x1b18 <LCD_sendCommand+0x5c6>
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <LCD_sendCommand+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b40:	6b a1       	ldd	r22, Y+35	; 0x23
    1b42:	7c a1       	ldd	r23, Y+36	; 0x24
    1b44:	8d a1       	ldd	r24, Y+37	; 0x25
    1b46:	9e a1       	ldd	r25, Y+38	; 0x26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9a a3       	std	Y+34, r25	; 0x22
    1b52:	89 a3       	std	Y+33, r24	; 0x21
    1b54:	89 a1       	ldd	r24, Y+33	; 0x21
    1b56:	9a a1       	ldd	r25, Y+34	; 0x22
    1b58:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_sendCommand+0x60e>
    1b64:	9e 8f       	std	Y+30, r25	; 0x1e
    1b66:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command << 4) & 0xF0; 
    1b68:	ab e3       	ldi	r26, 0x3B	; 59
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ed 59       	subi	r30, 0x9D	; 157
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	82 95       	swap	r24
    1b7a:	92 95       	swap	r25
    1b7c:	90 7f       	andi	r25, 0xF0	; 240
    1b7e:	98 27       	eor	r25, r24
    1b80:	80 7f       	andi	r24, 0xF0	; 240
    1b82:	98 27       	eor	r25, r24
    1b84:	8c 93       	st	X, r24
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 e8       	ldi	r26, 0x80	; 128
    1b8c:	bf e3       	ldi	r27, 0x3F	; 63
    1b8e:	89 8f       	std	Y+25, r24	; 0x19
    1b90:	9a 8f       	std	Y+26, r25	; 0x1a
    1b92:	ab 8f       	std	Y+27, r26	; 0x1b
    1b94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	69 8d       	ldd	r22, Y+25	; 0x19
    1b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a ef       	ldi	r20, 0xFA	; 250
    1ba4:	54 e4       	ldi	r21, 0x44	; 68
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8d 8b       	std	Y+21, r24	; 0x15
    1bb0:	9e 8b       	std	Y+22, r25	; 0x16
    1bb2:	af 8b       	std	Y+23, r26	; 0x17
    1bb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bba:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <LCD_sendCommand+0x686>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 8b       	std	Y+20, r25	; 0x14
    1bd4:	8b 8b       	std	Y+19, r24	; 0x13
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <LCD_sendCommand+0x704>
	else if (__tmp > 65535)
    1bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bda:	7e 89       	ldd	r23, Y+22	; 0x16
    1bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bde:	98 8d       	ldd	r25, Y+24	; 0x18
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <LCD_sendCommand+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <LCD_sendCommand+0x6e6>
    1c1a:	88 ec       	ldi	r24, 0xC8	; 200
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9a 8b       	std	Y+18, r25	; 0x12
    1c20:	89 8b       	std	Y+17, r24	; 0x11
    1c22:	89 89       	ldd	r24, Y+17	; 0x11
    1c24:	9a 89       	ldd	r25, Y+18	; 0x12
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_sendCommand+0x6d4>
    1c2a:	9a 8b       	std	Y+18, r25	; 0x12
    1c2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <LCD_sendCommand+0x6c8>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <LCD_sendCommand+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6d 89       	ldd	r22, Y+21	; 0x15
    1c44:	7e 89       	ldd	r23, Y+22	; 0x16
    1c46:	8f 89       	ldd	r24, Y+23	; 0x17
    1c48:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9c 8b       	std	Y+20, r25	; 0x14
    1c54:	8b 8b       	std	Y+19, r24	; 0x13
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	98 8b       	std	Y+16, r25	; 0x10
    1c5c:	8f 87       	std	Y+15, r24	; 0x0f
    1c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c60:	98 89       	ldd	r25, Y+16	; 0x10
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_sendCommand+0x710>
    1c66:	98 8b       	std	Y+16, r25	; 0x10
    1c68:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (command & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c6a:	a8 e3       	ldi	r26, 0x38	; 56
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e8 e3       	ldi	r30, 0x38	; 56
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8e 7f       	andi	r24, 0xFE	; 254
    1c76:	8c 93       	st	X, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	8b 87       	std	Y+11, r24	; 0x0b
    1c82:	9c 87       	std	Y+12, r25	; 0x0c
    1c84:	ad 87       	std	Y+13, r26	; 0x0d
    1c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
    1ca2:	98 87       	std	Y+8, r25	; 0x08
    1ca4:	a9 87       	std	Y+9, r26	; 0x09
    1ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <LCD_sendCommand+0x778>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <LCD_sendCommand+0x7f6>
	else if (__tmp > 65535)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <LCD_sendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_sendCommand+0x7d8>
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_sendCommand+0x7c6>
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <LCD_sendCommand+0x7ba>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <LCD_sendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_sendCommand+0x802>
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */ 
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    1d5c:	cd 59       	subi	r28, 0x9D	; 157
    1d5e:	df 4f       	sbci	r29, 0xFF	; 255
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	08 95       	ret

00001d74 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	c3 56       	subi	r28, 0x63	; 99
    1d82:	d0 40       	sbci	r29, 0x00	; 0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ed 59       	subi	r30, 0x9D	; 157
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1d96:	a8 e3       	ldi	r26, 0x38	; 56
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e8 e3       	ldi	r30, 0x38	; 56
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	84 60       	ori	r24, 0x04	; 4
    1da2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1da4:	a8 e3       	ldi	r26, 0x38	; 56
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e8 e3       	ldi	r30, 0x38	; 56
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8d 7f       	andi	r24, 0xFD	; 253
    1db0:	8c 93       	st	X, r24
    1db2:	fe 01       	movw	r30, r28
    1db4:	e1 5a       	subi	r30, 0xA1	; 161
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a0 e8       	ldi	r26, 0x80	; 128
    1dbe:	bf e3       	ldi	r27, 0x3F	; 63
    1dc0:	80 83       	st	Z, r24
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	a2 83       	std	Z+2, r26	; 0x02
    1dc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc8:	8e 01       	movw	r16, r28
    1dca:	05 5a       	subi	r16, 0xA5	; 165
    1dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e1 5a       	subi	r30, 0xA1	; 161
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	f8 01       	movw	r30, r16
    1dee:	80 83       	st	Z, r24
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	a2 83       	std	Z+2, r26	; 0x02
    1df4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1df6:	fe 01       	movw	r30, r28
    1df8:	e5 5a       	subi	r30, 0xA5	; 165
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	44 f4       	brge	.+16     	; 0x1e24 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1e14:	fe 01       	movw	r30, r28
    1e16:	e7 5a       	subi	r30, 0xA7	; 167
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
    1e22:	64 c0       	rjmp	.+200    	; 0x1eec <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1e24:	fe 01       	movw	r30, r28
    1e26:	e5 5a       	subi	r30, 0xA5	; 165
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	0c f0       	brlt	.+2      	; 0x1e44 <LCD_displayCharacter+0xd0>
    1e42:	43 c0       	rjmp	.+134    	; 0x1eca <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	fe 01       	movw	r30, r28
    1e46:	e1 5a       	subi	r30, 0xA1	; 161
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8e 01       	movw	r16, r28
    1e64:	07 5a       	subi	r16, 0xA7	; 167
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
    1e7a:	1f c0       	rjmp	.+62     	; 0x1eba <LCD_displayCharacter+0x146>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 5a       	subi	r30, 0xA9	; 169
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	88 ec       	ldi	r24, 0xC8	; 200
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e9 5a       	subi	r30, 0xA9	; 169
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_displayCharacter+0x120>
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e9 5a       	subi	r30, 0xA9	; 169
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea2:	de 01       	movw	r26, r28
    1ea4:	a7 5a       	subi	r26, 0xA7	; 167
    1ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e7 5a       	subi	r30, 0xA7	; 167
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	11 96       	adiw	r26, 0x01	; 1
    1eb6:	9c 93       	st	X, r25
    1eb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e7 5a       	subi	r30, 0xA7	; 167
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	d1 f6       	brne	.-76     	; 0x1e7c <LCD_displayCharacter+0x108>
    1ec8:	27 c0       	rjmp	.+78     	; 0x1f18 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	8e 01       	movw	r16, r28
    1ecc:	07 5a       	subi	r16, 0xA7	; 167
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e5 5a       	subi	r30, 0xA5	; 165
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	60 81       	ld	r22, Z
    1ed8:	71 81       	ldd	r23, Z+1	; 0x01
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	de 01       	movw	r26, r28
    1eee:	ab 5a       	subi	r26, 0xAB	; 171
    1ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e7 5a       	subi	r30, 0xA7	; 167
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	8d 93       	st	X+, r24
    1efe:	9c 93       	st	X, r25
    1f00:	fe 01       	movw	r30, r28
    1f02:	eb 5a       	subi	r30, 0xAB	; 171
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_displayCharacter+0x196>
    1f0e:	fe 01       	movw	r30, r28
    1f10:	eb 5a       	subi	r30, 0xAB	; 171
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f18:	a8 e3       	ldi	r26, 0x38	; 56
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e8 e3       	ldi	r30, 0x38	; 56
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	81 60       	ori	r24, 0x01	; 1
    1f24:	8c 93       	st	X, r24
    1f26:	fe 01       	movw	r30, r28
    1f28:	ef 5a       	subi	r30, 0xAF	; 175
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a0 e8       	ldi	r26, 0x80	; 128
    1f32:	bf e3       	ldi	r27, 0x3F	; 63
    1f34:	80 83       	st	Z, r24
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	a2 83       	std	Z+2, r26	; 0x02
    1f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	03 5b       	subi	r16, 0xB3	; 179
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	fe 01       	movw	r30, r28
    1f44:	ef 5a       	subi	r30, 0xAF	; 175
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a ef       	ldi	r20, 0xFA	; 250
    1f56:	54 e4       	ldi	r21, 0x44	; 68
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	f8 01       	movw	r30, r16
    1f62:	80 83       	st	Z, r24
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	a2 83       	std	Z+2, r26	; 0x02
    1f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e3 5b       	subi	r30, 0xB3	; 179
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	44 f4       	brge	.+16     	; 0x1f98 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e5 5b       	subi	r30, 0xB5	; 181
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	64 c0       	rjmp	.+200    	; 0x2060 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e3 5b       	subi	r30, 0xB3	; 179
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	0c f0       	brlt	.+2      	; 0x1fb8 <LCD_displayCharacter+0x244>
    1fb6:	43 c0       	rjmp	.+134    	; 0x203e <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ef 5a       	subi	r30, 0xAF	; 175
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8e 01       	movw	r16, r28
    1fd8:	05 5b       	subi	r16, 0xB5	; 181
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	f8 01       	movw	r30, r16
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	1f c0       	rjmp	.+62     	; 0x202e <LCD_displayCharacter+0x2ba>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e7 5b       	subi	r30, 0xB7	; 183
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	88 ec       	ldi	r24, 0xC8	; 200
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
    1ffe:	fe 01       	movw	r30, r28
    2000:	e7 5b       	subi	r30, 0xB7	; 183
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_displayCharacter+0x294>
    200c:	fe 01       	movw	r30, r28
    200e:	e7 5b       	subi	r30, 0xB7	; 183
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2016:	de 01       	movw	r26, r28
    2018:	a5 5b       	subi	r26, 0xB5	; 181
    201a:	bf 4f       	sbci	r27, 0xFF	; 255
    201c:	fe 01       	movw	r30, r28
    201e:	e5 5b       	subi	r30, 0xB5	; 181
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	11 96       	adiw	r26, 0x01	; 1
    202a:	9c 93       	st	X, r25
    202c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	fe 01       	movw	r30, r28
    2030:	e5 5b       	subi	r30, 0xB5	; 181
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	d1 f6       	brne	.-76     	; 0x1ff0 <LCD_displayCharacter+0x27c>
    203c:	27 c0       	rjmp	.+78     	; 0x208c <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203e:	8e 01       	movw	r16, r28
    2040:	05 5b       	subi	r16, 0xB5	; 181
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	e3 5b       	subi	r30, 0xB3	; 179
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	f8 01       	movw	r30, r16
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
    2060:	de 01       	movw	r26, r28
    2062:	a9 5b       	subi	r26, 0xB9	; 185
    2064:	bf 4f       	sbci	r27, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	e5 5b       	subi	r30, 0xB5	; 181
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	8d 93       	st	X+, r24
    2072:	9c 93       	st	X, r25
    2074:	fe 01       	movw	r30, r28
    2076:	e9 5b       	subi	r30, 0xB9	; 185
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_displayCharacter+0x30a>
    2082:	fe 01       	movw	r30, r28
    2084:	e9 5b       	subi	r30, 0xB9	; 185
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data & 0xF0); 
    208c:	ab e3       	ldi	r26, 0x3B	; 59
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	fe 01       	movw	r30, r28
    2092:	ed 59       	subi	r30, 0x9D	; 157
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	80 7f       	andi	r24, 0xF0	; 240
    209a:	8c 93       	st	X, r24
    209c:	fe 01       	movw	r30, r28
    209e:	ed 5b       	subi	r30, 0xBD	; 189
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e8       	ldi	r26, 0x80	; 128
    20a8:	bf e3       	ldi	r27, 0x3F	; 63
    20aa:	80 83       	st	Z, r24
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	a2 83       	std	Z+2, r26	; 0x02
    20b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	8e 01       	movw	r16, r28
    20b4:	01 5c       	subi	r16, 0xC1	; 193
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	fe 01       	movw	r30, r28
    20ba:	ed 5b       	subi	r30, 0xBD	; 189
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a ef       	ldi	r20, 0xFA	; 250
    20cc:	54 e4       	ldi	r21, 0x44	; 68
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	f8 01       	movw	r30, r16
    20d8:	80 83       	st	Z, r24
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	a2 83       	std	Z+2, r26	; 0x02
    20de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e0:	fe 01       	movw	r30, r28
    20e2:	ff 96       	adiw	r30, 0x3f	; 63
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <LCD_displayCharacter+0x392>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9e af       	std	Y+62, r25	; 0x3e
    2102:	8d af       	std	Y+61, r24	; 0x3d
    2104:	46 c0       	rjmp	.+140    	; 0x2192 <LCD_displayCharacter+0x41e>
	else if (__tmp > 65535)
    2106:	fe 01       	movw	r30, r28
    2108:	ff 96       	adiw	r30, 0x3f	; 63
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	64 f5       	brge	.+88     	; 0x217a <LCD_displayCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	fe 01       	movw	r30, r28
    2124:	ed 5b       	subi	r30, 0xBD	; 189
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e af       	std	Y+62, r25	; 0x3e
    214e:	8d af       	std	Y+61, r24	; 0x3d
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_displayCharacter+0x3fc>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c af       	std	Y+60, r25	; 0x3c
    2158:	8b af       	std	Y+59, r24	; 0x3b
    215a:	8b ad       	ldd	r24, Y+59	; 0x3b
    215c:	9c ad       	ldd	r25, Y+60	; 0x3c
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_displayCharacter+0x3ea>
    2162:	9c af       	std	Y+60, r25	; 0x3c
    2164:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d ad       	ldd	r24, Y+61	; 0x3d
    2168:	9e ad       	ldd	r25, Y+62	; 0x3e
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e af       	std	Y+62, r25	; 0x3e
    216e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d ad       	ldd	r24, Y+61	; 0x3d
    2172:	9e ad       	ldd	r25, Y+62	; 0x3e
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_displayCharacter+0x3de>
    2178:	16 c0       	rjmp	.+44     	; 0x21a6 <LCD_displayCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	fe 01       	movw	r30, r28
    217c:	ff 96       	adiw	r30, 0x3f	; 63
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	9e af       	std	Y+62, r25	; 0x3e
    2190:	8d af       	std	Y+61, r24	; 0x3d
    2192:	8d ad       	ldd	r24, Y+61	; 0x3d
    2194:	9e ad       	ldd	r25, Y+62	; 0x3e
    2196:	9a af       	std	Y+58, r25	; 0x3a
    2198:	89 af       	std	Y+57, r24	; 0x39
    219a:	89 ad       	ldd	r24, Y+57	; 0x39
    219c:	9a ad       	ldd	r25, Y+58	; 0x3a
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_displayCharacter+0x42a>
    21a2:	9a af       	std	Y+58, r25	; 0x3a
    21a4:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((data >> 4) & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21a6:	a8 e3       	ldi	r26, 0x38	; 56
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e8 e3       	ldi	r30, 0x38	; 56
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	8e 7f       	andi	r24, 0xFE	; 254
    21b2:	8c 93       	st	X, r24
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e8       	ldi	r26, 0x80	; 128
    21ba:	bf e3       	ldi	r27, 0x3F	; 63
    21bc:	8d ab       	std	Y+53, r24	; 0x35
    21be:	9e ab       	std	Y+54, r25	; 0x36
    21c0:	af ab       	std	Y+55, r26	; 0x37
    21c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c4:	6d a9       	ldd	r22, Y+53	; 0x35
    21c6:	7e a9       	ldd	r23, Y+54	; 0x36
    21c8:	8f a9       	ldd	r24, Y+55	; 0x37
    21ca:	98 ad       	ldd	r25, Y+56	; 0x38
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a ef       	ldi	r20, 0xFA	; 250
    21d2:	54 e4       	ldi	r21, 0x44	; 68
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	89 ab       	std	Y+49, r24	; 0x31
    21de:	9a ab       	std	Y+50, r25	; 0x32
    21e0:	ab ab       	std	Y+51, r26	; 0x33
    21e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21e4:	69 a9       	ldd	r22, Y+49	; 0x31
    21e6:	7a a9       	ldd	r23, Y+50	; 0x32
    21e8:	8b a9       	ldd	r24, Y+51	; 0x33
    21ea:	9c a9       	ldd	r25, Y+52	; 0x34
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <LCD_displayCharacter+0x492>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	98 ab       	std	Y+48, r25	; 0x30
    2202:	8f a7       	std	Y+47, r24	; 0x2f
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <LCD_displayCharacter+0x510>
	else if (__tmp > 65535)
    2206:	69 a9       	ldd	r22, Y+49	; 0x31
    2208:	7a a9       	ldd	r23, Y+50	; 0x32
    220a:	8b a9       	ldd	r24, Y+51	; 0x33
    220c:	9c a9       	ldd	r25, Y+52	; 0x34
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	3f ef       	ldi	r19, 0xFF	; 255
    2212:	4f e7       	ldi	r20, 0x7F	; 127
    2214:	57 e4       	ldi	r21, 0x47	; 71
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221a:	18 16       	cp	r1, r24
    221c:	4c f5       	brge	.+82     	; 0x2270 <LCD_displayCharacter+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221e:	6d a9       	ldd	r22, Y+53	; 0x35
    2220:	7e a9       	ldd	r23, Y+54	; 0x36
    2222:	8f a9       	ldd	r24, Y+55	; 0x37
    2224:	98 ad       	ldd	r25, Y+56	; 0x38
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	98 ab       	std	Y+48, r25	; 0x30
    2244:	8f a7       	std	Y+47, r24	; 0x2f
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <LCD_displayCharacter+0x4f2>
    2248:	88 ec       	ldi	r24, 0xC8	; 200
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9e a7       	std	Y+46, r25	; 0x2e
    224e:	8d a7       	std	Y+45, r24	; 0x2d
    2250:	8d a5       	ldd	r24, Y+45	; 0x2d
    2252:	9e a5       	ldd	r25, Y+46	; 0x2e
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_displayCharacter+0x4e0>
    2258:	9e a7       	std	Y+46, r25	; 0x2e
    225a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225c:	8f a5       	ldd	r24, Y+47	; 0x2f
    225e:	98 a9       	ldd	r25, Y+48	; 0x30
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	98 ab       	std	Y+48, r25	; 0x30
    2264:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	8f a5       	ldd	r24, Y+47	; 0x2f
    2268:	98 a9       	ldd	r25, Y+48	; 0x30
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	69 f7       	brne	.-38     	; 0x2248 <LCD_displayCharacter+0x4d4>
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <LCD_displayCharacter+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	69 a9       	ldd	r22, Y+49	; 0x31
    2272:	7a a9       	ldd	r23, Y+50	; 0x32
    2274:	8b a9       	ldd	r24, Y+51	; 0x33
    2276:	9c a9       	ldd	r25, Y+52	; 0x34
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	98 ab       	std	Y+48, r25	; 0x30
    2282:	8f a7       	std	Y+47, r24	; 0x2f
    2284:	8f a5       	ldd	r24, Y+47	; 0x2f
    2286:	98 a9       	ldd	r25, Y+48	; 0x30
    2288:	9c a7       	std	Y+44, r25	; 0x2c
    228a:	8b a7       	std	Y+43, r24	; 0x2b
    228c:	8b a5       	ldd	r24, Y+43	; 0x2b
    228e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_displayCharacter+0x51c>
    2294:	9c a7       	std	Y+44, r25	; 0x2c
    2296:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2298:	a8 e3       	ldi	r26, 0x38	; 56
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e8 e3       	ldi	r30, 0x38	; 56
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	81 60       	ori	r24, 0x01	; 1
    22a4:	8c 93       	st	X, r24
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e8       	ldi	r26, 0x80	; 128
    22ac:	bf e3       	ldi	r27, 0x3F	; 63
    22ae:	8f a3       	std	Y+39, r24	; 0x27
    22b0:	98 a7       	std	Y+40, r25	; 0x28
    22b2:	a9 a7       	std	Y+41, r26	; 0x29
    22b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	6f a1       	ldd	r22, Y+39	; 0x27
    22b8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ba:	89 a5       	ldd	r24, Y+41	; 0x29
    22bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a ef       	ldi	r20, 0xFA	; 250
    22c4:	54 e4       	ldi	r21, 0x44	; 68
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8b a3       	std	Y+35, r24	; 0x23
    22d0:	9c a3       	std	Y+36, r25	; 0x24
    22d2:	ad a3       	std	Y+37, r26	; 0x25
    22d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22d6:	6b a1       	ldd	r22, Y+35	; 0x23
    22d8:	7c a1       	ldd	r23, Y+36	; 0x24
    22da:	8d a1       	ldd	r24, Y+37	; 0x25
    22dc:	9e a1       	ldd	r25, Y+38	; 0x26
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <LCD_displayCharacter+0x584>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9a a3       	std	Y+34, r25	; 0x22
    22f4:	89 a3       	std	Y+33, r24	; 0x21
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <LCD_displayCharacter+0x602>
	else if (__tmp > 65535)
    22f8:	6b a1       	ldd	r22, Y+35	; 0x23
    22fa:	7c a1       	ldd	r23, Y+36	; 0x24
    22fc:	8d a1       	ldd	r24, Y+37	; 0x25
    22fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <LCD_displayCharacter+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	6f a1       	ldd	r22, Y+39	; 0x27
    2312:	78 a5       	ldd	r23, Y+40	; 0x28
    2314:	89 a5       	ldd	r24, Y+41	; 0x29
    2316:	9a a5       	ldd	r25, Y+42	; 0x2a
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9a a3       	std	Y+34, r25	; 0x22
    2336:	89 a3       	std	Y+33, r24	; 0x21
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <LCD_displayCharacter+0x5e4>
    233a:	88 ec       	ldi	r24, 0xC8	; 200
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	98 a3       	std	Y+32, r25	; 0x20
    2340:	8f 8f       	std	Y+31, r24	; 0x1f
    2342:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2344:	98 a1       	ldd	r25, Y+32	; 0x20
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_displayCharacter+0x5d2>
    234a:	98 a3       	std	Y+32, r25	; 0x20
    234c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	89 a1       	ldd	r24, Y+33	; 0x21
    2350:	9a a1       	ldd	r25, Y+34	; 0x22
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9a a3       	std	Y+34, r25	; 0x22
    2356:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	89 a1       	ldd	r24, Y+33	; 0x21
    235a:	9a a1       	ldd	r25, Y+34	; 0x22
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <LCD_displayCharacter+0x5c6>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <LCD_displayCharacter+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6b a1       	ldd	r22, Y+35	; 0x23
    2364:	7c a1       	ldd	r23, Y+36	; 0x24
    2366:	8d a1       	ldd	r24, Y+37	; 0x25
    2368:	9e a1       	ldd	r25, Y+38	; 0x26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9a a3       	std	Y+34, r25	; 0x22
    2374:	89 a3       	std	Y+33, r24	; 0x21
    2376:	89 a1       	ldd	r24, Y+33	; 0x21
    2378:	9a a1       	ldd	r25, Y+34	; 0x22
    237a:	9e 8f       	std	Y+30, r25	; 0x1e
    237c:	8d 8f       	std	Y+29, r24	; 0x1d
    237e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_displayCharacter+0x60e>
    2386:	9e 8f       	std	Y+30, r25	; 0x1e
    2388:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data << 4) & 0xF0; 
    238a:	ab e3       	ldi	r26, 0x3B	; 59
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	fe 01       	movw	r30, r28
    2390:	ed 59       	subi	r30, 0x9D	; 157
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	82 95       	swap	r24
    239c:	92 95       	swap	r25
    239e:	90 7f       	andi	r25, 0xF0	; 240
    23a0:	98 27       	eor	r25, r24
    23a2:	80 7f       	andi	r24, 0xF0	; 240
    23a4:	98 27       	eor	r25, r24
    23a6:	8c 93       	st	X, r24
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e8       	ldi	r26, 0x80	; 128
    23ae:	bf e3       	ldi	r27, 0x3F	; 63
    23b0:	89 8f       	std	Y+25, r24	; 0x19
    23b2:	9a 8f       	std	Y+26, r25	; 0x1a
    23b4:	ab 8f       	std	Y+27, r26	; 0x1b
    23b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a ef       	ldi	r20, 0xFA	; 250
    23c6:	54 e4       	ldi	r21, 0x44	; 68
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8d 8b       	std	Y+21, r24	; 0x15
    23d2:	9e 8b       	std	Y+22, r25	; 0x16
    23d4:	af 8b       	std	Y+23, r26	; 0x17
    23d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d8:	6d 89       	ldd	r22, Y+21	; 0x15
    23da:	7e 89       	ldd	r23, Y+22	; 0x16
    23dc:	8f 89       	ldd	r24, Y+23	; 0x17
    23de:	98 8d       	ldd	r25, Y+24	; 0x18
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <LCD_displayCharacter+0x686>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 8b       	std	Y+20, r25	; 0x14
    23f6:	8b 8b       	std	Y+19, r24	; 0x13
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <LCD_displayCharacter+0x704>
	else if (__tmp > 65535)
    23fa:	6d 89       	ldd	r22, Y+21	; 0x15
    23fc:	7e 89       	ldd	r23, Y+22	; 0x16
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <LCD_displayCharacter+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	69 8d       	ldd	r22, Y+25	; 0x19
    2414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9c 8b       	std	Y+20, r25	; 0x14
    2438:	8b 8b       	std	Y+19, r24	; 0x13
    243a:	0f c0       	rjmp	.+30     	; 0x245a <LCD_displayCharacter+0x6e6>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9a 8b       	std	Y+18, r25	; 0x12
    2442:	89 8b       	std	Y+17, r24	; 0x11
    2444:	89 89       	ldd	r24, Y+17	; 0x11
    2446:	9a 89       	ldd	r25, Y+18	; 0x12
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_displayCharacter+0x6d4>
    244c:	9a 8b       	std	Y+18, r25	; 0x12
    244e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9c 8b       	std	Y+20, r25	; 0x14
    2458:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8b 89       	ldd	r24, Y+19	; 0x13
    245c:	9c 89       	ldd	r25, Y+20	; 0x14
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <LCD_displayCharacter+0x6c8>
    2462:	14 c0       	rjmp	.+40     	; 0x248c <LCD_displayCharacter+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	6d 89       	ldd	r22, Y+21	; 0x15
    2466:	7e 89       	ldd	r23, Y+22	; 0x16
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9c 8b       	std	Y+20, r25	; 0x14
    2476:	8b 8b       	std	Y+19, r24	; 0x13
    2478:	8b 89       	ldd	r24, Y+19	; 0x13
    247a:	9c 89       	ldd	r25, Y+20	; 0x14
    247c:	98 8b       	std	Y+16, r25	; 0x10
    247e:	8f 87       	std	Y+15, r24	; 0x0f
    2480:	8f 85       	ldd	r24, Y+15	; 0x0f
    2482:	98 89       	ldd	r25, Y+16	; 0x10
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <LCD_displayCharacter+0x710>
    2488:	98 8b       	std	Y+16, r25	; 0x10
    248a:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (data & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    248c:	a8 e3       	ldi	r26, 0x38	; 56
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e8 e3       	ldi	r30, 0x38	; 56
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	8c 93       	st	X, r24
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a0 e8       	ldi	r26, 0x80	; 128
    24a0:	bf e3       	ldi	r27, 0x3F	; 63
    24a2:	8b 87       	std	Y+11, r24	; 0x0b
    24a4:	9c 87       	std	Y+12, r25	; 0x0c
    24a6:	ad 87       	std	Y+13, r26	; 0x0d
    24a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a ef       	ldi	r20, 0xFA	; 250
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8f 83       	std	Y+7, r24	; 0x07
    24c4:	98 87       	std	Y+8, r25	; 0x08
    24c6:	a9 87       	std	Y+9, r26	; 0x09
    24c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <LCD_displayCharacter+0x778>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <LCD_displayCharacter+0x7f6>
	else if (__tmp > 65535)
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <LCD_displayCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	0f c0       	rjmp	.+30     	; 0x254c <LCD_displayCharacter+0x7d8>
    252e:	88 ec       	ldi	r24, 0xC8	; 200
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_displayCharacter+0x7c6>
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <LCD_displayCharacter+0x7ba>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <LCD_displayCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_displayCharacter+0x802>
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    257e:	cd 59       	subi	r28, 0x9D	; 157
    2580:	df 4f       	sbci	r29, 0xFF	; 255
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	08 95       	ret

00002596 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <LCD_displayString+0x6>
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	9b 83       	std	Y+3, r25	; 0x03
    25a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25a6:	19 82       	std	Y+1, r1	; 0x01
    25a8:	0e c0       	rjmp	.+28     	; 0x25c6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	fc 01       	movw	r30, r24
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	80 81       	ld	r24, Z
    25bc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayCharacter>
		i++;
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	9b 81       	ldd	r25, Y+3	; 0x03
    25d0:	fc 01       	movw	r30, r24
    25d2:	e2 0f       	add	r30, r18
    25d4:	f3 1f       	adc	r31, r19
    25d6:	80 81       	ld	r24, Z
    25d8:	88 23       	and	r24, r24
    25da:	39 f7       	brne	.-50     	; 0x25aa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <LCD_goToRowColumn+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LCD_goToRowColumn+0x8>
    25f0:	0f 92       	push	r0
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	8a 83       	std	Y+2, r24	; 0x02
    25f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	3d 83       	std	Y+5, r19	; 0x05
    2602:	2c 83       	std	Y+4, r18	; 0x04
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	9d 81       	ldd	r25, Y+5	; 0x05
    2608:	81 30       	cpi	r24, 0x01	; 1
    260a:	91 05       	cpc	r25, r1
    260c:	c1 f0       	breq	.+48     	; 0x263e <LCD_goToRowColumn+0x56>
    260e:	2c 81       	ldd	r18, Y+4	; 0x04
    2610:	3d 81       	ldd	r19, Y+5	; 0x05
    2612:	22 30       	cpi	r18, 0x02	; 2
    2614:	31 05       	cpc	r19, r1
    2616:	2c f4       	brge	.+10     	; 0x2622 <LCD_goToRowColumn+0x3a>
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	9d 81       	ldd	r25, Y+5	; 0x05
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	61 f0       	breq	.+24     	; 0x2638 <LCD_goToRowColumn+0x50>
    2620:	19 c0       	rjmp	.+50     	; 0x2654 <LCD_goToRowColumn+0x6c>
    2622:	2c 81       	ldd	r18, Y+4	; 0x04
    2624:	3d 81       	ldd	r19, Y+5	; 0x05
    2626:	22 30       	cpi	r18, 0x02	; 2
    2628:	31 05       	cpc	r19, r1
    262a:	69 f0       	breq	.+26     	; 0x2646 <LCD_goToRowColumn+0x5e>
    262c:	8c 81       	ldd	r24, Y+4	; 0x04
    262e:	9d 81       	ldd	r25, Y+5	; 0x05
    2630:	83 30       	cpi	r24, 0x03	; 3
    2632:	91 05       	cpc	r25, r1
    2634:	61 f0       	breq	.+24     	; 0x264e <LCD_goToRowColumn+0x66>
    2636:	0e c0       	rjmp	.+28     	; 0x2654 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	0b c0       	rjmp	.+22     	; 0x2654 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	80 5c       	subi	r24, 0xC0	; 192
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	80 5f       	subi	r24, 0xF0	; 240
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	03 c0       	rjmp	.+6      	; 0x2654 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	80 5b       	subi	r24, 0xB0	; 176
    2652:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	80 68       	ori	r24, 0x80	; 128
    2658:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_sendCommand>
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <LCD_displayStringRowColumn+0x6>
    2672:	00 d0       	rcall	.+0      	; 0x2674 <LCD_displayStringRowColumn+0x8>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	6a 83       	std	Y+2, r22	; 0x02
    267c:	5c 83       	std	Y+4, r21	; 0x04
    267e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	6a 81       	ldd	r22, Y+2	; 0x02
    2684:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_displayString>
}
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	62 97       	sbiw	r28, 0x12	; 18
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	9a 8b       	std	Y+18, r25	; 0x12
    26b4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    26b6:	89 89       	ldd	r24, Y+17	; 0x11
    26b8:	9a 89       	ldd	r25, Y+18	; 0x12
    26ba:	9e 01       	movw	r18, r28
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	b9 01       	movw	r22, r18
    26c2:	4a e0       	ldi	r20, 0x0A	; 10
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	0e 94 41 16 	call	0x2c82	; 0x2c82 <itoa>
   LCD_displayString(buff);
    26ca:	ce 01       	movw	r24, r28
    26cc:	01 96       	adiw	r24, 0x01	; 1
    26ce:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_displayString>
}
    26d2:	62 96       	adiw	r28, 0x12	; 18
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_sendCommand>
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <getPassword>:
 *      Author: Hazza3
 */
#define BUTTON_DELAY 250
#include "password.h"
#include <util/delay.h>
void getPassword(uint8 array[]) {
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	62 97       	sbiw	r28, 0x12	; 18
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	9a 8b       	std	Y+18, r25	; 0x12
    270e:	89 8b       	std	Y+17, r24	; 0x11
	sint8 i;
	uint8 key;
	for (i = 0; i < 5; i++) {
    2710:	18 8a       	std	Y+16, r1	; 0x10
    2712:	b9 c0       	rjmp	.+370    	; 0x2886 <getPassword+0x18e>
		key = KeyPad_getPressedKey();
    2714:	0e 94 8a 09 	call	0x1314	; 0x1314 <KeyPad_getPressedKey>
    2718:	8f 87       	std	Y+15, r24	; 0x0f
		if (key == '*') {
    271a:	8f 85       	ldd	r24, Y+15	; 0x0f
    271c:	8a 32       	cpi	r24, 0x2A	; 42
    271e:	51 f4       	brne	.+20     	; 0x2734 <getPassword+0x3c>
			LCD_displayStringRowColumn(1, 0, "                ");
    2720:	20 e6       	ldi	r18, 0x60	; 96
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	a9 01       	movw	r20, r18
    272a:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayStringRowColumn>
			i = -1;
    272e:	8f ef       	ldi	r24, 0xFF	; 255
    2730:	88 8b       	std	Y+16, r24	; 0x10
    2732:	a6 c0       	rjmp	.+332    	; 0x2880 <getPassword+0x188>
			continue;
		} else if ((key >= 0) && (key <= 9)) {
    2734:	8f 85       	ldd	r24, Y+15	; 0x0f
    2736:	8a 30       	cpi	r24, 0x0A	; 10
    2738:	08 f0       	brcs	.+2      	; 0x273c <getPassword+0x44>
    273a:	8c c0       	rjmp	.+280    	; 0x2854 <getPassword+0x15c>
			array[i] = key;
    273c:	88 89       	ldd	r24, Y+16	; 0x10
    273e:	28 2f       	mov	r18, r24
    2740:	33 27       	eor	r19, r19
    2742:	27 fd       	sbrc	r18, 7
    2744:	30 95       	com	r19
    2746:	89 89       	ldd	r24, Y+17	; 0x11
    2748:	9a 89       	ldd	r25, Y+18	; 0x12
    274a:	fc 01       	movw	r30, r24
    274c:	e2 0f       	add	r30, r18
    274e:	f3 1f       	adc	r31, r19
    2750:	8f 85       	ldd	r24, Y+15	; 0x0f
    2752:	80 83       	st	Z, r24
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	aa e7       	ldi	r26, 0x7A	; 122
    275a:	b3 e4       	ldi	r27, 0x43	; 67
    275c:	8b 87       	std	Y+11, r24	; 0x0b
    275e:	9c 87       	std	Y+12, r25	; 0x0c
    2760:	ad 87       	std	Y+13, r26	; 0x0d
    2762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	6b 85       	ldd	r22, Y+11	; 0x0b
    2766:	7c 85       	ldd	r23, Y+12	; 0x0c
    2768:	8d 85       	ldd	r24, Y+13	; 0x0d
    276a:	9e 85       	ldd	r25, Y+14	; 0x0e
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a ef       	ldi	r20, 0xFA	; 250
    2772:	54 e4       	ldi	r21, 0x44	; 68
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8f 83       	std	Y+7, r24	; 0x07
    277e:	98 87       	std	Y+8, r25	; 0x08
    2780:	a9 87       	std	Y+9, r26	; 0x09
    2782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2784:	6f 81       	ldd	r22, Y+7	; 0x07
    2786:	78 85       	ldd	r23, Y+8	; 0x08
    2788:	89 85       	ldd	r24, Y+9	; 0x09
    278a:	9a 85       	ldd	r25, Y+10	; 0x0a
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	2c f4       	brge	.+10     	; 0x27a6 <getPassword+0xae>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	3f c0       	rjmp	.+126    	; 0x2824 <getPassword+0x12c>
	else if (__tmp > 65535)
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	4c f5       	brge	.+82     	; 0x2810 <getPassword+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <getPassword+0x10e>
    27e8:	88 ec       	ldi	r24, 0xC8	; 200
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <getPassword+0xfc>
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fc:	8d 81       	ldd	r24, Y+5	; 0x05
    27fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	69 f7       	brne	.-38     	; 0x27e8 <getPassword+0xf0>
    280e:	14 c0       	rjmp	.+40     	; 0x2838 <getPassword+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <getPassword+0x138>
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
		} else {
			i -= 1;
			continue;
		}
		_delay_ms(BUTTON_DELAY);
		LCD_goToRowColumn(1, i + 3);
    2838:	88 89       	ldd	r24, Y+16	; 0x10
    283a:	98 2f       	mov	r25, r24
    283c:	9d 5f       	subi	r25, 0xFD	; 253
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	69 2f       	mov	r22, r25
    2842:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    2846:	8a e2       	ldi	r24, 0x2A	; 42
    2848:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayCharacter>

		if (i == 4) {
    284c:	88 89       	ldd	r24, Y+16	; 0x10
    284e:	84 30       	cpi	r24, 0x04	; 4
    2850:	29 f0       	breq	.+10     	; 0x285c <getPassword+0x164>
    2852:	16 c0       	rjmp	.+44     	; 0x2880 <getPassword+0x188>
			i = -1;
			continue;
		} else if ((key >= 0) && (key <= 9)) {
			array[i] = key;
		} else {
			i -= 1;
    2854:	88 89       	ldd	r24, Y+16	; 0x10
    2856:	81 50       	subi	r24, 0x01	; 1
    2858:	88 8b       	std	Y+16, r24	; 0x10
    285a:	12 c0       	rjmp	.+36     	; 0x2880 <getPassword+0x188>
		_delay_ms(BUTTON_DELAY);
		LCD_goToRowColumn(1, i + 3);
		LCD_displayCharacter('*');

		if (i == 4) {
			key = KeyPad_getPressedKey();
    285c:	0e 94 8a 09 	call	0x1314	; 0x1314 <KeyPad_getPressedKey>
    2860:	8f 87       	std	Y+15, r24	; 0x0f
			if (key == 13) {
    2862:	8f 85       	ldd	r24, Y+15	; 0x0f
    2864:	8d 30       	cpi	r24, 0x0D	; 13
    2866:	99 f0       	breq	.+38     	; 0x288e <getPassword+0x196>
				break;
			} else if (key == '*') {
    2868:	8f 85       	ldd	r24, Y+15	; 0x0f
    286a:	8a 32       	cpi	r24, 0x2A	; 42
    286c:	49 f4       	brne	.+18     	; 0x2880 <getPassword+0x188>
				LCD_displayStringRowColumn(1, 0, "                ");
    286e:	20 e6       	ldi	r18, 0x60	; 96
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	a9 01       	movw	r20, r18
    2878:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayStringRowColumn>
				i = -1;
    287c:	8f ef       	ldi	r24, 0xFF	; 255
    287e:	88 8b       	std	Y+16, r24	; 0x10
#include "password.h"
#include <util/delay.h>
void getPassword(uint8 array[]) {
	sint8 i;
	uint8 key;
	for (i = 0; i < 5; i++) {
    2880:	88 89       	ldd	r24, Y+16	; 0x10
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	88 8b       	std	Y+16, r24	; 0x10
    2886:	88 89       	ldd	r24, Y+16	; 0x10
    2888:	85 30       	cpi	r24, 0x05	; 5
    288a:	0c f4       	brge	.+2      	; 0x288e <getPassword+0x196>
    288c:	43 cf       	rjmp	.-378    	; 0x2714 <getPassword+0x1c>
				continue;
			}
		}
	}

}
    288e:	62 96       	adiw	r28, 0x12	; 18
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <compareTwoPasswords>:

uint8 compareTwoPasswords(uint8 arr1[], uint8 arr2[]) {
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <compareTwoPasswords+0x6>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <compareTwoPasswords+0x8>
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <compareTwoPasswords+0xa>
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	9c 83       	std	Y+4, r25	; 0x04
    28b0:	8b 83       	std	Y+3, r24	; 0x03
    28b2:	7e 83       	std	Y+6, r23	; 0x06
    28b4:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count = 0;
    28b6:	1a 82       	std	Y+2, r1	; 0x02
	sint8 i;
	for (i = 0; i < 5; i++) {
    28b8:	19 82       	std	Y+1, r1	; 0x01
    28ba:	1e c0       	rjmp	.+60     	; 0x28f8 <compareTwoPasswords+0x58>
		if (arr1[i] == arr2[i]) {
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	28 2f       	mov	r18, r24
    28c0:	33 27       	eor	r19, r19
    28c2:	27 fd       	sbrc	r18, 7
    28c4:	30 95       	com	r19
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ca:	fc 01       	movw	r30, r24
    28cc:	e2 0f       	add	r30, r18
    28ce:	f3 1f       	adc	r31, r19
    28d0:	40 81       	ld	r20, Z
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	28 2f       	mov	r18, r24
    28d6:	33 27       	eor	r19, r19
    28d8:	27 fd       	sbrc	r18, 7
    28da:	30 95       	com	r19
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	fc 01       	movw	r30, r24
    28e2:	e2 0f       	add	r30, r18
    28e4:	f3 1f       	adc	r31, r19
    28e6:	80 81       	ld	r24, Z
    28e8:	48 17       	cp	r20, r24
    28ea:	19 f4       	brne	.+6      	; 0x28f2 <compareTwoPasswords+0x52>
			count++;
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	8f 5f       	subi	r24, 0xFF	; 255
    28f0:	8a 83       	std	Y+2, r24	; 0x02
}

uint8 compareTwoPasswords(uint8 arr1[], uint8 arr2[]) {
	uint8 count = 0;
	sint8 i;
	for (i = 0; i < 5; i++) {
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	85 30       	cpi	r24, 0x05	; 5
    28fc:	fc f2       	brlt	.-66     	; 0x28bc <compareTwoPasswords+0x1c>
		if (arr1[i] == arr2[i]) {
			count++;
		}
	}
	return count;
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2900:	26 96       	adiw	r28, 0x06	; 6
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <prepareToSend>:

void prepareToSend(uint8 array[], uint8 array2[]) {
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <prepareToSend+0x6>
    2918:	00 d0       	rcall	.+0      	; 0x291a <prepareToSend+0x8>
    291a:	0f 92       	push	r0
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9b 83       	std	Y+3, r25	; 0x03
    2922:	8a 83       	std	Y+2, r24	; 0x02
    2924:	7d 83       	std	Y+5, r23	; 0x05
    2926:	6c 83       	std	Y+4, r22	; 0x04
	sint8 i = 0;
    2928:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 6; i++) {
    292a:	19 82       	std	Y+1, r1	; 0x01
    292c:	22 c0       	rjmp	.+68     	; 0x2972 <prepareToSend+0x60>
		array2[i] = array[i];
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	28 2f       	mov	r18, r24
    2932:	33 27       	eor	r19, r19
    2934:	27 fd       	sbrc	r18, 7
    2936:	30 95       	com	r19
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	9d 81       	ldd	r25, Y+5	; 0x05
    293c:	dc 01       	movw	r26, r24
    293e:	a2 0f       	add	r26, r18
    2940:	b3 1f       	adc	r27, r19
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	28 2f       	mov	r18, r24
    2946:	33 27       	eor	r19, r19
    2948:	27 fd       	sbrc	r18, 7
    294a:	30 95       	com	r19
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	9b 81       	ldd	r25, Y+3	; 0x03
    2950:	fc 01       	movw	r30, r24
    2952:	e2 0f       	add	r30, r18
    2954:	f3 1f       	adc	r31, r19
    2956:	80 81       	ld	r24, Z
    2958:	8c 93       	st	X, r24
		if (i == 5) {
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	85 30       	cpi	r24, 0x05	; 5
    295e:	31 f4       	brne	.+12     	; 0x296c <prepareToSend+0x5a>
			array2[5] = '#';
    2960:	8c 81       	ldd	r24, Y+4	; 0x04
    2962:	9d 81       	ldd	r25, Y+5	; 0x05
    2964:	fc 01       	movw	r30, r24
    2966:	35 96       	adiw	r30, 0x05	; 5
    2968:	83 e2       	ldi	r24, 0x23	; 35
    296a:	80 83       	st	Z, r24
	return count;
}

void prepareToSend(uint8 array[], uint8 array2[]) {
	sint8 i = 0;
	for (i = 0; i < 6; i++) {
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	86 30       	cpi	r24, 0x06	; 6
    2976:	dc f2       	brlt	.-74     	; 0x292e <prepareToSend+0x1c>
		if (i == 5) {
			array2[5] = '#';
			//break;
		}
	}
}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <timer0_init_normal_mode>:
 * so put initial timer counter=0  0 --> 255 (32ms per overflow)
 * so we need timer to overflow 31 times to get a 1 second
 */

void timer0_init_normal_mode(void)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; //timer initial value
    2990:	e2 e5       	ldi	r30, 0x52	; 82
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE0); //enable overflow interrupt
    2996:	a9 e5       	ldi	r26, 0x59	; 89
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e9 e5       	ldi	r30, 0x59	; 89
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	81 60       	ori	r24, 0x01	; 1
    29a2:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1 << FOC0) | (1 << CS02) | (1 << CS00);
    29a4:	e3 e5       	ldi	r30, 0x53	; 83
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	85 e8       	ldi	r24, 0x85	; 133
    29aa:	80 83       	st	Z, r24
	second = 0;
    29ac:	10 92 7b 00 	sts	0x007B, r1
}
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    29b6:	1f 92       	push	r1
    29b8:	0f 92       	push	r0
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	0f 92       	push	r0
    29be:	11 24       	eor	r1, r1
    29c0:	8f 93       	push	r24
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    29ca:	80 91 7c 00 	lds	r24, 0x007C
    29ce:	8f 5f       	subi	r24, 0xFF	; 255
    29d0:	80 93 7c 00 	sts	0x007C, r24
	if (g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
    29d4:	80 91 7c 00 	lds	r24, 0x007C
    29d8:	80 32       	cpi	r24, 0x20	; 32
    29da:	39 f4       	brne	.+14     	; 0x29ea <__vector_9+0x34>
	{
		second++;
    29dc:	80 91 7b 00 	lds	r24, 0x007B
    29e0:	8f 5f       	subi	r24, 0xFF	; 255
    29e2:	80 93 7b 00 	sts	0x007B, r24
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
    29e6:	10 92 7c 00 	sts	0x007C, r1
	}
}
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	8f 91       	pop	r24
    29f0:	0f 90       	pop	r0
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	0f 90       	pop	r0
    29f6:	1f 90       	pop	r1
    29f8:	18 95       	reti

000029fa <UART_init>:
#include "uart_messages.h"
extern volatile uint8 g_choice;
extern volatile uint8 recived_new[6];
extern volatile uint8 recived_open[6];
extern volatile uint8 recived_change[6];
void UART_init(void) {
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1 << U2X); /* U2X = 1 for double transmission speed */
    2a02:	eb e2       	ldi	r30, 0x2B	; 43
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    2a0a:	ea e2       	ldi	r30, 0x2A	; 42
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	88 e9       	ldi	r24, 0x98	; 152
    2a10:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    2a12:	e0 e4       	ldi	r30, 0x40	; 64
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	86 e8       	ldi	r24, 0x86	; 134
    2a18:	80 83       	st	Z, r24

	/* baud rate=9600 & Fosc=8MHz -->  UBBR=( Fosc / (8 * baud rate) ) - 1 = 103 */
	UBRRH = 0;
    2a1a:	e0 e4       	ldi	r30, 0x40	; 64
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	10 82       	st	Z, r1
	UBRRL = 103;
    2a20:	e9 e2       	ldi	r30, 0x29	; 41
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	87 e6       	ldi	r24, 0x67	; 103
    2a26:	80 83       	st	Z, r24
}
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <UART_sendByte>:

void UART_sendByte(const uint8 data) {
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	0f 92       	push	r0
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    2a3a:	eb e2       	ldi	r30, 0x2B	; 43
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	80 72       	andi	r24, 0x20	; 32
    2a46:	90 70       	andi	r25, 0x00	; 0
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	b9 f3       	breq	.-18     	; 0x2a3a <UART_sendByte+0xc>
	}
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */
	UDR = data;
    2a4c:	ec e2       	ldi	r30, 0x2C	; 44
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <UART_recieveByte>:

uint8 UART_recieveByte(void) {
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    2a64:	eb e2       	ldi	r30, 0x2B	; 43
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	dc f7       	brge	.-10     	; 0x2a64 <UART_recieveByte+0x8>
	}
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	 will be cleared after read this data */
	return UDR;
    2a6e:	ec e2       	ldi	r30, 0x2C	; 44
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
}
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <UART_sendString>:

void UART_sendString(const uint8 *Str) {
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <UART_sendString+0x6>
    2a80:	0f 92       	push	r0
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	9b 83       	std	Y+3, r25	; 0x03
    2a88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a8a:	19 82       	std	Y+1, r1	; 0x01
    2a8c:	0e c0       	rjmp	.+28     	; 0x2aaa <UART_sendString+0x30>
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	fc 01       	movw	r30, r24
    2a9a:	e2 0f       	add	r30, r18
    2a9c:	f3 1f       	adc	r31, r19
    2a9e:	80 81       	ld	r24, Z
    2aa0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
		i++;
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	28 2f       	mov	r18, r24
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	e2 0f       	add	r30, r18
    2ab8:	f3 1f       	adc	r31, r19
    2aba:	80 81       	ld	r24, Z
    2abc:	88 23       	and	r24, r24
    2abe:	39 f7       	brne	.-50     	; 0x2a8e <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <UART_receiveString>:

void UART_receiveString(uint8 *Str) {
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <UART_receiveString+0xa>
    2ad6:	0f 92       	push	r0
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	9b 83       	std	Y+3, r25	; 0x03
    2ade:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ae0:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	8c 01       	movw	r16, r24
    2aee:	02 0f       	add	r16, r18
    2af0:	13 1f       	adc	r17, r19
    2af2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
    2af6:	f8 01       	movw	r30, r16
    2af8:	80 83       	st	Z, r24
    2afa:	0f c0       	rjmp	.+30     	; 0x2b1a <UART_receiveString+0x4e>
	while (Str[i] != '#') {
		i++;
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	8f 5f       	subi	r24, 0xFF	; 255
    2b00:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0c:	8c 01       	movw	r16, r24
    2b0e:	02 0f       	add	r16, r18
    2b10:	13 1f       	adc	r17, r19
    2b12:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
    2b16:	f8 01       	movw	r30, r16
    2b18:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while (Str[i] != '#') {
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	9b 81       	ldd	r25, Y+3	; 0x03
    2b24:	fc 01       	movw	r30, r24
    2b26:	e2 0f       	add	r30, r18
    2b28:	f3 1f       	adc	r31, r19
    2b2a:	80 81       	ld	r24, Z
    2b2c:	83 32       	cpi	r24, 0x23	; 35
    2b2e:	31 f7       	brne	.-52     	; 0x2afc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	e2 0f       	add	r30, r18
    2b3e:	f3 1f       	adc	r31, r19
    2b40:	10 82       	st	Z, r1
}
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	08 95       	ret

00002b52 <__vector_11>:

ISR(USART_RXC_vect) {
    2b52:	1f 92       	push	r1
    2b54:	0f 92       	push	r0
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	0f 92       	push	r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	2f 93       	push	r18
    2b5e:	3f 93       	push	r19
    2b60:	4f 93       	push	r20
    2b62:	5f 93       	push	r21
    2b64:	6f 93       	push	r22
    2b66:	7f 93       	push	r23
    2b68:	8f 93       	push	r24
    2b6a:	9f 93       	push	r25
    2b6c:	af 93       	push	r26
    2b6e:	bf 93       	push	r27
    2b70:	ef 93       	push	r30
    2b72:	ff 93       	push	r31
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	0f 92       	push	r0
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
	uint8 key = UART_recieveByte();
    2b7e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
    2b82:	89 83       	std	Y+1, r24	; 0x01
	if (key == NEW_PASSWORD) {
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	8a 30       	cpi	r24, 0x0A	; 10
    2b88:	41 f4       	brne	.+16     	; 0x2b9a <__vector_11+0x48>
		g_choice = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 7a 00 	sts	0x007A, r24
		UART_receiveString(recived_new);
    2b90:	83 e8       	ldi	r24, 0x83	; 131
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 66 15 	call	0x2acc	; 0x2acc <UART_receiveString>
    2b98:	20 c0       	rjmp	.+64     	; 0x2bda <__vector_11+0x88>
	}
	else if(key == OPEN_DOOR)
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	8d 30       	cpi	r24, 0x0D	; 13
    2b9e:	41 f4       	brne	.+16     	; 0x2bb0 <__vector_11+0x5e>
	{
		g_choice = 2;
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	80 93 7a 00 	sts	0x007A, r24
		UART_receiveString(recived_open);
    2ba6:	8d e7       	ldi	r24, 0x7D	; 125
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 66 15 	call	0x2acc	; 0x2acc <UART_receiveString>
    2bae:	15 c0       	rjmp	.+42     	; 0x2bda <__vector_11+0x88>
	}
	else if(key == CHANGE_PASSWORD)
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	8c 30       	cpi	r24, 0x0C	; 12
    2bb4:	41 f4       	brne	.+16     	; 0x2bc6 <__vector_11+0x74>
	{
		g_choice = 3;
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	80 93 7a 00 	sts	0x007A, r24
		UART_receiveString(recived_change);
    2bbc:	89 e8       	ldi	r24, 0x89	; 137
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 66 15 	call	0x2acc	; 0x2acc <UART_receiveString>
    2bc4:	0a c0       	rjmp	.+20     	; 0x2bda <__vector_11+0x88>
	}
	else if(key == CHANGED_PASSWORD)
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	83 30       	cpi	r24, 0x03	; 3
    2bca:	39 f4       	brne	.+14     	; 0x2bda <__vector_11+0x88>
	{
		g_choice = 4;
    2bcc:	84 e0       	ldi	r24, 0x04	; 4
    2bce:	80 93 7a 00 	sts	0x007A, r24
		UART_receiveString(recived_change);
    2bd2:	89 e8       	ldi	r24, 0x89	; 137
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0e 94 66 15 	call	0x2acc	; 0x2acc <UART_receiveString>
	}

}
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	ff 91       	pop	r31
    2be2:	ef 91       	pop	r30
    2be4:	bf 91       	pop	r27
    2be6:	af 91       	pop	r26
    2be8:	9f 91       	pop	r25
    2bea:	8f 91       	pop	r24
    2bec:	7f 91       	pop	r23
    2bee:	6f 91       	pop	r22
    2bf0:	5f 91       	pop	r21
    2bf2:	4f 91       	pop	r20
    2bf4:	3f 91       	pop	r19
    2bf6:	2f 91       	pop	r18
    2bf8:	0f 90       	pop	r0
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	0f 90       	pop	r0
    2bfe:	1f 90       	pop	r1
    2c00:	18 95       	reti

00002c02 <__prologue_saves__>:
    2c02:	2f 92       	push	r2
    2c04:	3f 92       	push	r3
    2c06:	4f 92       	push	r4
    2c08:	5f 92       	push	r5
    2c0a:	6f 92       	push	r6
    2c0c:	7f 92       	push	r7
    2c0e:	8f 92       	push	r8
    2c10:	9f 92       	push	r9
    2c12:	af 92       	push	r10
    2c14:	bf 92       	push	r11
    2c16:	cf 92       	push	r12
    2c18:	df 92       	push	r13
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	ca 1b       	sub	r28, r26
    2c2c:	db 0b       	sbc	r29, r27
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	09 94       	ijmp

00002c3a <__epilogue_restores__>:
    2c3a:	2a 88       	ldd	r2, Y+18	; 0x12
    2c3c:	39 88       	ldd	r3, Y+17	; 0x11
    2c3e:	48 88       	ldd	r4, Y+16	; 0x10
    2c40:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c42:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c44:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c46:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c48:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c4c:	b9 84       	ldd	r11, Y+9	; 0x09
    2c4e:	c8 84       	ldd	r12, Y+8	; 0x08
    2c50:	df 80       	ldd	r13, Y+7	; 0x07
    2c52:	ee 80       	ldd	r14, Y+6	; 0x06
    2c54:	fd 80       	ldd	r15, Y+5	; 0x05
    2c56:	0c 81       	ldd	r16, Y+4	; 0x04
    2c58:	1b 81       	ldd	r17, Y+3	; 0x03
    2c5a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c5c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c5e:	ce 0f       	add	r28, r30
    2c60:	d1 1d       	adc	r29, r1
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	ed 01       	movw	r28, r26
    2c6e:	08 95       	ret

00002c70 <strcmp>:
    2c70:	fb 01       	movw	r30, r22
    2c72:	dc 01       	movw	r26, r24
    2c74:	8d 91       	ld	r24, X+
    2c76:	01 90       	ld	r0, Z+
    2c78:	80 19       	sub	r24, r0
    2c7a:	01 10       	cpse	r0, r1
    2c7c:	d9 f3       	breq	.-10     	; 0x2c74 <strcmp+0x4>
    2c7e:	99 0b       	sbc	r25, r25
    2c80:	08 95       	ret

00002c82 <itoa>:
    2c82:	fb 01       	movw	r30, r22
    2c84:	9f 01       	movw	r18, r30
    2c86:	e8 94       	clt
    2c88:	42 30       	cpi	r20, 0x02	; 2
    2c8a:	c4 f0       	brlt	.+48     	; 0x2cbc <itoa+0x3a>
    2c8c:	45 32       	cpi	r20, 0x25	; 37
    2c8e:	b4 f4       	brge	.+44     	; 0x2cbc <itoa+0x3a>
    2c90:	4a 30       	cpi	r20, 0x0A	; 10
    2c92:	29 f4       	brne	.+10     	; 0x2c9e <itoa+0x1c>
    2c94:	97 fb       	bst	r25, 7
    2c96:	1e f4       	brtc	.+6      	; 0x2c9e <itoa+0x1c>
    2c98:	90 95       	com	r25
    2c9a:	81 95       	neg	r24
    2c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9e:	64 2f       	mov	r22, r20
    2ca0:	77 27       	eor	r23, r23
    2ca2:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__udivmodhi4>
    2ca6:	80 5d       	subi	r24, 0xD0	; 208
    2ca8:	8a 33       	cpi	r24, 0x3A	; 58
    2caa:	0c f0       	brlt	.+2      	; 0x2cae <itoa+0x2c>
    2cac:	89 5d       	subi	r24, 0xD9	; 217
    2cae:	81 93       	st	Z+, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	a1 f7       	brne	.-24     	; 0x2c9e <itoa+0x1c>
    2cb6:	16 f4       	brtc	.+4      	; 0x2cbc <itoa+0x3a>
    2cb8:	5d e2       	ldi	r21, 0x2D	; 45
    2cba:	51 93       	st	Z+, r21
    2cbc:	10 82       	st	Z, r1
    2cbe:	c9 01       	movw	r24, r18
    2cc0:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <strrev>

00002cc4 <strrev>:
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	67 2f       	mov	r22, r23
    2cca:	71 91       	ld	r23, Z+
    2ccc:	77 23       	and	r23, r23
    2cce:	e1 f7       	brne	.-8      	; 0x2cc8 <strrev+0x4>
    2cd0:	32 97       	sbiw	r30, 0x02	; 2
    2cd2:	04 c0       	rjmp	.+8      	; 0x2cdc <strrev+0x18>
    2cd4:	7c 91       	ld	r23, X
    2cd6:	6d 93       	st	X+, r22
    2cd8:	70 83       	st	Z, r23
    2cda:	62 91       	ld	r22, -Z
    2cdc:	ae 17       	cp	r26, r30
    2cde:	bf 07       	cpc	r27, r31
    2ce0:	c8 f3       	brcs	.-14     	; 0x2cd4 <strrev+0x10>
    2ce2:	08 95       	ret

00002ce4 <__udivmodhi4>:
    2ce4:	aa 1b       	sub	r26, r26
    2ce6:	bb 1b       	sub	r27, r27
    2ce8:	51 e1       	ldi	r21, 0x11	; 17
    2cea:	07 c0       	rjmp	.+14     	; 0x2cfa <__udivmodhi4_ep>

00002cec <__udivmodhi4_loop>:
    2cec:	aa 1f       	adc	r26, r26
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	a6 17       	cp	r26, r22
    2cf2:	b7 07       	cpc	r27, r23
    2cf4:	10 f0       	brcs	.+4      	; 0x2cfa <__udivmodhi4_ep>
    2cf6:	a6 1b       	sub	r26, r22
    2cf8:	b7 0b       	sbc	r27, r23

00002cfa <__udivmodhi4_ep>:
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	5a 95       	dec	r21
    2d00:	a9 f7       	brne	.-22     	; 0x2cec <__udivmodhi4_loop>
    2d02:	80 95       	com	r24
    2d04:	90 95       	com	r25
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	08 95       	ret

00002d0c <_exit>:
    2d0c:	f8 94       	cli

00002d0e <__stop_program>:
    2d0e:	ff cf       	rjmp	.-2      	; 0x2d0e <__stop_program>
